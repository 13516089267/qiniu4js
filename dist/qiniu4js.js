!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Qiniu4js=t():e.Qiniu4js=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return Object.defineProperty(e,"enable",{get:function(){return this._enable},set:function(e){this._enable=e},enumerable:!0,configurable:!0}),e.d=function(t){e._enable&&console.debug(t)},e.l=function(t){e._enable&&console.log(t)},e.e=function(t){e._enable&&console.error(t)},e.w=function(t){e._enable&&console.warn(t)},e.i=function(t){e._enable&&console.info(t)},e}();r._enable=!0,t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),o=n(9),i=n(11),s=n(2),u=n(0),a=n(5),c=n(8),l=n(7);n(12);var p=function(){function e(e){var t=this;this.FILE_INPUT_EL_ID="qiniu4js-input",this._taskQueue=[],this._tasking=!1,this._scale=[],this._saveKey=!1,this.handleFiles=function(){if(0!=t.fileInput.files.length){t.generateTask();for(var e=!1,n=[],r=0,o=t.taskQueue;r<o.length;r++)for(var i=o[r],s=0,a=t.interceptors;s<a.length;s++){var c=a[s];if(c.onIntercept(i)&&(n.push(i),u.default.d("任务拦截器拦截了任务:"),u.default.d(i)),c.onInterrupt(i)){e=!0;break}}if(e)return void u.default.w("任务拦截器中断了任务队列");for(var l=0,p=n;l<p.length;l++){var i=p[l],f=t.taskQueue.indexOf(i);-1!=f&&t.taskQueue.splice(f,1)}t.listener.onReady(t.taskQueue),t.handleImages().then(function(){t.auto&&(u.default.d("开始自动上传"),t.start())})}},this.resolveUUID=function(e){var t=/\$\(uuid\)/;return t.test(e)?e.replace(t,i.default.uuid()):e},this.resolveImageInfo=function(e,t){var n=/\$\(imageInfo\.width\)/,r=/\$\(imageInfo\.height\)/;return n.test(t)||r.test(t)?new Promise(function(o){var i=new Image;i.src=URL.createObjectURL(e),i.onload=function(){t=t.replace(n,i.width.toString()),t=t.replace(r,i.height.toString()),o(t)}}):Promise.resolve(t)},this.onSaveKeyResolved=function(e){return t._tokenShare=t._tokenShare&&t._saveKey==e,e},this._retry=e.getRetry,this._size=e.getSize,this._chunk=e.getChunk,this._auto=e.getAuto,this._multiple=e.getMultiple,this._accept=e.getAccept,this._button=e.getButton,this._buttonEventName=e.getButtonEventName,this._compress=e.getCompress,this._scale=e.getScale,this._saveKey=e.getSaveKey,this._tokenFunc=e.getTokenFunc,this._tokenShare=e.getTokenShare,this._listener=Object.assign(new a.default,e.getListener),this._interceptors=e.getInterceptors,this._domain=e.getDomain,this._fileInputId=this.FILE_INPUT_EL_ID+"_"+(new Date).getTime(),u.default.enable=e.getIsDebug,this.validateOptions(),this.init()}return e.prototype.init=function(){this.initFileInputEl()},e.prototype.initUploadPattern=function(){},e.prototype.initFileInputEl=function(){var e=document.getElementById(this._fileInputId);if(this._fileInput=e||document.createElement("input"),this.fileInput.type="file",this.fileInput.id=this._fileInputId,this.fileInput.style.display="none",this.multiple&&(this.fileInput.multiple=!0),this.accept&&0!=this.accept.length){for(var t="",n=0,r=this.accept;n<r.length;n++){t+=r[n],t+=","}t.endsWith(",")&&(t=t.substring(0,t.length-1)),this.fileInput.accept=t,u.default.d("accept类型 "+t)}if(document.body.appendChild(this.fileInput),this.fileInput.addEventListener("change",this.handleFiles,!1),void 0!=this._button){document.getElementById(this._button).addEventListener(this._buttonEventName,this.chooseFile.bind(this))}},e.prototype.resetUploader=function(){u.default.d("开始重置 uploader"),this.taskQueue.length=0,u.default.d("任务队列已清空"),this._token=null,u.default.d("token已清空"),u.default.d("uploader 重置完毕")},e.isChunkTask=function(e){return e.constructor.name===o.ChunkTask.name&&e instanceof o.ChunkTask},e.isDirectTask=function(e){return e.constructor.name===r.default.name&&e instanceof r.default},e.prototype.generateTask=function(){this.resetUploader();for(var e=this.fileInput.files,t=0;t<this.fileInput.files.length;t++){var n=e[t],i=void 0;i=this.chunk&&n.size>s.default.BLOCK_SIZE?new o.ChunkTask(n,s.default.BLOCK_SIZE,this.size):new r.default(n),0==this._saveKey&&(i.key=this.listener.onTaskGetKey(i)),this.taskQueue.push(i)}},e.prototype.handleImages=function(){var t=[];if(1!=this.compress||0!=this.scale[0]||0!=this.scale[1])for(var n=this,r=0,o=this.taskQueue;r<o.length;r++){var i=o[r];!function(r){if(!r.file.type.match("image.*"))return"continue";u.default.d(r.file.name+" 处理前的图片大小:"+r.file.size/1024+" kb");var o=document.createElement("canvas"),i=new Image,s=o.getContext("2d");i.src=URL.createObjectURL(r.file);var a=n;t.push(new Promise(function(e){return i.onload=function(){var t=i.width,n=i.height,c=a.scale[0],l=a.scale[1];0==c&&l>0?(o.width=t/n*l,o.height=l):0==l&&c>0?(o.width=c,o.height=n/t*c):c>0&&l>0?(o.width=c,o.height=l):(o.width=i.width,o.height=i.height),s.drawImage(i,0,0,o.width,o.height),console.log(o),console.log(o.toBlob),o.toBlob(function(t){e(t),u.default.d(r.file.name+" 处理后的图片大小:"+t.size/1024+" kb")},"image/jpeg",.95*a.compress)}}).then(function(t){t.name=r.file.name,r.file=t,e.isChunkTask(r)&&r.spliceFile2Block()}))}(i)}return Promise.all(t)},e.prototype.validateOptions=function(){if(u.default.d("开始检查构建参数合法性"),!this._tokenFunc)throw new Error("你必须提供一个获取Token的回调函数");if(!this.scale||!this.scale instanceof Array||2!=this.scale.length||this.scale[0]<0||this.scale[1]<0)throw new Error("scale必须是长度为2的number类型的数组,scale[0]为宽度，scale[1]为长度,必须大于等于0");u.default.d("构建参数检查完毕")},e.prototype.start=function(){if(u.default.d("上传任务遍历开始"),0==this.fileInput.files.length)throw new Error("没有选中的文件，无法开始上传");if(this.tasking)throw new Error("任务执行中，请不要重复上传");this.listener.onStart(this.taskQueue);for(var t=0,n=this.taskQueue;t<n.length;t++){var r=n[t];if(u.default.d("上传文件名："+r.file.name),u.default.d("上传文件大小："+r.file.size+"字节，"+r.file.size/1024+" kb，"+r.file.size/1024/1024+" mb"),e.isDirectTask(r))u.default.d("该上传任务为直传任务"),new c.default(this).upload(r);else{if(!e.isChunkTask(r))throw new Error("非法的task类型");u.default.d("该上传任务为分片任务"),new l.default(this).upload(r)}}},e.prototype.isTaskQueueFinish=function(){for(var e=0,t=this.taskQueue;e<t.length;e++){if(!t[e].isFinish)return!1}return!0},e.prototype.chooseFile=function(){this.fileInput.click()},e.prototype.getToken=function(e){var t=this;return this._tokenShare&&void 0!=this._token?Promise.resolve(this._token):(u.default.d("开始获取上传token"),Promise.resolve(this._tokenFunc(this,e)).then(function(e){return u.default.d("上传token获取成功: "+e),t._token=e,e}))},e.prototype.requestTaskToken=function(e,t){var n=this;return this.resolveSaveKey(e).then(function(e){return n.requestToken(t,e)})},e.prototype.requestToken=function(e,t){return new Promise(function(n,r){"string"==typeof t&&(e+=(/\?/.test(e)?"&":"?")+"saveKey="+encodeURIComponent(t)),e+=(/\?/.test(e)?"&":"?")+(new Date).getTime();var o=new XMLHttpRequest;o.open("GET",e,!0),o.onreadystatechange=function(){if(o.readyState==XMLHttpRequest.DONE)return 200==o.status?void n(o.response.uptoken):void r(o.response)},o.onabort=function(){r("aborted")},o.responseType="json",o.send()})},e.prototype.resolveSaveKey=function(e){var t=this,n=this._saveKey;return"string"!=typeof n?Promise.resolve(void 0):Promise.resolve(n).then(this.resolveUUID).then(function(n){return t.resolveImageInfo(e.file,n)}).then(this.onSaveKeyResolved)},Object.defineProperty(e.prototype,"retry",{get:function(){return this._retry},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"auto",{get:function(){return this._auto},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"multiple",{get:function(){return this._multiple},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"accept",{get:function(){return this._accept},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"compress",{get:function(){return this._compress},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"scale",{get:function(){return this._scale},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"listener",{get:function(){return this._listener},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fileInput",{get:function(){return this._fileInput},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"chunk",{get:function(){return this._chunk},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"taskQueue",{get:function(){return this._taskQueue},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tasking",{get:function(){return this._tasking},set:function(e){this._tasking=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"interceptors",{get:function(){return this._interceptors},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"domain",{get:function(){return this._domain},enumerable:!0,configurable:!0}),e}();t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(6),i=function(){function e(){this._retry=0,this._domain=e.UPLOAD_DOMAIN,this._scheme=null,this._size=1048576,this._chunk=!0,this._auto=!0,this._multiple=!0,this._accept=[],this._compress=1,this._scale=[0,0],this._saveKey=!1,this._tokenShare=!0,this._interceptors=[],this._isDebug=!1}return e.prototype.domain=function(e){return this._domain=e,this},e.prototype.scheme=function(e){return this._scheme=e,this},e.prototype.interceptor=function(e){return this._interceptors.push(Object.assign(new o.default,e)),this},e.prototype.retry=function(e){return this._retry=e,this},e.prototype.size=function(t){return this._size=Math.min(Math.max(t,1),e.MAX_CHUNK_SIZE),this},e.prototype.auto=function(e){return this._auto=e,this},e.prototype.multiple=function(e){return this._multiple=e,this},e.prototype.accept=function(e){return this._accept=e,this},e.prototype.button=function(e,t){return void 0===t&&(t="click"),this._button=e,this._buttonEventName=t,this},e.prototype.compress=function(e){return this._compress=Math.max(Math.min(e,1),0),this},e.prototype.scale=function(e){return this._scale=e,this},e.prototype.saveKey=function(e){return this._saveKey=e,this},e.prototype.tokenUrl=function(e){return this._tokenFunc=function(t,n){return t.requestTaskToken(n,e)},this},e.prototype.tokenFunc=function(e){return this._tokenFunc=function(t,n){return new Promise(function(t){e(t,n)})},this},e.prototype.listener=function(e){return this._listener=e,this},e.prototype.tokenShare=function(e){return this._tokenShare=e,this},e.prototype.chunk=function(e){return this._chunk=e,this},e.prototype.debug=function(e){return this._isDebug=e,this},Object.defineProperty(e.prototype,"getRetry",{get:function(){return this._retry},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getSize",{get:function(){return this._size},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getAuto",{get:function(){return this._auto},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getMultiple",{get:function(){return this._multiple},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getAccept",{get:function(){return this._accept},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getButton",{get:function(){return this._button},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getButtonEventName",{get:function(){return this._buttonEventName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCompress",{get:function(){return this._compress},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getScale",{get:function(){return this._scale},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getListener",{get:function(){return this._listener},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getSaveKey",{get:function(){return this._saveKey},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getTokenFunc",{get:function(){return this._tokenFunc},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getTokenShare",{get:function(){return this._tokenShare},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getChunk",{get:function(){return this._chunk},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getIsDebug",{get:function(){return this._isDebug},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getInterceptors",{get:function(){return this._interceptors},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getDomain",{get:function(){var t=this._domain;if(null==t&&(t=e.UPLOAD_DOMAIN),"string"!=typeof t){var n=this._scheme;if("string"!=typeof n){var r=window.location.protocol;n=r.substring(0,r.length-1)}t=t[n]}return t.endsWith("/")?t.substring(0,t.length-1):t},enumerable:!0,configurable:!0}),e.prototype.build=function(){return new r.default(this)},e}();i.MAX_CHUNK_SIZE=4194304,i.BLOCK_SIZE=i.MAX_CHUNK_SIZE,i.UPLOAD_URL="http://upload.qiniu.com",i.UPLOAD_DOMAIN={http:"http://upload.qiniu.com",https:"https://up.qbox.me"},t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this._retry=0,this._progress=0,this._isSuccess=!1,this._isFinish=!1,this._file=e,this._createDate=new Date}return Object.defineProperty(e.prototype,"file",{get:function(){return this._file},set:function(e){this._file=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"retry",{get:function(){return this._retry},set:function(e){this._retry=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"createDate",{get:function(){return this._createDate},set:function(e){this._createDate=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startDate",{get:function(){return this._startDate},set:function(e){this._startDate=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"endDate",{get:function(){return this._endDate},set:function(e){this._endDate=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSuccess",{get:function(){return this._isSuccess},set:function(e){this._isSuccess=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"progress",{get:function(){return this._progress},set:function(e){this._progress=Math.min(Math.max(0,e),100)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"result",{get:function(){return this._result},set:function(e){this._result=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){return this._error},set:function(e){this._error=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this._key},set:function(e){this._key=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isFinish",{get:function(){return this._isFinish},set:function(e){this._isFinish=e},enumerable:!0,configurable:!0}),e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.Uploader=r.default;var o=n(2);t.UploaderBuilder=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.onReady=function(e){},e.prototype.onStart=function(e){},e.prototype.onTaskProgress=function(e){},e.prototype.onTaskGetKey=function(e){return null},e.prototype.onTaskFail=function(e){},e.prototype.onTaskSuccess=function(e){},e.prototype.onTaskRetry=function(e){},e.prototype.onFinish=function(e){},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.onIntercept=function(e){return!1},e.prototype.onInterrupt=function(e){return!1},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e){this.uploader=e}return e.prototype.init=function(e){this.uploader=e},e.prototype.upload=function(e){var t=this;this.task=e,this.uploader.getToken(e).then(function(n){e.startDate=new Date,t.uploadBlock(n)})},e.prototype.uploadBlock=function(e){var t=this;r.default.d("准备开始上传块");var n=Promise.resolve();r.default.d("共"+this.task.blocks.length+"块等待上传"),r.default.d("共"+this.task.totalChunkCount+"分片等待上传"),this.task.blocks.forEach(function(o,i){o.chunks.forEach(function(o,s){n=n.then(function(){return r.default.d("开始上传第"+(i+1)+"块,第"+(s+1)+"片"),t.uploadChunk(o,e)})})}),n.then(function(){return t.concatChunks(e)}).then(function(){t.uploader.isTaskQueueFinish()&&(r.default.d("上传任务队列已结束"),t.uploader.tasking=!1,t.uploader.listener.onFinish(t.uploader.taskQueue))}).catch(function(e){r.default.w(t.task.file.name+"分块上传失败"),t.task.error=e,t.task.isSuccess=!1,t.task.isFinish=!0,t.task.endDate=new Date,t.uploader.listener.onTaskFail(t.task)})},e.prototype.uploadChunk=function(e,t){var n=this;return new Promise(function(r,o){var i=0==e.block.chunks.indexOf(e),s=e.block.chunks.indexOf(e),u=i?null:e.block.chunks[s-1],a=i?n.getUploadBlockUrl(e.block.data.size):n.getUploadChunkUrl(e.start,u?u.ctx:null,u?u.host:null),c=new XMLHttpRequest;c.open("POST",a+=(/\?/.test(a)?"&":"?")+(new Date).getTime(),!0),c.setRequestHeader("Content-Type","application/octet-stream"),c.setRequestHeader("Authorization","UpToken "+t),c.upload.onprogress=function(t){if(t.lengthComputable){var r=Math.round((n.task.finishedBlocksSize+e.start+t.loaded)/n.task.file.size*100);n.task.progress<r&&(n.task.progress=r,n.uploader.listener.onTaskProgress(n.task))}},c.upload.onload=function(){var t=Math.round((n.task.finishedBlocksSize+e.start+e.data.size)/n.task.file.size*100);n.task.progress<t&&(n.task.progress=t,n.uploader.listener.onTaskProgress(n.task))},c.onreadystatechange=function(){if(c.readyState==XMLHttpRequest.DONE)if(200==c.status&&""!=c.responseText){var t=JSON.parse(c.responseText);e.isFinish=!0,e.processing=!1,e.ctx=t.ctx,e.host=t.host;var n=e.block.chunks.indexOf(e),i=n!=e.block.chunks.length-1;i||(e.block.isFinish=!0,e.block.processing=!1),r()}else o(c.response)},c.send(e.data)})},e.prototype.concatChunks=function(e){var t=this;return new Promise(function(n,o){var i=t.task.key?btoa(t.task.key):null;i&&(i=i.replace(/\+/g,"-"),i=i.replace(/\//g,"_"));for(var s=t.getMakeFileUrl(t.task.file.size,i),u="",a=0,c=t.task.blocks;a<c.length;a++){var l=c[a];u+=l.chunks[l.chunks.length-1].ctx+","}u.endsWith(",")&&(u=u.substring(0,u.length-1));var p=new XMLHttpRequest;p.open("POST",s+=(/\?/.test(s)?"&":"?")+(new Date).getTime(),!0),p.setRequestHeader("Content-Type","text/plain"),p.setRequestHeader("Authorization","UpToken "+e),p.onreadystatechange=function(){if(p.readyState==XMLHttpRequest.DONE)if(t.task.isFinish=!0,200==p.status&&""!=p.responseText){var e=JSON.parse(p.responseText);t.task.isSuccess=!0,t.task.result=e,t.task.endDate=new Date,t.uploader.listener.onTaskSuccess(t.task),n()}else t.retryTask(t.task)?(r.default.w(t.task.file.name+"分块上传失败,准备开始重传"),t.uploader.listener.onTaskRetry(t.task)):o(p.response)},p.send(u)})},e.prototype.getUploadBlockUrl=function(e){return this.uploader.domain+"/mkblk/"+e},e.prototype.getUploadChunkUrl=function(e,t,n){return(n||this.uploader.domain)+"/bput/"+t+"/"+e+"/"},e.prototype.getMakeFileUrl=function(e,t){return t?this.uploader.domain+"/mkfile/"+e+"/key/"+t:this.uploader.domain+"/mkfile/"+e},e.prototype.retryTask=function(e){return e.retry>=this.uploader.retry?(r.default.w(e.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(e.retry++,r.default.w(e.file.name+"开始重传,当前重传次数"+e.retry),!0)},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=function(){function e(e){this.uploader=e}return e.prototype.upload=function(e){var t=this;this.task=e,this.uploader.getToken(e).then(function(n){e.startDate=new Date,t.uploadFile(n)})},e.prototype.createFormData=function(e){var t=this.task,n=new FormData;return null!==t.key&&void 0!==t.key&&n.append("key",t.key),n.append("token",e),n.append("file",t.file),r.default.d("创建formData对象"),n},e.prototype.uploadFile=function(e){var t=this,n=this.task,o=new XMLHttpRequest;o.upload.onprogress=function(e){if(e.lengthComputable){var r=Math.round(100*e.loaded/e.total);n.progress<r&&(n.progress=r,t.uploader.listener.onTaskProgress(n))}},o.upload.onload=function(){n.progress<100&&(n.progress=100,t.uploader.listener.onTaskProgress(n))};var i=this.uploader.domain;i+=(/\?/.test(this.uploader.domain)?"&":"?")+(new Date).getTime(),o.open("POST",i,!0),o.onreadystatechange=function(){o.readyState==XMLHttpRequest.DONE&&(200==o.status&&""!=o.responseText?(n.result=JSON.parse(o.responseText),n.isSuccess=!0,n.isFinish=!0,n.endDate=new Date,t.uploader.listener.onTaskSuccess(n)):t.retryTask(n)?(r.default.w(n.file.name+"上传失败,准备开始重传"),t.uploader.listener.onTaskRetry(n)):(r.default.w(n.file.name+"上传失败"),n.error=o.response,n.isSuccess=!1,n.isFinish=!0,n.endDate=new Date,t.uploader.listener.onTaskFail(n)),t.uploader.isTaskQueueFinish()&&(t.uploader.tasking=!1,t.uploader.listener.onFinish(t.uploader.taskQueue)))};var s=this.createFormData(e);o.send(s),r.default.d("发送ajax post 请求")},e.prototype.retryTask=function(e){return r.default.d("开始尝试重传"),e.retry>=this.uploader.retry?(r.default.w(e.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(e.retry++,r.default.w(e.file.name+"开始重传,当前重传次数"+e.retry),this.upload(e),!0)},e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),i=function(e){function t(t,n,r){var o=e.call(this,t)||this;return o._blocks=[],o._blockSize=0,o._chunkSize=0,o._blockSize=n,o._chunkSize=r,o.spliceFile2Block(),o}return r(t,e),t.prototype.spliceFile2Block=function(){this._blocks=[];for(var e=this._file.size,t=this._file,n=Math.ceil(e/this._blockSize),r=0;r<n;r++){var o=r*this._blockSize,i=o+this._blockSize,u=new s(o,i,t.slice(o,i),this._chunkSize,t);this._blocks.push(u)}},Object.defineProperty(t.prototype,"blocks",{get:function(){return this._blocks},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"processingBlock",{get:function(){for(var e=0,t=this._blocks;e<t.length;e++){var n=t[e];if(n.processing)return n}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"finishedBlocksSize",{get:function(){for(var e=0,t=0,n=this._blocks;t<n.length;t++){var r=n[t];e+=r.isFinish?r.data.size:0}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"chunks",{get:function(){for(var e=[],t=0,n=this._blocks;t<n.length;t++)for(var r=n[t],o=0,i=r.chunks;o<i.length;o++){var s=i[o];e.push(s)}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"processingChunk",{get:function(){for(var e=0,t=this._blocks;e<t.length;e++){var n=t[e];if(n.processing)for(var r=0,o=n.chunks;r<o.length;r++){var i=o[r];if(i.processing)return i}}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"totalChunkCount",{get:function(){for(var e=0,t=0,n=this._blocks;t<n.length;t++){e+=n[t].chunks.length}return e},enumerable:!0,configurable:!0}),t}(o.default);t.ChunkTask=i;var s=function(){function e(e,t,n,r,o){this._chunks=[],this._isFinish=!1,this._processing=!1,this._data=n,this._start=e,this._end=t,this._file=o,this.spliceBlock2Chunk(r)}return e.prototype.spliceBlock2Chunk=function(e){for(var t=this._data.size,n=this._data,r=Math.ceil(t/e),o=0;o<r;o++){var i=o*e,s=i+e,a=new u(i,s,n.slice(i,s),this);this._chunks.push(a)}},Object.defineProperty(e.prototype,"processing",{get:function(){return this._processing},set:function(e){this._processing=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"file",{get:function(){return this._file},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isFinish",{get:function(){return this._isFinish},set:function(e){this._isFinish=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{get:function(){return this._data},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return this._start},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"chunks",{get:function(){return this._chunks},enumerable:!0,configurable:!0}),e}();t.Block=s;var u=function(){function e(e,t,n,r){this._processing=!1,this._isFinish=!1,this._start=e,this._end=t,this._data=n,this._block=r}return Object.defineProperty(e.prototype,"block",{get:function(){return this._block},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return this._start},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"end",{get:function(){return this._end},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{get:function(){return this._data},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isFinish",{get:function(){return this._isFinish},set:function(e){this._isFinish=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"host",{get:function(){return this._host},set:function(e){this._host=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"processing",{get:function(){return this._processing},set:function(e){this._processing=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ctx",{get:function(){return this._ctx},set:function(e){this._ctx=e},enumerable:!0,configurable:!0}),e}();t.Chunk=u},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(3),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(o.default);t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.uuid=function(){var e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?n:3&n|8).toString(16)})},e}();t.default=r},function(e,t){}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,