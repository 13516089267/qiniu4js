{"version":3,"file":null,"sources":["../src/Listener.ts","../src/Task.ts","../src/Debug.ts","../src/Uploader.ts","../src/UploaderBuilder.ts"],"sourcesContent":["import Task from \"./Task\";\ninterface Listener {\n    onReady(taskQueue: Task[]): void;\n    onStart(taskQueue: Task[]): void;\n    onTaskProgress(task: Task): void;\n    onTaskGetKey(task: Task): string;\n    onTaskFail(task: Task): void;\n    onTaskSuccess(task: Task): void;\n    onTaskRetry(task: Task): void;\n    onFinish(taskQueue: Task[]): void;\n}\n\n\nclass SimpleListener implements Listener {\n\n    onReady(taskQueue: Task[]): void {\n    }\n\n    onStart(taskQueue: Task[]): void {\n    }\n\n    onTaskProgress(task: Task): void {\n    }\n\n    onTaskGetKey(task: Task): string {\n        return null;\n    }\n\n    onTaskFail(task: Task): void {\n    }\n\n    onTaskSuccess(task: Task): void {\n    }\n\n    onTaskRetry(task: Task): void {\n    }\n\n    onFinish(taskQueue: Task[]): void {\n    }\n}\n\nexport {Listener, SimpleListener};","/**\n * 上传任务\n */\nclass Task {\n    private _file: File;\n    private _retry: Number = 0;//已重试次数\n    private _createDate: Date;//创建时间\n    private _startDate: Date;//开始时间\n    private _endDate: Date;//结束时间\n    private _key: String;//key文件名\n    private _progress: Number = 0;//任务进度,最大100\n    private _isSuccess: Boolean = false;//是否上传成功\n    private _result: Object;\n    private _error: any;\n    private _isFinish: boolean = false;//是否结束\n\n    constructor(file: File) {\n        this._file = file;\n        this._createDate = new Date();\n    }\n\n    get file(): File {\n        return this._file;\n    }\n\n    set file(value: File) {\n        this._file = value;\n    }\n\n    get retry(): Number {\n        return this._retry;\n    }\n\n    set retry(value: Number) {\n        this._retry = value;\n    }\n\n    get createDate(): Date {\n        return this._createDate;\n    }\n\n    set createDate(value: Date) {\n        this._createDate = value;\n    }\n\n    get startDate(): Date {\n        return this._startDate;\n    }\n\n    set startDate(value: Date) {\n        this._startDate = value;\n    }\n\n    get endDate(): Date {\n        return this._endDate;\n    }\n\n    set endDate(value: Date) {\n        this._endDate = value;\n    }\n\n    get isSuccess(): Boolean {\n        return this._isSuccess;\n    }\n\n    set isSuccess(value: Boolean) {\n        this._isSuccess = value;\n    }\n\n    get progress(): Number {\n        return this._progress;\n    }\n\n    set progress(value: Number) {\n        this._progress = Math.min(Math.max(0, value), 100);\n    }\n\n\n    get result() {\n        return this._result;\n    }\n\n    set result(value) {\n        this._result = value;\n    }\n\n    get error() {\n        return this._error;\n    }\n\n    set error(value) {\n        this._error = value;\n    }\n\n\n    get key(): String {\n        return this._key;\n    }\n\n    set key(value: String) {\n        this._key = value;\n    }\n\n    get isFinish(): boolean {\n        return this._isFinish;\n    }\n\n    set isFinish(value: boolean) {\n        this._isFinish = value;\n    }\n}\n\nexport default Task;","class Debug {\n    private static _enable: boolean = true;\n\n    static get enable(): boolean {\n        return this._enable;\n    }\n\n    static set enable(value: boolean) {\n        this._enable = value;\n    }\n\n    public static d(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.debug(object);\n    };\n\n    public static l(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.log(object);\n    }\n\n    public static e(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.error(object);\n    }\n\n    public static w(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.warn(object);\n    }\n\n    public static i(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.info(object);\n    }\n}\n\nexport default Debug;","import UploaderBuilder from \"./UploaderBuilder\";\nimport {Listener, SimpleListener} from \"./Listener\";\nimport Task from \"./Task\";\nimport debug from \"./Debug\";\nimport Interceptor from \"./Interceptor\";\n\n\nclass Uploader {\n    private FILE_INPUT_EL_ID: string = 'qiniu4js-input';\n    public static UPLOAD_URL = 'http://up.qiniu.com/';\n    private _fileInputId: string;\n    private _fileInput: HTMLInputElement;//input 元素\n    private _token: string;//token\n    private _taskQueue: Task[] = [];//任务队列\n    private _tasking: boolean = false;//任务执行中\n\n    private _retry: number;//最大重试次数\n    private _size: number;//分块大小,单位字节,默认4mb\n    private _chunk: boolean;//分块上传\n    private _auto: boolean;//自动上传,每次选择文件后\n    private _multiple: boolean;//是否支持多文件\n    private _accept: string[];//接受的文件类型\n    private _compress: number;//图片压缩质量\n    private _crop: number[];//裁剪参数[x:20,y:20,width:20,height:20]\n    private _listener: Listener;//监听器\n    private _tokenFunc: Function;//token获取函数\n    private _tokenShare: boolean;//分享token,如果为false,每一次HTTP请求都需要新获取Token\n    private _interceptors: Interceptor[];//任务拦截器\n\n    constructor(builder: UploaderBuilder) {\n        this._retry = builder.getRetry;\n        this._size = builder.getSize;\n        this._chunk = builder.getChunk;\n        this._auto = builder.getAuto;\n        this._multiple = builder.getMultiple;\n        this._accept = builder.getAccept;\n        this._compress = builder.getCompress;\n        this._crop = builder.getCrop;\n        this._tokenFunc = builder.getTokenFunc;\n        this._tokenShare = builder.getTokenShare;\n        this._listener = Object.assign(new SimpleListener(), builder.getListener);\n        this._interceptors = builder.getInterceptors;\n\n        this._fileInputId = `${this.FILE_INPUT_EL_ID}_${new Date().getTime()}`;\n        debug.enable = builder.getIsDebug;\n\n        this.validate();\n\n        this.init();\n    }\n\n    /**\n     * 初始化操作\n     */\n    private init(): void {\n        this.initFileInputEl();\n    }\n\n    /**\n     * 初始化file input element\n     */\n    private initFileInputEl(): void {\n\n        //查询已经存在的file input\n        let exist: HTMLInputElement = document.getElementById(this._fileInputId);\n\n        //创建input元素\n        this._fileInput = exist ? exist : document.createElement('input');\n        this.fileInput.type = 'file';//type file\n        this.fileInput.id = this._fileInputId;//id 方便后面查找\n        this.fileInput.style.display = 'none';//隐藏file input\n\n        //多文件\n        if (this.multiple) {\n            //多文件\n            this.fileInput.multiple = true;\n        }\n\n        //文件类型\n        if (this.accept && this.accept.length != 0) {\n            let acceptValue = '';\n\n            for (let value: string of this.accept) {\n                acceptValue += value;\n                acceptValue += ',';\n            }\n\n            if (acceptValue.endsWith(',')) {\n                acceptValue = acceptValue.substring(0, acceptValue.length - 1);\n            }\n            this.fileInput.accept = acceptValue;\n            debug.d(`accept类型 ${acceptValue}`);\n        }\n\n        //将input元素添加到body子节点的末尾\n        document.body.appendChild(this.fileInput);\n\n        //选择文件监听器\n        this.fileInput.addEventListener('change', this.handleFiles, false);\n    }\n\n\n    /**\n     * 上传完成或者失败后,对本次上传任务进行清扫\n     */\n    private clear(): void {\n        this.taskQueue.length = 0;\n        this._token = null;\n    }\n\n    /**\n     * 处理文件\n     */\n    private handleFiles = ()=> {\n\n        //上传前的准备\n        this.readyForUpload();\n\n\n        //是否中断任务\n        let isInterrupt: Boolean = false;\n\n        //任务拦截器过滤\n        for (let task: Task of this.taskQueue) {\n            for (let interceptor: Interceptor of this.interceptors) {\n                if (interceptor.onIntercept(task)) {\n                    //从任务队列中去除任务\n                    this.taskQueue.splice(this.taskQueue.indexOf(task), 1);\n                }\n                if (interceptor.onInterrupt(task)) {\n                    isInterrupt = true;\n                    break;\n                }\n            }\n        }\n\n        if (isInterrupt) {\n            debug.w(\"任务拦截器中断了任务队列\");\n            return;\n        }\n\n        //回调函数函数\n        this.listener.onReady(this.taskQueue);\n\n        //自动上传\n        if (this.auto) {\n            this.uploadFiles();\n        }\n    };\n\n\n    /**\n     * 上传前的准备工作\n     */\n    private readyForUpload() {\n        this.clear();\n        let files = this.fileInput.files;\n        //遍历files 创建上传任务\n        for (let i = 0; i < this.fileInput.files.length; i++) {\n            let file = files[i];\n            let task = new Task(file);\n            task.key = this.listener.onTaskGetKey(task);\n            this.taskQueue.push(task);\n        }\n    }\n\n    private  validate(): void {\n        if (!this.tokenFunc) {\n            throw new Error('你必须提供一个获取Token的回调函数');\n        }\n    }\n\n    public start(): void {\n        if (this.fileInput.files.length == 0) {\n            throw new Error('没有选中的文件，无法start');\n        }\n\n        if (this.tasking) {\n            throw new Error('任务执行中，请不要重复start');\n        }\n\n        this.uploadFiles();\n    }\n\n    /**\n     * 上传多个文件\n     */\n    private uploadFiles() {\n        //开始上传\n        this.listener.onStart(this.taskQueue);\n        this._tasking = true;\n        if (this.chunk) {\n            debug.d('分块上传');\n            this.uploadFilesChunk();\n        }\n        else {\n            debug.d('直接上传');\n            this.uploadFilesDirect();\n        }\n    }\n\n    /**\n     * 直传文件\n     */\n    private uploadFilesDirect() {\n        for (let task: Task of this.taskQueue) {\n            this.uploadFile(task);\n        }\n    }\n\n    /**\n     * 分块上传文件\n     */\n    private uploadFilesChunk() {\n        //todo\n    }\n\n    /**\n     * 所有任务是否完成\n     * @returns {boolean}\n     */\n    private isAllTaskFinish() {\n        for (let task: Task of this.taskQueue) {\n            if (!task.isFinish) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 上传文件\n     * @param task\n     */\n    private uploadFile(task: Task): void {\n\n        let xhr: XMLHttpRequest = new XMLHttpRequest();\n\n        //上传中\n        xhr.upload.onprogress = (e: ProgressEvent)=> {\n            if (e.lengthComputable) {\n                task.progress = Math.round((e.loaded * 100) / e.total);\n                this.listener.onTaskProgress(task);\n            }\n        };\n\n        //上传完成\n        xhr.upload.onload = ()=> {\n            task.progress = 100;\n        };\n\n        xhr.open('POST', Uploader.UPLOAD_URL, true);\n\n        xhr.onreadystatechange = ()=> {\n            if (xhr.readyState == XMLHttpRequest.DONE) {\n                task.endDate = new Date();\n                if (xhr.status == 200 && xhr.responseText != '') {\n                    task.result = JSON.parse(xhr.responseText);\n                    task.isSuccess = true;\n                    task.isFinish = true;\n                    this.listener.onTaskSuccess(task);\n                }\n                else {\n                    if (this.retryTask(task)) {\n                        debug.w(`${task.file.name}上传失败,准备开始重传`);\n                        this.listener.onTaskRetry(task);\n                    }\n                    else {\n                        debug.w(`${task.file.name}上传失败`);\n                        task.error = xhr.response;\n                        task.isSuccess = false;\n                        task.isFinish = true;\n                        this.listener.onTaskFail(task);\n                    }\n                }\n\n                //所有任务都结束了\n                if (this.isAllTaskFinish()) {\n                    //更改任务执行中标志\n                    this._tasking = false;\n\n                    //监听器调用\n                    this.listener.onFinish(this.taskQueue);\n                }\n            }\n        };\n\n        if (this.tokenShare && this.token) {\n            task.startDate = new Date();\n            let formData: FormData = Uploader.createFormData(task, this.token);\n            xhr.send(formData);\n        }\n        else {\n            debug.d(`开始获取token`);\n            this.tokenFunc((token)=> {\n                debug.d(`token获取成功 ${token}`);\n                this._token = token;\n                task.startDate = new Date();\n                let formData: FormData = Uploader.createFormData(task, this.token);\n                xhr.send(formData);\n            }, task);\n        }\n    }\n\n    /**\n     * 如果重试失败,返回false\n     * @param task\n     */\n    private retryTask(task: Task): boolean {\n        //达到重试次数\n        if (task.retry >= this.retry) {\n            debug.w(`${task.file.name}达到重传次数上限${this.retry},停止重传`);\n            return false;\n        }\n        task.retry++;\n        debug.w(`${task.file.name}开始重传,当前重传次数${task.retry}`);\n        this.uploadFile(task);\n        return true;\n    }\n\n    private static createFormData(task: Task, token: String): FormData {\n\n        let formData: FormData = new FormData();\n        if (task.key !== null && task.key !== undefined) {\n            formData.append('key', task.key);\n        }\n\n        formData.append('token', token);\n        formData.append('file', task.file);\n\n        debug.d(`创建formData对象`);\n\n        return formData;\n    }\n\n\n    /**\n     * 选择文件\n     */\n    public chooseFile() {\n        this.fileInput.click();\n    }\n\n    get retry(): number {\n        return this._retry;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get auto(): boolean {\n        return this._auto;\n    }\n\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    get accept(): string[] {\n        return this._accept;\n    }\n\n    get compress(): number {\n        return this._compress;\n    }\n\n    get crop(): number[] {\n        return this._crop;\n    }\n\n    get listener(): Listener {\n        return this._listener;\n    }\n\n    get fileInput(): HTMLInputElement {\n        return this._fileInput;\n    }\n\n    get tokenShare(): boolean {\n        return this._tokenShare;\n    }\n\n    get chunk(): boolean {\n        return this._chunk;\n    }\n\n    get tokenFunc(): Function {\n        return this._tokenFunc;\n    }\n\n    get token(): string {\n        return this._token;\n    }\n\n    get taskQueue(): Task[] {\n        return this._taskQueue;\n    }\n\n\n    get tasking(): boolean {\n        return this._tasking;\n    }\n\n\n    get fileInputId(): string {\n        return this._fileInputId;\n    }\n\n    get interceptors(): Interceptor[] {\n        return this._interceptors;\n    }\n}\n\nexport default Uploader;","import {Listener} from \"./Listener\";\nimport Uploader from \"./Uploader\";\nimport Interceptor from \"./Interceptor\";\n\n/**\n * UploaderBuilder\n *\n */\nclass UploaderBuilder {\n    private _retry: number = 0;//最大重试次数\n    private _size: number = 4 * 1024 * 1024;//分块大小,单位字节,默认4mb\n    private _chunk: boolean = false;//分块上传\n    private _auto: boolean = true;//自动上传,每次选择文件后\n    private _multiple: boolean = true;//是否支持多文件\n    private _accept: string[] = [];//接受的文件类型\n    private _compress: number = 100;//图片压缩质量\n    private _crop: number[] = [];//裁剪参数[x:20,y:20,width:20,height:20]\n    private _listener: Listener;//监听器\n    private _tokenFunc: Function;//token获取函数\n    private _tokenShare: boolean = true;//分享token,如果为false,每一次HTTP请求都需要新获取Token\n    private _interceptors: Interceptor[] = [];//任务拦截器\n    private _isDebug: boolean = false;//\n\n    /**\n     * 添加一个拦截器\n     * @param interceptor\n     * @returns {UploaderBuilder}\n     */\n    public interceptor(interceptor: Interceptor): UploaderBuilder {\n        this._interceptors.push(interceptor);\n        return this;\n    }\n\n    /**\n     * 上传失败后的重传尝试次数\n     * @param retry 默认0次，不尝试次重传\n     * @returns {UploaderBuilder}\n     */\n    public retry(retry: number): UploaderBuilder {\n        this._retry = retry;\n        return this;\n    }\n\n    /**\n     *\n     * @param size 分块大小,单位字节,默认4*1024*1024字节(4mb)\n     * @returns {UploaderBuilder}\n     */\n    private size(size: number): UploaderBuilder {\n        this._size = size;\n        return this;\n    }\n\n    /**\n     * 选择文件后,是否自动上传\n     * @param auto 默认true\n     * @returns {UploaderBuilder}\n     */\n    public auto(auto: boolean): UploaderBuilder {\n        this._auto = auto;\n        return this;\n    }\n\n    /**\n     * 是否支持多文件选择\n     * @param multiple 默认true\n     * @returns {UploaderBuilder}\n     */\n    public multiple(multiple: boolean): UploaderBuilder {\n        this._multiple = multiple;\n        return this;\n    }\n\n    /**\n     * 接受上传的文件类型\n     * @param accept 数组形式例如:['.png','video/*']\n     *\n     * 详细配置见http://www.w3schools.com/tags/att_input_accept.asp\n     *\n     * @returns {UploaderBuilder}\n     */\n    public accept(accept: string[]): UploaderBuilder {\n        this._accept = accept;\n        return this;\n    }\n\n    /**\n     * 图片质量压缩,只在上传的文件是图片的时候有效\n     * @param compress 0-100,默认100,不压缩\n     * @returns {UploaderBuilder}\n     */\n    public compress(compress: number): UploaderBuilder {\n        this._compress = compress;\n        return this;\n    }\n\n    /**\n     * 获取Token的函数\n     * @param tokenFunc\n     * @returns {UploaderBuilder}\n     */\n    public tokenFunc(tokenFunc): UploaderBuilder {\n        this._tokenFunc = tokenFunc;\n        return this;\n    }\n\n    /**\n     * 上传生命周期钩子\n     * @param listener\n     * @returns {UploaderBuilder}\n     */\n    public listener(listener: Listener): UploaderBuilder {\n        this._listener = listener;\n        return this;\n    }\n\n    /**\n     * 是否分享token,如果为false每上传一个文件都需要请求一次Token。\n     * @param tokenShare\n     * @returns {UploaderBuilder}\n     */\n    public tokenShare(tokenShare: boolean): UploaderBuilder {\n        this._tokenShare = tokenShare;\n        return this;\n    }\n\n    /**\n     * 是否分块上传\n     * @param chunk 默认false\n     * @returns {UploaderBuilder}\n     */\n    public chunk(chunk: boolean): UploaderBuilder {\n        this._chunk = chunk;\n        return this;\n    }\n\n    /**\n     * 是否开启debug模式\n     * @param debug 默认false\n     * @returns {UploaderBuilder}\n     */\n    public debug(debug: boolean): UploaderBuilder {\n        this._isDebug = debug;\n        return this;\n    }\n\n    get getRetry(): number {\n        return this._retry;\n    }\n\n    get getSize(): number {\n        return this._size;\n    }\n\n    get getAuto(): boolean {\n        return this._auto;\n    }\n\n    get getMultiple(): boolean {\n        return this._multiple;\n    }\n\n    get getAccept(): string[] {\n        return this._accept;\n    }\n\n    get getCompress(): number {\n        return this._compress;\n    }\n\n    get getCrop(): number[] {\n        return this._crop;\n    }\n\n    get getListener(): Listener {\n        return this._listener;\n    }\n\n    get getTokenFunc(): Function {\n        return this._tokenFunc;\n    }\n\n    get getTokenShare(): boolean {\n        return this._tokenShare;\n    }\n\n    get getChunk(): boolean {\n        return this._chunk;\n    }\n\n    get getIsDebug(): boolean {\n        return this._isDebug;\n    }\n\n    get getInterceptors(): Interceptor[] {\n        return this._interceptors;\n    }\n\n    public build(): Uploader {\n        return new Uploader(this);\n    }\n}\n\nexport default UploaderBuilder;"],"names":["debug"],"mappings":"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"}