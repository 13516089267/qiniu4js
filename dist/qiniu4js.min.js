!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.Qiniu=n():t.Qiniu=n()}(this,function(){return function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var e={};return n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=118)}([function(t,n,e){var r=e(2),i=e(24),o=e(12),u=e(13),c=e(25),a=function(t,n,e){var s,f,l,h,p=t&a.F,v=t&a.G,y=t&a.S,d=t&a.P,g=t&a.B,_=v?r:y?r[n]||(r[n]={}):(r[n]||{}).prototype,b=v?i:i[n]||(i[n]={}),k=b.prototype||(b.prototype={});v&&(e=n);for(s in e)f=!p&&_&&void 0!==_[s],l=(f?_:e)[s],h=g&&f?c(l,r):d&&"function"==typeof l?c(Function.call,l):l,_&&u(_,s,l,t&a.U),b[s]!=l&&o(b,s,h),d&&k[s]!=l&&(k[s]=l)};r.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(57)("wks"),i=e(39),o=e(2).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(97),o=e(23),u=Object.defineProperty;n.f=e(6)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(30),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(19);t.exports=function(t){return Object(r(t))}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(7),i=e(29);t.exports=e(6)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2),i=e(12),o=e(10),u=e(39)("src"),c=Function.toString,a=(""+c).split("toString");e(24).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,u)||i(e,u,t[n]?""+t[n]:a.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,e){var r=e(0),i=e(3),o=e(19),u=/"/g,c=function(t,n,e,r){var i=String(o(t)),c="<"+n;return""!==e&&(c+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(c),r(r.P+r.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n,e){var r=e(46),i=e(19);t.exports=function(t){return r(i(t))}},function(t,n,e){var r=e(47),i=e(29),o=e(15),u=e(23),c=e(10),a=e(97),s=Object.getOwnPropertyDescriptor;n.f=e(6)?s:function(t,n){if(t=o(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(10),i=e(9),o=e(75)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(25),i=e(46),o=e(9),u=e(8),c=e(130);t.exports=function(t,n){var e=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var y,d,g=o(n),_=i(g),b=r(c,v,3),k=u(_.length),m=0,w=e?p(n,k):a?p(n,0):void 0;k>m;m++)if((h||m in _)&&(y=_[m],d=b(y,m,g),t))if(e)w[m]=d;else if(d)switch(t){case 3:return!0;case 5:return y;case 6:return m;case 2:w.push(y)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n,e){var r=e(0),i=e(24),o=e(3);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){var e=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(11);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n,e){var r=e(113),i=e(0),o=e(57)("metadata"),u=o.store||(o.store=new(e(116))),c=function(t,n,e){var i=u.get(t);if(!i){if(!e)return;u.set(t,i=new r)}var o=i.get(n);if(!o){if(!e)return;i.set(n,o=new r)}return o},a=function(t,n,e){var r=c(n,e,!1);return void 0!==r&&r.has(t)},s=function(t,n,e){var r=c(n,e,!1);return void 0===r?void 0:r.get(t)},f=function(t,n,e,r){c(e,r,!0).set(t,n)},l=function(t,n){var e=c(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},h=function(t){return void 0===t||"symbol"==typeof t?t:String(t)},p=function(t){i(i.S,"Reflect",t)};t.exports={store:u,map:c,has:a,get:s,set:f,keys:l,key:h,exp:p}},function(t,n,e){"use strict";if(e(6)){var r=e(32),i=e(2),o=e(3),u=e(0),c=e(58),a=e(82),s=e(25),f=e(31),l=e(29),h=e(12),p=e(36),v=e(30),y=e(8),d=e(38),g=e(23),_=e(10),b=e(110),k=e(45),m=e(4),w=e(9),x=e(67),S=e(33),E=e(17),O=e(34).f,F=e(84),P=e(39),M=e(5),I=e(21),T=e(48),j=e(76),A=e(85),N=e(42),R=e(54),D=e(37),L=e(60),C=e(90),U=e(7),B=e(16),z=U.f,W=B.f,G=i.RangeError,K=i.TypeError,V=i.Uint8Array,q=Array.prototype,Q=a.ArrayBuffer,H=a.DataView,X=I(0),J=I(2),Y=I(3),Z=I(4),$=I(5),tt=I(6),nt=T(!0),et=T(!1),rt=A.values,it=A.keys,ot=A.entries,ut=q.lastIndexOf,ct=q.reduce,at=q.reduceRight,st=q.join,ft=q.sort,lt=q.slice,ht=q.toString,pt=q.toLocaleString,vt=M("iterator"),yt=M("toStringTag"),dt=P("typed_constructor"),gt=P("def_constructor"),_t=c.CONSTR,bt=c.TYPED,kt=c.VIEW,mt=I(1,function(t,n){return Ft(j(t,t[gt]),n)}),wt=o(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),xt=!!V&&!!V.prototype.set&&o(function(){new V(1).set({})}),St=function(t,n){if(void 0===t)throw K("Wrong length!");var e=+t,r=y(t);if(n&&!b(e,r))throw G("Wrong length!");return r},Et=function(t,n){var e=v(t);if(e<0||e%n)throw G("Wrong offset!");return e},Ot=function(t){if(m(t)&&bt in t)return t;throw K(t+" is not a typed array!")},Ft=function(t,n){if(!(m(t)&&dt in t))throw K("It is not a typed array constructor!");return new t(n)},Pt=function(t,n){return Mt(j(t,t[gt]),n)},Mt=function(t,n){for(var e=0,r=n.length,i=Ft(t,r);r>e;)i[e]=n[e++];return i},It=function(t,n,e){z(t,n,{get:function(){return this._d[e]}})},Tt=function(t){var n,e,r,i,o,u,c=w(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=F(c);if(void 0!=h&&!x(h)){for(u=h.call(c),r=[],n=0;!(o=u.next()).done;n++)r.push(o.value);c=r}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,e=y(c.length),i=Ft(this,e);e>n;n++)i[n]=l?f(c[n],n):c[n];return i},jt=function(){for(var t=0,n=arguments.length,e=Ft(this,n);n>t;)e[t]=arguments[t++];return e},At=!!V&&o(function(){pt.call(new V(1))}),Nt=function(){return pt.apply(At?lt.call(Ot(this)):Ot(this),arguments)},Rt={copyWithin:function(t,n){return C.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Ot(this),arguments)},filter:function(t){return Pt(this,J(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return mt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=this,e=Ot(n).length,r=Math.floor(e/2),i=0;i<r;)t=n[i],n[i++]=n[--e],n[e]=t;return n},some:function(t){return Y(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,i=d(t,r);return new(j(e,e[gt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,y((void 0===n?r:d(n,r))-i))}},Dt=function(t,n){return Pt(this,lt.call(Ot(this),t,n))},Lt=function(t){Ot(this);var n=Et(arguments[1],1),e=this.length,r=w(t),i=y(r.length),o=0;if(i+n>e)throw G("Wrong length!");for(;o<i;)this[n+o]=r[o++]},Ct={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Ut=function(t,n){return m(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Bt=function(t,n){return Ut(t,n=g(n,!0))?l(2,t[n]):W(t,n)},zt=function(t,n,e){return!(Ut(t,n=g(n,!0))&&m(e)&&_(e,"value"))||_(e,"get")||_(e,"set")||e.configurable||_(e,"writable")&&!e.writable||_(e,"enumerable")&&!e.enumerable?z(t,n,e):(t[n]=e.value,t)};_t||(B.f=Bt,U.f=zt),u(u.S+u.F*!_t,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:zt}),o(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Wt=p({},Rt);p(Wt,Ct),h(Wt,vt,Ct.values),p(Wt,{slice:Dt,set:Lt,constructor:function(){},toString:ht,toLocaleString:Nt}),It(Wt,"buffer","b"),It(Wt,"byteOffset","o"),It(Wt,"byteLength","l"),It(Wt,"length","e"),z(Wt,yt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,a){a=!!a;var s=t+(a?"Clamped":"")+"Array",l="Uint8Array"!=s,p="get"+t,v="set"+t,d=i[s],g=d||{},_=d&&E(d),b=!d||!c.ABV,w={},x=d&&d.prototype,F=function(t,e){var r=t._d;return r.v[p](e*n+r.o,wt)},P=function(t,e,r){var i=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[v](e*n+i.o,r,wt)},M=function(t,n){z(t,n,{get:function(){return F(this,n)},set:function(t){return P(this,n,t)},enumerable:!0})};b?(d=e(function(t,e,r,i){f(t,d,s,"_d");var o,u,c,a,l=0,p=0;if(m(e)){if(!(e instanceof Q||"ArrayBuffer"==(a=k(e))||"SharedArrayBuffer"==a))return bt in e?Mt(d,e):Tt.call(d,e);o=e,p=Et(r,n);var v=e.byteLength;if(void 0===i){if(v%n)throw G("Wrong length!");if((u=v-p)<0)throw G("Wrong length!")}else if((u=y(i)*n)+p>v)throw G("Wrong length!");c=u/n}else c=St(e,!0),u=c*n,o=new Q(u);for(h(t,"_d",{b:o,o:p,l:u,e:c,v:new H(o)});l<c;)M(t,l++)}),x=d.prototype=S(Wt),h(x,"constructor",d)):R(function(t){new d(null),new d(t)},!0)||(d=e(function(t,e,r,i){f(t,d,s);var o;return m(e)?e instanceof Q||"ArrayBuffer"==(o=k(e))||"SharedArrayBuffer"==o?void 0!==i?new g(e,Et(r,n),i):void 0!==r?new g(e,Et(r,n)):new g(e):bt in e?Mt(d,e):Tt.call(d,e):new g(St(e,l))}),X(_!==Function.prototype?O(g).concat(O(_)):O(g),function(t){t in d||h(d,t,g[t])}),d.prototype=x,r||(x.constructor=d));var I=x[vt],T=!!I&&("values"==I.name||void 0==I.name),j=Ct.values;h(d,dt,!0),h(x,bt,s),h(x,kt,!0),h(x,gt,d),(a?new d(1)[yt]==s:yt in x)||z(x,yt,{get:function(){return s}}),w[s]=d,u(u.G+u.W+u.F*(d!=g),w),u(u.S,s,{BYTES_PER_ELEMENT:n,from:Tt,of:jt}),"BYTES_PER_ELEMENT"in x||h(x,"BYTES_PER_ELEMENT",n),u(u.P,s,Rt),D(s),u(u.P+u.F*xt,s,{set:Lt}),u(u.P+u.F*!T,s,Ct),u(u.P+u.F*(x.toString!=ht),s,{toString:ht}),u(u.P+u.F*o(function(){new d(1).slice()}),s,{slice:Dt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){x.toLocaleString.call([1,2])})),s,{toLocaleString:Nt}),N[s]=T?I:j,r||T||h(x,vt,j)}}else t.exports=function(){}},function(t,n,e){var r=e(39)("meta"),i=e(4),o=e(10),u=e(7).f,c=0,a=Object.isExtensible||function(){return!0},s=!e(3)(function(){return a(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[r].i},h=function(t,n){if(!o(t,r)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[r].w},p=function(t){return s&&v.NEED&&a(t)&&!o(t,r)&&f(t),t},v=t.exports={KEY:r,NEED:!1,fastKey:l,getWeak:h,onFreeze:p}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n){t.exports=!1},function(t,n,e){var r=e(1),i=e(103),o=e(63),u=e(75)("IE_PROTO"),c=function(){},a=function(){var t,n=e(62)("iframe"),r=o.length;for(n.style.display="none",e(65).appendChild(n),n.src="javascript:",t=n.contentWindow.document,t.open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[o[r]];return a()};t.exports=Object.create||function(t,n){var e;return null!==t?(c.prototype=r(t),e=new c,c.prototype=null,e[u]=t):e=a(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(105),i=e(63).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(105),i=e(63);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(13);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){"use strict";var r=e(2),i=e(7),o=e(6),u=e(5)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n,e){var r=e(30),i=Math.max,o=Math.min;t.exports=function(t,n){return t=r(t),t<0?i(t+n,0):o(t,n)}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(5)("unscopables"),i=Array.prototype;void 0==i[r]&&e(12)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){var r=e(25),i=e(99),o=e(67),u=e(1),c=e(8),a=e(84),s={},f={},n=t.exports=function(t,n,e,l,h){var p,v,y,d,g=h?function(){return t}:a(t),_=r(e,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=c(t.length);p>b;b++)if((d=n?_(u(v=t[b])[0],v[1]):_(t[b]))===s||d===f)return d}else for(y=g.call(t);!(v=y.next()).done;)if((d=i(y,_,v.value,n))===s||d===f)return d};n.BREAK=s,n.RETURN=f},function(t,n){t.exports={}},function(t,n,e){var r=e(7).f,i=e(10),o=e(5)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),i=e(19),o=e(3),u=e(80),c="["+u+"]",a="​",s=RegExp("^"+c+c+"*"),f=RegExp(c+c+"*$"),l=function(t,n,e){var i={},c=o(function(){return!!u[t]()||a[t]()!=a}),s=i[t]=c?n(h):u[t];e&&(i[e]=s),r(r.P+r.F*c,"String",i)},h=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(s,"")),2&n&&(t=t.replace(f,"")),t};t.exports=l},function(t,n,e){var r=e(18),i=e(5)("toStringTag"),o="Arguments"==r(function(){return arguments}()),u=function(t,n){try{return t[n]}catch(t){}};t.exports=function(t){var n,e,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=u(n=Object(t),i))?e:o?r(n):"Object"==(c=r(n))&&"function"==typeof n.callee?"Arguments":c}},function(t,n,e){var r=e(18);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(15),i=e(8),o=e(38);t.exports=function(t){return function(n,e,u){var c,a=r(n),s=i(a.length),f=o(u,s);if(t&&e!=e){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===e)return t||f||0;return!t&&-1}}},function(t,n,e){"use strict";var r=e(2),i=e(0),o=e(13),u=e(36),c=e(28),a=e(41),s=e(31),f=e(4),l=e(3),h=e(54),p=e(43),v=e(66);t.exports=function(t,n,e,y,d,g){var _=r[t],b=_,k=d?"set":"add",m=b&&b.prototype,w={},x=function(t){var n=m[t];o(m,t,"delete"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(g||m.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,E=S[k](g?{}:-0,1)!=S,O=l(function(){S.has(1)}),F=h(function(t){new b(t)}),P=!g&&l(function(){for(var t=new b,n=5;n--;)t[k](n,n);return!t.has(-0)});F||(b=n(function(n,e){s(n,b,t);var r=v(new _,n,b);return void 0!=e&&a(e,d,r[k],r),r}),b.prototype=m,m.constructor=b),(O||P)&&(x("delete"),x("has"),d&&x("get")),(P||E)&&x(k),g&&m.clear&&delete m.clear}else b=y.getConstructor(n,t,d,k),u(b.prototype,e),c.NEED=!0;return p(b,t),w[t]=b,i(i.G+i.W+i.F*(b!=_),w),g||y.setStrong(b,t,d),b}},function(t,n,e){"use strict";var r=e(12),i=e(13),o=e(3),u=e(19),c=e(5);t.exports=function(t,n,e){var a=c(t),s=e(u,a,""[t]),f=s[0],l=s[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,f),r(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4),i=e(18),o=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){t.exports=e(32)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(2),i=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,n,e){for(var r,i=e(2),o=e(12),u=e(39),c=u("typed_array"),a=u("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[h[l++]])?(o(r.prototype,c,!0),o(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,null,[{key:"d",value:function(n){t._enable&&console.debug(n)}},{key:"l",value:function(n){t._enable&&console.log(n)}},{key:"e",value:function(n){t._enable&&console.error(n)}},{key:"w",value:function(n){t._enable&&console.warn(n)}},{key:"i",value:function(n){t._enable&&console.info(n)}},{key:"enable",get:function(){return this._enable},set:function(t){this._enable=t}}]),t}();o._enable=!1,n.default=o},function(t,n,e){"use strict";var r=e(9),i=e(38),o=e(8);t.exports=function(t){for(var n=r(this),e=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,e),a=u>2?arguments[2]:void 0,s=void 0===a?e:i(a,e);s>c;)n[c++]=t;return n}},function(t,n,e){"use strict";var r=e(7),i=e(29);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(4),i=e(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){t.exports=e(2).document&&document.documentElement},function(t,n,e){var r=e(4),i=e(74).set;t.exports=function(t,n,e){var o,u=n.constructor;return u!==e&&"function"==typeof u&&(o=u.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(42),i=e(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(18);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){"use strict";var r=e(33),i=e(29),o=e(43),u={};e(12)(u,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){"use strict";var r=e(32),i=e(0),o=e(13),u=e(12),c=e(10),a=e(42),s=e(69),f=e(43),l=e(17),h=e(5)("iterator"),p=!([].keys&&"next"in[].keys()),v=function(){return this};t.exports=function(t,n,e,y,d,g,_){s(e,n,y);var b,k,m,w=function(t){if(!p&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},x=n+" Iterator",S="values"==d,E=!1,O=t.prototype,F=O[h]||O["@@iterator"]||d&&O[d],P=F||w(d),M=d?S?w("entries"):P:void 0,I="Array"==n?O.entries||F:F;if(I&&(m=l(I.call(new t)))!==Object.prototype&&(f(m,x,!0),r||c(m,h)||u(m,h,v)),S&&F&&"values"!==F.name&&(E=!0,P=function(){return F.call(this)}),r&&!_||!p&&!E&&O[h]||u(O,h,P),a[n]=P,a[x]=v,d)if(b={values:S?P:w("values"),keys:g?P:w("keys"),entries:M},_)for(k in b)k in O||o(O,k,b[k]);else i(i.P+i.F*(p||E),n,b);return b}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n,e){var r=e(2),i=e(81).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,a="process"==e(18)(u);t.exports=function(){var t,n,e,s=function(){var r,i;for(a&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(a)e=function(){u.nextTick(s)};else if(o){var f=!0,l=document.createTextNode("");new o(s).observe(l,{characterData:!0}),e=function(){l.data=f=!f}}else if(c&&c.resolve){var h=c.resolve();e=function(){h.then(s)}}else e=function(){i.call(r,s)};return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n,e){var r=e(4),i=e(1),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{r=e(25)(Function.call,e(16).f(Object.prototype,"__proto__").set,2),r(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){var r=e(57)("keys"),i=e(39);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n,e){var r=e(1),i=e(11),o=e(5)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||void 0==(e=r(u)[o])?n:i(e)}},function(t,n,e){var r=e(30),i=e(19);t.exports=function(t){return function(n,e){var o,u,c=String(i(n)),a=r(e),s=c.length;return a<0||a>=s?t?"":void 0:(o=c.charCodeAt(a),o<55296||o>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536)}}},function(t,n,e){var r=e(53),i=e(19);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){"use strict";var r=e(30),i=e(19);t.exports=function(t){var n=String(i(this)),e="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(e+=n);return e}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r,i,o,u=e(25),c=e(52),a=e(65),s=e(62),f=e(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,y=0,d={},g=function(){var t=+this;if(d.hasOwnProperty(t)){var n=d[t];delete d[t],n()}},_=function(t){g.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return d[++y]=function(){c("function"==typeof t?t:Function(t),n)},r(y),y},p=function(t){delete d[t]},"process"==e(18)(l)?r=function(t){l.nextTick(u(g,t,1))}:v?(i=new v,o=i.port2,i.port1.onmessage=_,r=u(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",_,!1)):r="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),g.call(t)}}:function(t){setTimeout(u(g,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(2),i=e(6),o=e(32),u=e(58),c=e(12),a=e(36),s=e(3),f=e(31),l=e(30),h=e(8),p=e(34).f,v=e(7).f,y=e(60),d=e(43),g=r.ArrayBuffer,_=r.DataView,b=r.Math,k=r.RangeError,m=r.Infinity,w=g,x=b.abs,S=b.pow,E=b.floor,O=b.log,F=b.LN2,P=i?"_b":"buffer",M=i?"_l":"byteLength",I=i?"_o":"byteOffset",T=function(t,n,e){var r,i,o,u=Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?S(2,-24)-S(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for(t=x(t),t!=t||t===m?(i=t!=t?1:0,r=a):(r=E(O(t)/F),t*(o=S(2,-r))<1&&(r--,o*=2),t+=r+s>=1?f/o:f*S(2,1-s),t*o>=2&&(r++,o/=2),r+s>=a?(i=0,r=a):r+s>=1?(i=(t*o-1)*S(2,n),r+=s):(i=t*S(2,s-1)*S(2,n),r=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u},j=function(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===o)return r?NaN:s?-m:m;r+=S(2,n),f-=u}return(s?-1:1)*r*S(2,f-n)},A=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},N=function(t){return[255&t]},R=function(t){return[255&t,t>>8&255]},D=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},L=function(t){return T(t,52,8)},C=function(t){return T(t,23,4)},U=function(t,n,e){v(t.prototype,n,{get:function(){return this[e]}})},B=function(t,n,e,r){var i=+e,o=l(i);if(i!=o||o<0||o+n>t[M])throw k("Wrong index!");var u=t[P]._b,c=o+t[I],a=u.slice(c,c+n);return r?a:a.reverse()},z=function(t,n,e,r,i,o){var u=+e,c=l(u);if(u!=c||c<0||c+n>t[M])throw k("Wrong index!");for(var a=t[P]._b,s=c+t[I],f=r(+i),h=0;h<n;h++)a[s+h]=f[o?h:n-h-1]},W=function(t,n){f(t,g,"ArrayBuffer");var e=+n,r=h(e);if(e!=r)throw k("Wrong length!");return r};if(u.ABV){if(!s(function(){new g})||!s(function(){new g(.5)})){g=function(t){return new w(W(this,t))};for(var G,K=g.prototype=w.prototype,V=p(w),q=0;V.length>q;)(G=V[q++])in g||c(g,G,w[G]);o||(K.constructor=g)}var Q=new _(new g(2)),H=_.prototype.setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||a(_.prototype,{setInt8:function(t,n){H.call(this,t,n<<24>>24)},setUint8:function(t,n){H.call(this,t,n<<24>>24)}},!0)}else g=function(t){var n=W(this,t);this._b=y.call(Array(n),0),this[M]=n},_=function(t,n,e){f(this,_,"DataView"),f(t,g,"DataView");var r=t[M],i=l(n);if(i<0||i>r)throw k("Wrong offset!");if(e=void 0===e?r-i:h(e),i+e>r)throw k("Wrong length!");this[P]=t,this[I]=i,this[M]=e},i&&(U(g,"byteLength","_l"),U(_,"buffer","_b"),U(_,"byteLength","_l"),U(_,"byteOffset","_o")),a(_.prototype,{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var n=B(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=B(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return A(B(this,4,t,arguments[1]))},getUint32:function(t){return A(B(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return j(B(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return j(B(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){z(this,1,t,N,n)},setUint8:function(t,n){z(this,1,t,N,n)},setInt16:function(t,n){z(this,2,t,R,n,arguments[2])},setUint16:function(t,n){z(this,2,t,R,n,arguments[2])},setInt32:function(t,n){z(this,4,t,D,n,arguments[2])},setUint32:function(t,n){z(this,4,t,D,n,arguments[2])},setFloat32:function(t,n){z(this,4,t,C,n,arguments[2])},setFloat64:function(t,n){z(this,8,t,L,n,arguments[2])}});d(g,"ArrayBuffer"),d(_,"DataView"),c(_.prototype,u.VIEW,!0),n.ArrayBuffer=g,n.DataView=_},function(t,n,e){var r=e(2),i=e(24),o=e(32),u=e(112),c=e(7).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(45),i=e(5)("iterator"),o=e(42);t.exports=e(24).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){"use strict";var r=e(40),i=e(100),o=e(42),u=e(15);t.exports=e(70)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):"keys"==n?i(0,e):"values"==n?i(0,t[e]):i(0,[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=e(124),c=r(u),a=e(123),s=e(125),f=r(s),l=e(87),h=r(l),p=e(59),v=r(p),y=e(119),d=r(y),g=e(122),_=r(g),b=e(121),k=r(b);e(126),e(127);var m=function(){function t(n){var e=this;i(this,t),this.FILE_INPUT_EL_ID="qiniu4js-input",this._taskQueue=[],this._tasking=!1,this._scale=[],this._saveKey=!1,this.handleFiles=function(){if(0!=e.fileInput.files.length){e.generateTask();var t=!1,n=[],r=!0,i=!1,o=void 0;try{for(var u,c=e.taskQueue[Symbol.iterator]();!(r=(u=c.next()).done);r=!0){var a=u.value,s=!0,f=!1,l=void 0;try{for(var h,p=e.interceptors[Symbol.iterator]();!(s=(h=p.next()).done);s=!0){var y=h.value;if(y.onIntercept(a)&&(n.push(a),v.default.d("任务拦截器拦截了任务:"),v.default.d(a)),y.onInterrupt(a)){t=!0;break}}}catch(t){f=!0,l=t}finally{try{!s&&p.return&&p.return()}finally{if(f)throw l}}}}catch(t){i=!0,o=t}finally{try{!r&&c.return&&c.return()}finally{if(i)throw o}}if(t)return void v.default.w("任务拦截器中断了任务队列");var d=!0,g=!1,_=void 0;try{for(var b,k=n[Symbol.iterator]();!(d=(b=k.next()).done);d=!0){var m=b.value,w=e.taskQueue.indexOf(m);-1!=w&&e.taskQueue.splice(w,1)}}catch(t){g=!0,_=t}finally{try{!d&&k.return&&k.return()}finally{if(g)throw _}}e.listener.onReady(e.taskQueue),e.handleImages().then(function(){e.auto&&(v.default.d("开始自动上传"),e.start())})}},this.resolveUUID=function(t){var n=/\$\(uuid\)/;return n.test(t)?t.replace(n,f.default.uuid()):t},this.resolveImageInfo=function(t,n){var e=/\$\(imageInfo\.width\)/,r=/\$\(imageInfo\.height\)/;return e.test(n)||r.test(n)?new Promise(function(i){var o=new Image;o.src=URL.createObjectURL(t),o.onload=function(){n=n.replace(e,o.width.toString()),n=n.replace(r,o.height.toString()),i(n)}}):Promise.resolve(n)},this.onSaveKeyResolved=function(t){return e._tokenShare=e._tokenShare&&e._saveKey==t,t},this._retry=n.getRetry,this._size=n.getSize,this._chunk=n.getChunk,this._auto=n.getAuto,this._multiple=n.getMultiple,this._accept=n.getAccept,this._button=n.getButton,this._buttonEventName=n.getButtonEventName,this._compress=n.getCompress,this._scale=n.getScale,this._saveKey=n.getSaveKey,this._tokenFunc=n.getTokenFunc,this._tokenShare=n.getTokenShare,this._listener=Object.assign(new d.default,n.getListener),this._interceptors=n.getInterceptors,this._domain=n.getDomain,this._fileInputId=this.FILE_INPUT_EL_ID+"_"+(new Date).getTime(),v.default.enable=n.getIsDebug,this.validateOptions(),this.init()}return o(t,[{key:"init",value:function(){this.initFileInputEl()}},{key:"initFileInputEl",value:function(){var t=document.getElementById(this._fileInputId);if(this._fileInput=t||document.createElement("input"),this.fileInput.type="file",this.fileInput.id=this._fileInputId,this.fileInput.style.display="none",this.multiple&&(this.fileInput.multiple=!0),this.accept&&0!=this.accept.length){var n="",e=!0,r=!1,i=void 0;try{for(var o,u=this.accept[Symbol.iterator]();!(e=(o=u.next()).done);e=!0){n+=o.value,n+=","}}catch(t){r=!0,i=t}finally{try{!e&&u.return&&u.return()}finally{if(r)throw i}}n.endsWith(",")&&(n=n.substring(0,n.length-1)),this.fileInput.accept=n,v.default.d("accept类型 "+n)}if(document.body.appendChild(this.fileInput),this.fileInput.addEventListener("change",this.handleFiles,!1),void 0!=this._button){document.getElementById(this._button).addEventListener(this._buttonEventName,this.chooseFile.bind(this))}}},{key:"resetUploader",value:function(){v.default.d("开始重置 uploader"),this.taskQueue.length=0,v.default.d("任务队列已清空"),this._token=null,v.default.d("token已清空"),v.default.d("uploader 重置完毕")}},{key:"generateTask",value:function(){this.resetUploader();for(var t=this.fileInput.files,n=0;n<this.fileInput.files.length;n++){var e=t[n],r=void 0;r=this.chunk&&e.size>h.default.BLOCK_SIZE?new a.ChunkTask(e,h.default.BLOCK_SIZE,this.size):new c.default(e),0==this._saveKey&&(r.key=this.listener.onTaskGetKey(r)),this.taskQueue.push(r)}}},{key:"handleImages",value:function(){var n=this,e=[];if(1!=this.compress||0!=this.scale[0]||0!=this.scale[1]){var r=!0,i=!1,o=void 0;try{for(var u,c=this.taskQueue[Symbol.iterator]();!(r=(u=c.next()).done);r=!0){(function(){var r=u.value;if(!r.file.type.match("image.*"))return"continue";v.default.d(r.file.name+" 处理前的图片大小:"+r.file.size/1024+" kb");var i=document.createElement("canvas"),o=new Image,c=i.getContext("2d");o.src=URL.createObjectURL(r.file);var a=n;e.push(new Promise(function(t){return o.onload=function(){var n=o.width,e=o.height,u=a.scale[0],s=a.scale[1];0==u&&s>0?(i.width=n/e*s,i.height=s):0==s&&u>0?(i.width=u,i.height=e/n*u):u>0&&s>0?(i.width=u,i.height=s):(i.width=o.width,i.height=o.height),c.drawImage(o,0,0,i.width,i.height),console.log(i),console.log(i.toBlob),i.toBlob(function(n){t(n),v.default.d(r.file.name+" 处理后的图片大小:"+n.size/1024+" kb")},"image/jpeg",.95*a.compress)}}).then(function(n){n.name=r.file.name,r.file=n,t.isChunkTask(r)&&r.spliceFile2Block()}))})()}}catch(t){i=!0,o=t}finally{try{!r&&c.return&&c.return()}finally{if(i)throw o}}}return Promise.all(e)}},{key:"validateOptions",value:function(){if(v.default.d("开始检查构建参数合法性"),!this._tokenFunc)throw new Error("你必须提供一个获取Token的回调函数");if(!this.scale||!(this.scale instanceof Array)||2!=this.scale.length||this.scale[0]<0||this.scale[1]<0)throw new Error("scale必须是长度为2的number类型的数组,scale[0]为宽度，scale[1]为长度,必须大于等于0");v.default.d("构建参数检查完毕")}},{key:"start",value:function(){if(v.default.d("上传任务遍历开始"),0==this.fileInput.files.length)throw new Error("没有选中的文件，无法开始上传");if(this.tasking)throw new Error("任务执行中，请不要重复上传");this.listener.onStart(this.taskQueue);var n=!0,e=!1,r=void 0;try{for(var i,o=this.taskQueue[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var u=i.value;if(v.default.d("上传文件名："+u.file.name),v.default.d("上传文件大小："+u.file.size+"字节，"+u.file.size/1024+" kb，"+u.file.size/1024/1024+" mb"),t.isDirectTask(u))v.default.d("该上传任务为直传任务"),new _.default(this).upload(u);else{if(!t.isChunkTask(u))throw new Error("非法的task类型");v.default.d("该上传任务为分片任务"),new k.default(this).upload(u)}}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}}},{key:"isTaskQueueFinish",value:function(){var t=!0,n=!1,e=void 0;try{for(var r,i=this.taskQueue[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){if(!r.value.isFinish)return!1}}catch(t){n=!0,e=t}finally{try{!t&&i.return&&i.return()}finally{if(n)throw e}}return!0}},{key:"chooseFile",value:function(){this.fileInput.click()}},{key:"getToken",value:function(t){var n=this;return this._tokenShare&&void 0!=this._token?Promise.resolve(this._token):(v.default.d("开始获取上传token"),Promise.resolve(this._tokenFunc(this,t)).then(function(t){return v.default.d("上传token获取成功: "+t),n._token=t,t}))}},{key:"requestTaskToken",value:function(t,n){var e=this;return this.resolveSaveKey(t).then(function(t){return e.requestToken(n,t)})}},{key:"requestToken",value:function(t,n){return new Promise(function(e,r){"string"==typeof n&&(t+=(/\?/.test(t)?"&":"?")+"saveKey="+encodeURIComponent(n)),t+=(/\?/.test(t)?"&":"?")+(new Date).getTime();var i=new XMLHttpRequest;i.open("GET",t,!0),i.onreadystatechange=function(){if(i.readyState==XMLHttpRequest.DONE)return 200==i.status?void e(i.response.uptoken):void r(i.response)},i.onabort=function(){r("aborted")},i.responseType="json",i.send()})}},{key:"resolveSaveKey",value:function(t){var n=this,e=this._saveKey;return"string"!=typeof e?Promise.resolve(void 0):Promise.resolve(e).then(this.resolveUUID).then(function(e){return n.resolveImageInfo(t.file,e)}).then(this.onSaveKeyResolved)}},{key:"retry",get:function(){return this._retry}},{key:"size",get:function(){return this._size}},{key:"auto",get:function(){return this._auto}},{key:"multiple",get:function(){return this._multiple}},{key:"accept",get:function(){return this._accept}},{key:"compress",get:function(){return this._compress}},{key:"scale",get:function(){return this._scale}},{key:"listener",get:function(){return this._listener}},{key:"fileInput",get:function(){return this._fileInput}},{key:"chunk",get:function(){return this._chunk}},{key:"taskQueue",get:function(){return this._taskQueue}},{key:"tasking",get:function(){return this._tasking},set:function(t){this._tasking=t}},{key:"interceptors",get:function(){return this._interceptors}},{key:"domain",get:function(){return this._domain}}],[{key:"isChunkTask",value:function(t){return t.constructor.name===a.ChunkTask.name&&t instanceof a.ChunkTask}},{key:"isDirectTask",value:function(t){return t.constructor.name===c.default.name&&t instanceof c.default}}]),t}();n.default=m},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=e(86),c=r(u),a=e(120),s=r(a),f=function(){function t(){i(this,t),this._retry=0,this._domain=t.UPLOAD_DOMAIN,this._scheme=null,this._size=1048576,this._chunk=!0,this._auto=!0,this._multiple=!0,this._accept=[],this._compress=1,this._scale=[0,0],this._saveKey=!1,this._tokenShare=!0,this._interceptors=[],this._isDebug=!1}return o(t,[{key:"domain",value:function(t){return this._domain=t,this}},{key:"scheme",value:function(t){return this._scheme=t,this}},{key:"interceptor",value:function(t){return this._interceptors.push(Object.assign(new s.default,t)),this}},{key:"retry",value:function(t){return this._retry=t,this}},{key:"auto",value:function(t){return this._auto=t,this}},{key:"multiple",value:function(t){return this._multiple=t,this}},{key:"accept",value:function(t){return this._accept=t,this}},{key:"button",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"click";return this._button=t,this._buttonEventName=n,this}},{key:"compress",value:function(t){return this._compress=Math.max(Math.min(t,1),0),this}},{key:"scale",value:function(t){return this._scale=t,this}},{key:"saveKey",value:function(t){return this._saveKey=t,this}},{key:"tokenUrl",value:function(t){return this._tokenFunc=function(n,e){return n.requestTaskToken(e,t)},this}},{key:"tokenFunc",value:function(t){return this._tokenFunc=function(n,e){return new Promise(function(n){t(n,e)})},this}},{key:"listener",value:function(t){return this._listener=t,this}},{key:"tokenShare",value:function(t){return this._tokenShare=t,this}},{key:"chunk",value:function(t){return this._chunk=t,this}},{key:"debug",value:function(t){return this._isDebug=t,this}},{key:"build",value:function(){return new c.default(this)}},{key:"getRetry",get:function(){return this._retry}},{key:"getSize",get:function(){return this._size}},{key:"getAuto",get:function(){return this._auto}},{key:"getMultiple",get:function(){return this._multiple}},{key:"getAccept",get:function(){return this._accept}},{key:"getButton",get:function(){return this._button}},{key:"getButtonEventName",get:function(){return this._buttonEventName}},{key:"getCompress",get:function(){return this._compress}},{key:"getScale",get:function(){return this._scale}},{key:"getListener",get:function(){return this._listener}},{key:"getSaveKey",get:function(){return this._saveKey}},{key:"getTokenFunc",get:function(){return this._tokenFunc}},{key:"getTokenShare",get:function(){return this._tokenShare}},{key:"getChunk",get:function(){return this._chunk}},{key:"getIsDebug",get:function(){return this._isDebug}},{key:"getInterceptors",get:function(){return this._interceptors}},{key:"getDomain",get:function(){var n=this._domain;if(n||(n=t.UPLOAD_DOMAIN),"string"!=typeof n){var e=this._scheme;if("string"!=typeof e){var r=window.location.protocol;e=r.substring(0,r.length-1)}n=n[e]}return n.endsWith("/")?n.substring(0,n.length-1):n}}]),t}();f.MAX_CHUNK_SIZE=4194304,f.BLOCK_SIZE=f.MAX_CHUNK_SIZE,f.UPLOAD_DOMAIN={http:"http://upload.qiniu.com",https:"https://up.qbox.me"},n.default=f},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(n){r(this,t),this._retry=0,this._progress=0,this._isSuccess=!1,this._isFinish=!1,this._file=n,this._createDate=new Date}return i(t,[{key:"file",get:function(){return this._file},set:function(t){this._file=t}},{key:"retry",get:function(){return this._retry},set:function(t){this._retry=t}},{key:"createDate",get:function(){return this._createDate},set:function(t){this._createDate=t}},{key:"startDate",get:function(){return this._startDate},set:function(t){this._startDate=t}},{key:"endDate",get:function(){return this._endDate},set:function(t){this._endDate=t}},{key:"isSuccess",get:function(){return this._isSuccess},set:function(t){this._isSuccess=t}},{key:"progress",get:function(){return this._progress},set:function(t){this._progress=Math.min(Math.max(0,t),100)}},{key:"result",get:function(){return this._result},set:function(t){this._result=t}},{key:"error",get:function(){return this._error},set:function(t){this._error=t}},{key:"key",get:function(){return this._key},set:function(t){this._key=t}},{key:"isFinish",get:function(){return this._isFinish},set:function(t){this._isFinish=t}}]),t}();n.default=o},function(t,n,e){var r=e(18);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){"use strict";var r=e(9),i=e(38),o=e(8);t.exports=[].copyWithin||function(t,n){var e=r(this),u=o(e.length),c=i(t,u),a=i(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:i(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in e?e[c]=e[a]:delete e[c],c+=l,a+=l;return e}},function(t,n,e){var r=e(41);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n,e){var r=e(11),i=e(9),o=e(46),u=e(8);t.exports=function(t,n,e,c,a){r(n);var s=i(t),f=o(s),l=u(s.length),h=a?l-1:0,p=a?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,e){"use strict";var r=e(11),i=e(4),o=e(52),u=[].slice,c={},a=function(t,n,e){if(!(n in c)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";c[n]=Function("F,a","return new F("+r.join(",")+")")}return c[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),c=function(){var r=e.concat(u.call(arguments));return this instanceof c?a(n,r.length,r):o(n,r,t)};return i(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n,e){"use strict";var r=e(7).f,i=e(33),o=e(36),u=e(25),c=e(31),a=e(19),s=e(41),f=e(70),l=e(100),h=e(37),p=e(6),v=e(28).fastKey,y=p?"_s":"size",d=function(t,n){var e,r=v(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,f){var l=t(function(t,r){c(t,l,n,"_i"),t._i=i(null),t._f=void 0,t._l=void 0,t[y]=0,void 0!=r&&s(r,e,t[f],t)});return o(l.prototype,{clear:function(){for(var t=this,n=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete n[e.i];t._f=t._l=void 0,t[y]=0},delete:function(t){var n=this,e=d(n,t);if(e){var r=e.n,i=e.p;delete n._i[e.i],e.r=!0,i&&(i.n=r),r&&(r.p=i),n._f==e&&(n._f=r),n._l==e&&(n._l=i),n[y]--}return!!e},forEach:function(t){c(this,l,"forEach");for(var n,e=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(e(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!d(this,t)}}),p&&r(l.prototype,"size",{get:function(){return a(this[y])}}),l},def:function(t,n,e){var r,i,o=d(t,n);return o?o.v=e:(t._l=o={i:i=v(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[y]++,"F"!==i&&(t._i[i]=o)),t},getEntry:d,setStrong:function(t,n,e){f(t,n,function(t,n){this._t=t,this._k=n,this._l=void 0},function(){for(var t=this,n=t._k,e=t._l;e&&e.r;)e=e.p;return t._t&&(t._l=e=e?e.n:t._t._f)?"keys"==n?l(0,e.k):"values"==n?l(0,e.v):l(0,[e.k,e.v]):(t._t=void 0,l(1))},e?"entries":"values",!e,!0),h(n)}}},function(t,n,e){var r=e(45),i=e(91);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,e){"use strict";var r=e(36),i=e(28).getWeak,o=e(1),u=e(4),c=e(31),a=e(41),s=e(21),f=e(10),l=s(5),h=s(6),p=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},d=function(t,n){return l(t.a,function(t){return t[0]===n})};y.prototype={get:function(t){var n=d(this,t);if(n)return n[1]},has:function(t){return!!d(this,t)},set:function(t,n){var e=d(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=h(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,o){var s=t(function(t,r){c(t,s,n,"_i"),t._i=p++,t._l=void 0,void 0!=r&&a(r,e,t[o],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var n=i(t);return!0===n?v(this).delete(t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!u(t))return!1;var n=i(t);return!0===n?v(this).has(t):n&&f(n,this._i)}}),s},def:function(t,n,e){var r=i(o(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){t.exports=!e(6)&&!e(3)(function(){return 7!=Object.defineProperty(e(62)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n,e){var r=e(1);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(35),i=e(56),o=e(47),u=e(9),c=e(46),a=Object.assign;t.exports=!a||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=a({},t)[e]||Object.keys(a({},n)).join("")!=r})?function(t,n){for(var e=u(t),a=arguments.length,s=1,f=i.f,l=o.f;a>s;)for(var h,p=c(arguments[s++]),v=f?r(p).concat(f(p)):r(p),y=v.length,d=0;y>d;)l.call(p,h=v[d++])&&(e[h]=p[h]);return e}:a},function(t,n,e){var r=e(7),i=e(1),o=e(35);t.exports=e(6)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(15),i=e(34).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return i(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?c(t):i(r(t))}},function(t,n,e){var r=e(10),i=e(15),o=e(48)(!1),u=e(75)("IE_PROTO");t.exports=function(t,n){var e,c=i(t),a=0,s=[];for(e in c)e!=u&&r(c,e)&&s.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(35),i=e(15),o=e(47).f;t.exports=function(t){return function(n){for(var e,u=i(n),c=r(u),a=c.length,s=0,f=[];a>s;)o.call(u,e=c[s++])&&f.push(t?[e,u[e]]:u[e]);return f}}},function(t,n,e){var r=e(34),i=e(56),o=e(1),u=e(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(2).parseFloat,i=e(44).trim;t.exports=1/r(e(80)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(2).parseInt,i=e(44).trim,o=e(80),u=/^[\-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){var r=e(8),i=e(79),o=e(19);t.exports=function(t,n,e,u){var c=String(o(t)),a=c.length,s=void 0===e?" ":String(e),f=r(n);if(f<=a||""==s)return c;var l=f-a,h=i.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,e){n.f=e(5)},function(t,n,e){"use strict";var r=e(94);t.exports=e(49)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(this,t);return n&&n.v},set:function(t,n){return r.def(this,0===t?0:t,n)}},r,!0)},function(t,n,e){e(6)&&"g"!=/./g.flags&&e(7).f(RegExp.prototype,"flags",{configurable:!0,get:e(51)})},function(t,n,e){"use strict";var r=e(94);t.exports=e(49)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(this,t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,i=e(21)(0),o=e(13),u=e(28),c=e(102),a=e(96),s=e(4),f=u.getWeak,l=Object.isExtensible,h=a.ufstore,p={},v=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(s(t)){var n=f(t);return!0===n?h(this).get(t):n?n[this._i]:void 0}},set:function(t,n){return a.def(this,t,n)}},d=t.exports=e(49)("WeakMap",v,y,a,!0,!0);7!=(new d).set((Object.freeze||Object)(p),7).get(p)&&(r=a.getConstructor(v),c(r.prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=d.prototype,e=n[t];o(n,t,function(n,i){if(s(n)&&!l(n)){this._f||(this._f=new r);var o=this._f[t](n,i);return"set"==t?this:o}return e.call(this,n,i)})}))},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.UploaderBuilder=n.Uploader=void 0;var i=e(86),o=r(i),u=e(87),c=r(u);n.Uploader=o.default,n.UploaderBuilder=c.default},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,[{key:"onReady",value:function(t){}},{key:"onStart",value:function(t){}},{key:"onTaskProgress",value:function(t){}},{key:"onTaskGetKey",value:function(t){return null}},{key:"onTaskFail",value:function(t){}},{key:"onTaskSuccess",value:function(t){}},{key:"onTaskRetry",value:function(t){}},{key:"onFinish",value:function(t){}}]),t}();n.default=o},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,[{key:"onIntercept",value:function(t){return!1}},{key:"onInterrupt",value:function(t){return!1}}]),t}();n.default=o},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=e(59),u=function(t){return t&&t.__esModule?t:{default:t}}(o),c=function(){function t(n){r(this,t),this.uploader=n}return i(t,[{key:"init",value:function(t){this.uploader=t}},{key:"upload",value:function(t){var n=this;this.task=t,this.uploader.getToken(t).then(function(e){t.startDate=new Date,n.uploadBlock(e)})}},{key:"uploadBlock",value:function(t){var n=this;u.default.d("准备开始上传块");var e=Promise.resolve();u.default.d("共"+this.task.blocks.length+"块等待上传"),u.default.d("共"+this.task.totalChunkCount+"分片等待上传"),this.task.blocks.forEach(function(r,i){r.chunks.forEach(function(r,o){e=e.then(function(){return u.default.d("开始上传第"+(i+1)+"块,第"+(o+1)+"片"),n.uploadChunk(r,t)})})}),e.then(function(){return n.concatChunks(t)}).then(function(){n.uploader.isTaskQueueFinish()&&(u.default.d("上传任务队列已结束"),n.uploader.tasking=!1,n.uploader.listener.onFinish(n.uploader.taskQueue))}).catch(function(t){u.default.w(n.task.file.name+"分块上传失败"),n.task.error=t,n.task.isSuccess=!1,n.task.isFinish=!0,n.task.endDate=new Date,n.uploader.listener.onTaskFail(n.task)})}},{key:"uploadChunk",value:function(t,n){var e=this;return new Promise(function(r,i){var o=0==t.block.chunks.indexOf(t),u=t.block.chunks.indexOf(t),c=o?null:t.block.chunks[u-1],a=o?e.getUploadBlockUrl(t.block.data.size):e.getUploadChunkUrl(t.start,c?c.ctx:null,c?c.host:null),s=new XMLHttpRequest;s.open("POST",a+=(/\?/.test(a)?"&":"?")+(new Date).getTime(),!0),s.setRequestHeader("Content-Type","application/octet-stream"),s.setRequestHeader("Authorization","UpToken "+n),s.upload.onprogress=function(n){if(n.lengthComputable){var r=Math.round((e.task.finishedBlocksSize+t.start+n.loaded)/e.task.file.size*100);e.task.progress<r&&(e.task.progress=r,e.uploader.listener.onTaskProgress(e.task))}},s.upload.onload=function(){var n=Math.round((e.task.finishedBlocksSize+t.start+t.data.size)/e.task.file.size*100);e.task.progress<n&&(e.task.progress=n,e.uploader.listener.onTaskProgress(e.task))},s.onreadystatechange=function(){if(s.readyState==XMLHttpRequest.DONE)if(200==s.status&&""!=s.responseText){var n=JSON.parse(s.responseText);t.isFinish=!0,t.processing=!1,t.ctx=n.ctx,t.host=n.host;var e=t.block.chunks.indexOf(t),o=e!=t.block.chunks.length-1;o||(t.block.isFinish=!0,t.block.processing=!1),r()}else i(s.response)},s.send(t.data)})}},{key:"concatChunks",value:function(t){var n=this;return new Promise(function(e,r){var i=n.task.key?btoa(n.task.key):null;i&&(i=i.replace(/\+/g,"-"),i=i.replace(/\//g,"_"));var o=n.getMakeFileUrl(n.task.file.size,i),c="",a=!0,s=!1,f=void 0;try{for(var l,h=n.task.blocks[Symbol.iterator]();!(a=(l=h.next()).done);a=!0){var p=l.value;c+=p.chunks[p.chunks.length-1].ctx+","}}catch(t){s=!0,f=t}finally{try{!a&&h.return&&h.return()}finally{if(s)throw f}}c.endsWith(",")&&(c=c.substring(0,c.length-1));var v=new XMLHttpRequest;v.open("POST",o+=(/\?/.test(o)?"&":"?")+(new Date).getTime(),!0),v.setRequestHeader("Content-Type","text/plain"),v.setRequestHeader("Authorization","UpToken "+t),v.onreadystatechange=function(){if(v.readyState==XMLHttpRequest.DONE)if(n.task.isFinish=!0,200==v.status&&""!=v.responseText){var t=JSON.parse(v.responseText);n.task.isSuccess=!0,n.task.result=t,n.task.endDate=new Date,n.uploader.listener.onTaskSuccess(n.task),e()}else n.retryTask(n.task)?(u.default.w(n.task.file.name+"分块上传失败,准备开始重传"),n.uploader.listener.onTaskRetry(n.task)):r(v.response)},v.send(c)})}},{key:"getUploadBlockUrl",value:function(t){return this.uploader.domain+"/mkblk/"+t}},{key:"getUploadChunkUrl",value:function(t,n,e){return(e||this.uploader.domain)+"/bput/"+n+"/"+t+"/"}},{key:"getMakeFileUrl",value:function(t,n){return n?this.uploader.domain+"/mkfile/"+t+"/key/"+n:this.uploader.domain+"/mkfile/"+t}},{key:"retryTask",value:function(t){return t.retry>=this.uploader.retry?(u.default.w(t.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(t.retry++,u.default.w(t.file.name+"开始重传,当前重传次数"+t.retry),!0)}}]),t}();n.default=c},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=e(59),u=function(t){return t&&t.__esModule?t:{default:t}}(o),c=function(){function t(n){r(this,t),this.uploader=n}return i(t,[{key:"upload",value:function(t){var n=this;this.task=t,this.uploader.getToken(t).then(function(e){t.startDate=new Date,n.uploadFile(e)})}},{key:"createFormData",value:function(t){var n=this.task,e=new FormData;return null!==n.key&&void 0!==n.key&&e.append("key",n.key),e.append("token",t),e.append("file",n.file),u.default.d("创建formData对象"),e}},{key:"uploadFile",value:function(t){var n=this,e=this.task,r=new XMLHttpRequest;r.upload.onprogress=function(t){if(t.lengthComputable){var r=Math.round(100*t.loaded/t.total);e.progress<r&&(e.progress=r,n.uploader.listener.onTaskProgress(e))}},r.upload.onload=function(){e.progress<100&&(e.progress=100,n.uploader.listener.onTaskProgress(e))};var i=this.uploader.domain;i+=(/\?/.test(this.uploader.domain)?"&":"?")+(new Date).getTime(),r.open("POST",i,!0),r.onreadystatechange=function(){r.readyState==XMLHttpRequest.DONE&&(200==r.status&&""!=r.responseText?(e.result=JSON.parse(r.responseText),e.isSuccess=!0,e.isFinish=!0,e.endDate=new Date,n.uploader.listener.onTaskSuccess(e)):n.retryTask(e)?(u.default.w(e.file.name+"上传失败,准备开始重传"),n.uploader.listener.onTaskRetry(e)):(u.default.w(e.file.name+"上传失败"),e.error=r.response,e.isSuccess=!1,e.isFinish=!0,e.endDate=new Date,n.uploader.listener.onTaskFail(e)),n.uploader.isTaskQueueFinish()&&(n.uploader.tasking=!1,n.uploader.listener.onFinish(n.uploader.taskQueue)))};var o=this.createFormData(t);r.send(o),u.default.d("发送ajax post 请求")}},{key:"retryTask",value:function(t){return u.default.d("开始尝试重传"),t.retry>=this.uploader.retry?(u.default.w(t.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(t.retry++,u.default.w(t.file.name+"开始重传,当前重传次数"+t.retry),this.upload(t),!0)}}]),t}();n.default=c},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.Chunk=n.Block=n.ChunkTask=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e(88),a=function(t){return t&&t.__esModule?t:{default:t}}(c),s=function(t){function n(t,e,o){r(this,n);var u=i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return u._blocks=[],u._blockSize=0,u._chunkSize=0,u._blockSize=e,u._chunkSize=o,u.spliceFile2Block(),u}return o(n,t),u(n,[{key:"spliceFile2Block",value:function(){this._blocks=[];for(var t=this._file.size,n=this._file,e=Math.ceil(t/this._blockSize),r=0;r<e;r++){var i=r*this._blockSize,o=i+this._blockSize,u=new f(i,o,n.slice(i,o),this._chunkSize,n);this._blocks.push(u)}}},{key:"blocks",get:function(){return this._blocks}},{key:"processingBlock",get:function(){var t=!0,n=!1,e=void 0;try{for(var r,i=this._blocks[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.processing)return o}}catch(t){n=!0,e=t}finally{try{!t&&i.return&&i.return()}finally{if(n)throw e}}throw Error("找不到正在处理的Block")}},{key:"finishedBlocksSize",get:function(){var t=0,n=!0,e=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var u=i.value;t+=u.isFinish?u.data.size:0}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}return t}},{key:"chunks",get:function(){var t=[],n=!0,e=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var u=i.value,c=!0,a=!1,s=void 0;try{for(var f,l=u.chunks[Symbol.iterator]();!(c=(f=l.next()).done);c=!0){var h=f.value;t.push(h)}}catch(t){a=!0,s=t}finally{try{!c&&l.return&&l.return()}finally{if(a)throw s}}}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}return t}},{key:"processingChunk",get:function(){var t=!0,n=!1,e=void 0;try{for(var r,i=this._blocks[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.processing){var u=!0,c=!1,a=void 0;try{for(var s,f=o.chunks[Symbol.iterator]();!(u=(s=f.next()).done);u=!0){var l=s.value;if(l.processing)return l}}catch(t){c=!0,a=t}finally{try{!u&&f.return&&f.return()}finally{if(c)throw a}}}}}catch(t){n=!0,e=t}finally{try{!t&&i.return&&i.return()}finally{if(n)throw e}}throw Error("找不到正在处理的Chunk")}},{key:"totalChunkCount",get:function(){var t=0,n=!0,e=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){t+=i.value.chunks.length}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}return t}}]),n}(a.default),f=function(){function t(n,e,i,o,u){r(this,t),this._chunks=[],this._isFinish=!1,this._processing=!1,this._data=i,this._start=n,this._end=e,this._file=u,this.spliceBlock2Chunk(o)}return u(t,[{key:"spliceBlock2Chunk",value:function(t){for(var n=this._data.size,e=this._data,r=Math.ceil(n/t),i=0;i<r;i++){var o=i*t,u=o+t,c=new l(o,u,e.slice(o,u),this);this._chunks.push(c)}}},{key:"processing",get:function(){return this._processing},set:function(t){this._processing=t}},{key:"file",get:function(){return this._file}},{key:"isFinish",get:function(){return this._isFinish},set:function(t){this._isFinish=t}},{key:"data",get:function(){return this._data}},{key:"start",get:function(){return this._start}},{key:"end",get:function(){return this._end}},{key:"chunks",get:function(){return this._chunks}}]),t}(),l=function(){function t(n,e,i,o){r(this,t),this._processing=!1,this._isFinish=!1,this._start=n,this._end=e,this._data=i,this._block=o}return u(t,[{key:"block",get:function(){return this._block}},{key:"start",get:function(){return this._start}},{key:"end",get:function(){return this._end}},{key:"data",get:function(){return this._data}},{key:"isFinish",get:function(){return this._isFinish},set:function(t){this._isFinish=t}},{key:"host",get:function(){return this._host},set:function(t){this._host=t}},{key:"processing",get:function(){return this._processing},set:function(t){this._processing=t}},{key:"ctx",get:function(){return this._ctx},set:function(t){this._ctx=t}}]),t}();n.ChunkTask=s,n.Block=f,n.Chunk=l},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var u=e(88),c=function(t){return t&&t.__esModule?t:{default:t}}(u),a=function(t){function n(){return r(this,n),i(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return o(n,t),n}(c.default);n.default=a},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,null,[{key:"uuid",value:function(){var t=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){var e=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"==n?e:3&e|8).toString(16)})}}]),t}();n.default=o},function(t,n,e){"use strict";HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function(t,n,e){for(var r=atob(this.toDataURL(n,e).split(",")[1]),i=r.length,o=new Uint8Array(i),u=0;u<i;u++)o[u]=r.charCodeAt(u);t(new Blob([o],{type:n||"image/png"}))}})},function(t,n,e){"use strict";(function(t){function n(t,n,e){t[n]||Object[r](t,n,{writable:!0,configurable:!0,value:e})}if(e(308),e(309),e(128),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var r="defineProperty";n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(n,e(117))},function(t,n,e){e(137),t.exports=e(24).RegExp.escape},function(t,n,e){var r=e(4),i=e(68),o=e(5)("species");t.exports=function(t){var n;return i(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){var r=e(129);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var r=e(1),i=e(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(35),i=e(56),o=e(47);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var u,c=e(t),a=o.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,e){var r=e(35),i=e(15);t.exports=function(t,n){for(var e,o=i(t),u=r(o),c=u.length,a=0;c>a;)if(o[e=u[a++]]===n)return e}},function(t,n,e){"use strict";var r=e(135),i=e(52),o=e(11);t.exports=function(){for(var t=o(this),n=arguments.length,e=Array(n),u=0,c=r._,a=!1;n>u;)(e[u]=arguments[u++])===c&&(a=!0);return function(){var r,o=this,u=arguments.length,s=0,f=0;if(!a&&!u)return i(t,e,o);if(r=e.slice(),a)for(;n>s;s++)r[s]===c&&(r[s]=arguments[f++]);for(;u>f;)r.push(arguments[f++]);return i(t,r,o)}}},function(t,n,e){t.exports=e(2)},function(t,n){t.exports=function(t,n){var e=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,e)}}},function(t,n,e){var r=e(0),i=e(136)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(90)}),e(40)("copyWithin")},function(t,n,e){"use strict";var r=e(0),i=e(21)(4);r(r.P+r.F*!e(20)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(60)}),e(40)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(21)(2);r(r.P+r.F*!e(20)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(21)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)(o)},function(t,n,e){"use strict";var r=e(0),i=e(21)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("find")},function(t,n,e){"use strict";var r=e(0),i=e(21)(0),o=e(20)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(25),i=e(0),o=e(9),u=e(99),c=e(67),a=e(8),s=e(61),f=e(84);i(i.S+i.F*!e(54)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,y=v>1?arguments[1]:void 0,d=void 0!==y,g=0,_=f(h);if(d&&(y=r(y,v>2?arguments[2]:void 0,2)),void 0==_||p==Array&&c(_))for(n=a(h.length),e=new p(n);n>g;g++)s(e,g,d?y(h[g],g):h[g]);else for(l=_.call(h),e=new p;!(i=l.next()).done;g++)s(e,g,d?u(l,y,[i.value,g],!0):i.value);return e.length=g,e}})},function(t,n,e){"use strict";var r=e(0),i=e(48)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(20)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(68)})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=[].join;r(r.P+r.F*(e(46)!=Object||!e(20)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=e(30),u=e(8),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!e(20)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=i(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){"use strict";var r=e(0),i=e(21)(1);r(r.P+r.F*!e(20)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(61);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(92);r(r.P+r.F*!e(20)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(92);r(r.P+r.F*!e(20)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(65),o=e(18),u=e(38),c=e(8),a=[].slice;r(r.P+r.F*e(3)(function(){i&&a.call(i)}),"Array",{slice:function(t,n){var e=c(this.length),r=o(this);if(n=void 0===n?e:n,"Array"==r)return a.call(this,t,n);for(var i=u(t,e),s=u(n,e),f=c(s-i),l=Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,n,e){"use strict";var r=e(0),i=e(21)(3);r(r.P+r.F*!e(20)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(11),o=e(9),u=e(3),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(20)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,n,e){e(37)("Array")},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=Date.prototype.getTime,u=function(t){return t>9?t:"0"+t};r(r.P+r.F*(i(function(){return"0385-07-25T07:06:39.999Z"!=new Date(-5e13-1).toISOString()})||!i(function(){new Date(NaN).toISOString()})),"Date",{toISOString:function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(5)("toPrimitive"),i=Date.prototype;r in i||e(12)(i,r,e(131))},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(13)(r,"toString",function(){var t=o.call(this);return t===t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(93)})},function(t,n,e){"use strict";var r=e(4),i=e(17),o=e(5)("hasInstance"),u=Function.prototype;o in u||e(7).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(7).f,i=e(29),o=e(10),u=Function.prototype,c=/^\s*function ([^ (]*)/,a=Object.isExtensible||function(){return!0};"name"in u||e(6)&&r(u,"name",{configurable:!0,get:function(){try{var t=this,n=(""+t).match(c)[1];return o(t,"name")||!a(t)||r(t,"name",i(5,n)),n}catch(t){return""}}})},function(t,n,e){var r=e(0),i=e(101),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){function r(t){return isFinite(t=+t)&&0!=t?t<0?-r(-t):Math.log(t+Math.sqrt(t*t+1)):t}var i=e(0),o=Math.asinh;i(i.S+i.F*!(o&&1/o(0)>0),"Math",{asinh:r})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(72);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(71);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0),i=e(72),o=Math.pow,u=o(2,-52),c=o(2,-23),a=o(2,127)*(2-c),s=o(2,-126),f=function(t){return t+1/u-1/u};r(r.S,"Math",{fround:function(t){var n,e,r=Math.abs(t),o=i(t);return r<s?o*f(r/s/c)*s*c:(n=(1+c/u)*r,e=n-(n-r),e>a||e!=e?o*(1/0):o*e)}})},function(t,n,e){var r=e(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,o=0,u=0,c=arguments.length,a=0;u<c;)e=i(arguments[u++]),a<e?(r=a/e,o=o*r*r+1,a=e):e>0?(r=e/a,o+=r*r):o+=e;return a===1/0?1/0:a*Math.sqrt(o)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r;return 0|i*o+((65535&e>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)/Math.LN10}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(72)})},function(t,n,e){var r=e(0),i=e(71),o=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(71),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){"use strict";var r=e(2),i=e(10),o=e(18),u=e(66),c=e(23),a=e(3),s=e(34).f,f=e(16).f,l=e(7).f,h=e(44).trim,p=r.Number,v=p,y=p.prototype,d="Number"==o(e(33)(y)),g="trim"in String.prototype,_=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){n=g?n.trim():h(n,3);var e,r,i,o=n.charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>i)return NaN;return parseInt(a,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(d?a(function(){y.valueOf.call(e)}):"Number"!=o(e))?u(new v(_(n)),e,p):_(n)};for(var b,k=e(6)?s(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),m=0;k.length>m;m++)i(v,b=k[m])&&!i(p,b)&&l(p,b,f(v,b));p.prototype=y,y.constructor=p,e(13)(r,"Number",p)}},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(98)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(98),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(108);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(109);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){"use strict";var r=e(0),i=e(30),o=e(89),u=e(79),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=a(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=a(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},v=function(t,n,e){return 0===n?e:n%2==1?v(t,n-1,e*t):v(t*t,n/2,e)},y=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n};r(r.P+r.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){c.call({})})),"Number",{toFixed:function(t){var n,e,r,c,a=o(this,f),s=i(t),d="",g="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(n=y(a*v(2,69,1))-69,e=n<0?a*v(2,-n,1):a/v(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(v(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=p()}else l(0,e),l(1<<-n,0),g=p()+u.call("0",s);return s>0?(c=g.length,g=d+(c<=s?"0."+u.call("0",s-c)+g:g.slice(0,c-s)+"."+g.slice(c-s))):g=d+g,g}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=e(89),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(102)})},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(33)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(6),"Object",{defineProperties:e(103)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(6),"Object",{defineProperty:e(7).f})},function(t,n,e){var r=e(4),i=e(28).onFreeze;e(22)("freeze",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(15),i=e(16).f;e(22)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){e(22)("getOwnPropertyNames",function(){return e(104).f})},function(t,n,e){var r=e(9),i=e(17);e(22)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(4);e(22)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(4);e(22)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(22)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(110)})},function(t,n,e){var r=e(9),i=e(35);e(22)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(4),i=e(28).onFreeze;e(22)("preventExtensions",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4),i=e(28).onFreeze;e(22)("seal",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(74).set})},function(t,n,e){"use strict";var r=e(45),i={};i[e(5)("toStringTag")]="z",i+""!="[object z]"&&e(13)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0),i=e(108);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){var r=e(0),i=e(109);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){"use strict";var r,i,o,u=e(32),c=e(2),a=e(25),s=e(45),f=e(0),l=e(4),h=e(11),p=e(31),v=e(41),y=e(76),d=e(81).set,g=e(73)(),_=c.TypeError,b=c.process,k=c.Promise,b=c.process,m="process"==s(b),w=function(){},x=!!function(){try{var t=k.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(w,w)};return(m||"function"==typeof PromiseRejectionEvent)&&t.then(w)instanceof n}catch(t){}}(),S=function(t,n){return t===n||t===k&&n===o},E=function(t){var n;return!(!l(t)||"function"!=typeof(n=t.then))&&n},O=function(t){return S(k,t)?new F(t):new i(t)},F=i=function(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw _("Bad Promise constructor");n=t,e=r}),this.resolve=h(n),this.reject=h(e)},P=function(t){try{t()}catch(t){return{error:t}}},M=function(t,n){if(!t._n){t._n=!0;var e=t._c;g(function(){for(var r=t._v,i=1==t._s,o=0;e.length>o;)!function(n){var e,o,u=i?n.ok:n.fail,c=n.resolve,a=n.reject,s=n.domain;try{u?(i||(2==t._h&&j(t),t._h=1),!0===u?e=r:(s&&s.enter(),e=u(r),s&&s.exit()),e===n.promise?a(_("Promise-chain cycle")):(o=E(e))?o.call(e,c,a):c(e)):a(r)}catch(t){a(t)}}(e[o++]);t._c=[],t._n=!1,n&&!t._h&&I(t)})}},I=function(t){d.call(c,function(){var n,e,r,i=t._v;if(T(t)&&(n=P(function(){m?b.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=m||T(t)?2:1),t._a=void 0,n)throw n.error})},T=function(t){if(1==t._h)return!1;for(var n,e=t._a||t._c,r=0;e.length>r;)if(n=e[r++],n.fail||!T(n.promise))return!1;return!0},j=function(t){d.call(c,function(){var n;m?b.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},A=function(t){var n=this;n._d||(n._d=!0,n=n._w||n,n._v=t,n._s=2,n._a||(n._a=n._c.slice()),M(n,!0))},N=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw _("Promise can't be resolved itself");(n=E(t))?g(function(){var r={_w:e,_d:!1};try{n.call(t,a(N,r,1),a(A,r,1))}catch(t){A.call(r,t)}}):(e._v=t,e._s=1,M(e,!1))}catch(t){A.call({_w:e,_d:!1},t)}}};x||(k=function(t){p(this,k,"Promise","_h"),h(t),r.call(this);try{t(a(N,this,1),a(A,this,1))}catch(t){A.call(this,t)}},r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},r.prototype=e(36)(k.prototype,{then:function(t,n){var e=O(y(this,k));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=m?b.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&M(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),F=function(){var t=new r;this.promise=t,this.resolve=a(N,t,1),this.reject=a(A,t,1)}),f(f.G+f.W+f.F*!x,{Promise:k}),e(43)(k,"Promise"),e(37)("Promise"),o=e(24).Promise,f(f.S+f.F*!x,"Promise",{reject:function(t){var n=O(this);return(0,n.reject)(t),n.promise}}),f(f.S+f.F*(u||!x),"Promise",{resolve:function(t){if(t instanceof k&&S(t.constructor,this))return t;var n=O(this);return(0,n.resolve)(t),n.promise}}),f(f.S+f.F*!(x&&e(54)(function(t){k.all(t).catch(w)})),"Promise",{all:function(t){var n=this,e=O(n),r=e.resolve,i=e.reject,o=P(function(){var e=[],o=0,u=1;v(t,!1,function(t){var c=o++,a=!1;e.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,e[c]=t,--u||r(e))},i)}),--u||r(e)});return o&&i(o.error),e.promise},race:function(t){var n=this,e=O(n),r=e.reject,i=P(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i&&r(i.error),e.promise}})},function(t,n,e){var r=e(0),i=e(11),o=e(1),u=(e(2).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!e(3)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=i(t),a=o(e);return u?u(r,n,a):c.call(r,n,a)}})},function(t,n,e){var r=e(0),i=e(33),o=e(11),u=e(1),c=e(4),a=e(3),s=e(93),f=(e(2).Reflect||{}).construct,l=a(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!a(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var e=arguments.length<3?t:o(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var a=e.prototype,p=i(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},function(t,n,e){var r=e(7),i=e(0),o=e(1),u=e(23);i(i.S+i.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=u(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(16).f,o=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),i=e(1),o=function(t){this._t=i(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(69)(o,"Object",function(){var t,n=this,e=n._k;do{if(n._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[n._i++])in n._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,e){var r=e(16),i=e(0),o=e(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(17),o=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){function r(t,n){var e,c,f=arguments.length<3?t:arguments[2];return s(t)===f?t[n]:(e=i.f(t,n))?u(e,"value")?e.value:void 0!==e.get?e.get.call(f):void 0:a(c=o(t))?r(c,n,f):void 0}var i=e(16),o=e(17),u=e(10),c=e(0),a=e(4),s=e(1);c(c.S,"Reflect",{get:r})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(107)})},function(t,n,e){var r=e(0),i=e(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(74);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){function r(t,n,e){var a,h,p=arguments.length<4?t:arguments[3],v=o.f(f(t),n);if(!v){if(l(h=u(t)))return r(h,n,e,p);v=s(0)}return c(v,"value")?!(!1===v.writable||!l(p))&&(a=o.f(p,n)||s(0),a.value=e,i.f(p,n,a),!0):void 0!==v.set&&(v.set.call(p,e),!0)}var i=e(7),o=e(16),u=e(17),c=e(10),a=e(0),s=e(29),f=e(1),l=e(4);a(a.S,"Reflect",{set:r})},function(t,n,e){var r=e(2),i=e(66),o=e(7).f,u=e(34).f,c=e(53),a=e(51),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,v=new s(h)!==h;if(e(6)&&(!v||e(3)(function(){return p[e(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),o=void 0===n;return!e&&r&&t.constructor===s&&o?t:i(v?new f(r&&!o?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&o?a.call(t):n),e?this:l,s)};for(var y=u(f),d=0;y.length>d;)!function(t){t in s||o(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})}(y[d++]);l.constructor=s,s.prototype=l,e(13)(r,"RegExp",s)}e(37)("RegExp")},function(t,n,e){e(50)("match",1,function(t,n,e){return[function(e){"use strict";var r=t(this),i=void 0==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},e]})},function(t,n,e){e(50)("replace",2,function(t,n,e){return[function(r,i){"use strict";var o=t(this),u=void 0==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},e]})},function(t,n,e){e(50)("search",1,function(t,n,e){return[function(e){"use strict";var r=t(this),i=void 0==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},e]})},function(t,n,e){e(50)("split",2,function(t,n,r){"use strict";var i=e(53),o=r,u=[].push,c="length";if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[c]||2!="ab".split(/(?:ab)*/)[c]||4!=".".split(/(.?)(.?)/)[c]||".".split(/()()/)[c]>1||"".split(/.?/)[c]){var a=void 0===/()??/.exec("")[1];r=function(t,n){var e=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(e,t,n);var r,s,f,l,h,p=[],v=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),y=0,d=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,v+"g");for(a||(r=new RegExp("^"+g.source+"$(?!\\s)",v));(s=g.exec(e))&&!((f=s.index+s[0][c])>y&&(p.push(e.slice(y,s.index)),!a&&s[c]>1&&s[0].replace(r,function(){for(h=1;h<arguments[c]-2;h++)void 0===arguments[h]&&(s[h]=void 0)}),s[c]>1&&s.index<e[c]&&u.apply(p,s.slice(1)),l=s[0][c],y=f,p[c]>=d));)g.lastIndex===s.index&&g.lastIndex++;return y===e[c]?!l&&g.test("")||p.push(""):p.push(e.slice(y)),p[c]>d?p.slice(0,d):p}}else"0".split(void 0,0)[c]&&(r=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function(e,i){var o=t(this),u=void 0==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},function(t,n,e){"use strict";e(114);var r=e(1),i=e(51),o=e(6),u=/./.toString,c=function(t){e(13)(RegExp.prototype,"toString",t,!0)};e(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,e){"use strict";e(14)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(14)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(14)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(14)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";var r=e(0),i=e(77)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(78),u="".endsWith;r(r.P+r.F*e(64)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=i(n.length),c=void 0===e?r:Math.min(i(e),r),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,e){"use strict";e(14)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(14)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(14)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){var r=e(0),i=e(38),o=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){"use strict";var r=e(0),i=e(78);r(r.P+r.F*e(64)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){"use strict";e(14)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";var r=e(77)(!0);e(70)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";e(14)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){var r=e(0),i=e(15),o=e(8);r(r.S,"String",{raw:function(t){for(var n=i(t.raw),e=o(n.length),r=arguments.length,u=[],c=0;e>c;)u.push(String(n[c++])),c<r&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(79)})},function(t,n,e){"use strict";e(14)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(78),u="".startsWith;r(r.P+r.F*e(64)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),e=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(14)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(14)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(14)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){"use strict";e(44)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(2),i=e(10),o=e(6),u=e(0),c=e(13),a=e(28).KEY,s=e(3),f=e(57),l=e(43),h=e(39),p=e(5),v=e(112),y=e(83),d=e(133),g=e(132),_=e(68),b=e(1),k=e(15),m=e(23),w=e(29),x=e(33),S=e(104),E=e(16),O=e(7),F=e(35),P=E.f,M=O.f,I=S.f,T=r.Symbol,j=r.JSON,A=j&&j.stringify,N=p("_hidden"),R=p("toPrimitive"),D={}.propertyIsEnumerable,L=f("symbol-registry"),C=f("symbols"),U=f("op-symbols"),B=Object.prototype,z="function"==typeof T,W=r.QObject,G=!W||!W.prototype||!W.prototype.findChild,K=o&&s(function(){return 7!=x(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=P(B,n);r&&delete B[n],M(t,n,e),r&&t!==B&&M(B,n,r)}:M,V=function(t){var n=C[t]=x(T.prototype);return n._k=t,n},q=z&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},Q=function(t,n,e){return t===B&&Q(U,n,e),b(t),n=m(n,!0),b(e),i(C,n)?(e.enumerable?(i(t,N)&&t[N][n]&&(t[N][n]=!1),e=x(e,{enumerable:w(0,!1)})):(i(t,N)||M(t,N,w(1,{})),t[N][n]=!0),K(t,n,e)):M(t,n,e)},H=function(t,n){b(t);for(var e,r=g(n=k(n)),i=0,o=r.length;o>i;)Q(t,e=r[i++],n[e]);return t},X=function(t,n){return void 0===n?x(t):H(x(t),n)},J=function(t){var n=D.call(this,t=m(t,!0));return!(this===B&&i(C,t)&&!i(U,t))&&(!(n||!i(this,t)||!i(C,t)||i(this,N)&&this[N][t])||n)},Y=function(t,n){if(t=k(t),n=m(n,!0),t!==B||!i(C,n)||i(U,n)){var e=P(t,n);return!e||!i(C,n)||i(t,N)&&t[N][n]||(e.enumerable=!0),e}},Z=function(t){for(var n,e=I(k(t)),r=[],o=0;e.length>o;)i(C,n=e[o++])||n==N||n==a||r.push(n);return r},$=function(t){for(var n,e=t===B,r=I(e?U:k(t)),o=[],u=0;r.length>u;)!i(C,n=r[u++])||e&&!i(B,n)||o.push(C[n]);return o};z||(T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===B&&n.call(U,e),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),K(this,t,w(1,e))};return o&&G&&K(B,t,{configurable:!0,set:n}),V(t)},c(T.prototype,"toString",function(){return this._k}),E.f=Y,O.f=Q,e(34).f=S.f=Z,e(47).f=J,e(56).f=$,o&&!e(32)&&c(B,"propertyIsEnumerable",J,!0),v.f=function(t){return V(p(t))}),u(u.G+u.W+u.F*!z,{Symbol:T});for(var tt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;tt.length>nt;)p(tt[nt++]);for(var tt=F(p.store),nt=0;tt.length>nt;)y(tt[nt++]);u(u.S+u.F*!z,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=T(t)},keyFor:function(t){if(q(t))return d(L,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!z,"Object",{create:X,defineProperty:Q,defineProperties:H,getOwnPropertyDescriptor:Y,getOwnPropertyNames:Z,getOwnPropertySymbols:$}),j&&u(u.S+u.F*(!z||s(function(){var t=T();return"[null]"!=A([t])||"{}"!=A({a:t})||"{}"!=A(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!q(t)){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);return n=r[1],"function"==typeof n&&(e=n),!e&&_(n)||(n=function(t,n){if(e&&(n=e.call(this,t,n)),!q(n))return n}),r[1]=n,A.apply(j,r)}}}),T.prototype[R]||e(12)(T.prototype,R,T.prototype.valueOf),l(T,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){"use strict";var r=e(0),i=e(58),o=e(82),u=e(1),c=e(38),a=e(8),s=e(4),f=e(2).ArrayBuffer,l=e(76),h=o.ArrayBuffer,p=o.DataView,v=i.ABV&&f.isView,y=h.prototype.slice,d=i.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||s(t)&&d in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==y&&void 0===n)return y.call(u(this),t);for(var e=u(this).byteLength,r=c(t,e),i=c(void 0===n?e:n,e),o=new(l(this,h))(a(i-r)),s=new p(this),f=new p(o),v=0;r<i;)f.setUint8(v++,s.getUint8(r++));return o}}),e(37)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(58).ABV,{DataView:e(82).DataView})},function(t,n,e){e(27)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){"use strict";var r=e(96);e(49)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(this,t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(48)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("includes")},function(t,n,e){var r=e(0),i=e(73)(),o=e(2).process,u="process"==e(18)(o);r(r.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,e){var r=e(0),i=e(18);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(95)("Map")})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var i=t>>>0,o=n>>>0,u=e>>>0;return o+(r>>>0)+((i&u|(i|u)&~(i+u>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>16,c=r>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var i=t>>>0,o=n>>>0,u=e>>>0;return o-(r>>>0)-((~i&u|~(i^u)&i-u>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>>16,c=r>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(11),u=e(7);e(6)&&r(r.P+e(55),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(11),u=e(7);e(6)&&r(r.P+e(55),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){var r=e(0),i=e(106)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){var r=e(0),i=e(107),o=e(15),u=e(16),c=e(61);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e=o(t),r=u.f,a=i(e),s={},f=0;a.length>f;)c(s,n=a[f++],r(e,n));return s}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(6)&&r(r.P+e(55),"Object",{__lookupGetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.get}while(e=u(e))}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(6)&&r(r.P+e(55),"Object",{__lookupSetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.set}while(e=u(e))}})},function(t,n,e){var r=e(0),i=e(106)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){"use strict";var r=e(0),i=e(2),o=e(24),u=e(73)(),c=e(5)("observable"),a=e(11),s=e(1),f=e(31),l=e(36),h=e(12),p=e(41),v=p.RETURN,y=function(t){return null==t?void 0:a(t)},d=function(t){var n=t._c;n&&(t._c=void 0,n())},g=function(t){return void 0===t._o},_=function(t){g(t)||(t._o=void 0,d(t))},b=function(t,n){s(t),this._c=void 0,this._o=t,t=new k(this);try{var e=n(t),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:a(e),this._c=e)}catch(n){return void t.error(n)}g(this)&&d(this)};b.prototype=l({},{unsubscribe:function(){_(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var n=this._s;if(!g(n)){var e=n._o;try{var r=y(e.next);if(r)return r.call(e,t)}catch(t){try{_(n)}finally{throw t}}}},error:function(t){var n=this._s;if(g(n))throw t;var e=n._o;n._o=void 0;try{var r=y(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{d(n)}finally{throw t}}return d(n),t},complete:function(t){var n=this._s;if(!g(n)){var e=n._o;n._o=void 0;try{var r=y(e.complete);t=r?r.call(e,t):void 0}catch(t){try{d(n)}finally{throw t}}return d(n),t}}});var m=function(t){f(this,m,"Observable","_f")._f=a(t)};l(m.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(e,r){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e})})}}),l(m,{from:function(t){var n="function"==typeof this?this:m,e=y(s(t)[c]);if(e){var r=s(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return u(function(){if(!e){try{if(p(t,!1,function(t){if(n.next(t),e)return v})===v)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,e=Array(n);t<n;)e[t]=arguments[t++];return new("function"==typeof this?this:m)(function(t){var n=!1;return u(function(){if(!n){for(var r=0;r<e.length;++r)if(t.next(e[r]),n)return;t.complete()}}),function(){n=!0}})}}),h(m.prototype,c,function(){return this}),r(r.G,{Observable:m}),e(37)("Observable")},function(t,n,e){var r=e(26),i=e(1),o=r.key,u=r.set;r.exp({defineMetadata:function(t,n,e,r){u(t,n,i(e),o(r))}})},function(t,n,e){var r=e(26),i=e(1),o=r.key,u=r.map,c=r.store;r.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:o(arguments[2]),r=u(i(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var a=c.get(n);return a.delete(e),!!a.size||c.delete(n)}})},function(t,n,e){var r=e(115),i=e(91),o=e(26),u=e(1),c=e(17),a=o.keys,s=o.key,f=function(t,n){var e=a(t,n),o=c(t);if(null===o)return e;var u=f(o,n);return u.length?e.length?i(new r(e.concat(u))):u:e};o.exp({getMetadataKeys:function(t){return f(u(t),arguments.length<2?void 0:s(arguments[1]))}})},function(t,n,e){var r=e(26),i=e(1),o=e(17),u=r.has,c=r.get,a=r.key,s=function(t,n,e){if(u(t,n,e))return c(t,n,e);var r=o(n);return null!==r?s(t,r,e):void 0};r.exp({getMetadata:function(t,n){return s(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,n,e){var r=e(26),i=e(1),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=e(17),u=r.has,c=r.key,a=function(t,n,e){if(u(t,n,e))return!0;var r=o(n);return null!==r&&a(t,r,e)};r.exp({hasMetadata:function(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=e(11),u=r.key,c=r.set;r.exp({metadata:function(t,n){return function(e,r){c(t,n,(void 0!==r?i:o)(e),u(r))}}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(95)("Set")})},function(t,n,e){"use strict";var r=e(0),i=e(77)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(19),o=e(8),u=e(53),c=e(51),a=RegExp.prototype,s=function(t,n){this._r=t,this._s=n};e(69)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in a?String(t.flags):c.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=o(t.lastIndex),new s(r,n)}})},function(t,n,e){"use strict";var r=e(0),i=e(111);r(r.P,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(111);r(r.P,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){"use strict";e(44)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(44)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){e(83)("asyncIterator")},function(t,n,e){e(83)("observable")},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){for(var r=e(85),i=e(13),o=e(2),u=e(12),c=e(42),a=e(5),s=a("iterator"),f=a("toStringTag"),l=c.Array,h=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],p=0;p<5;p++){var v,y=h[p],d=o[y],g=d&&d.prototype;if(g){g[s]||u(g,s,l),g[f]||u(g,f,y),c[y]=l;for(v in r)g[v]||i(g,v,r[v],!0)}}},function(t,n,e){var r=e(0),i=e(81);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){var r=e(2),i=e(0),o=e(52),u=e(134),c=r.navigator,a=!!c&&/MSIE .\./.test(c.userAgent),s=function(t){return a?function(n,e){return t(o(u,[].slice.call(arguments,2),"function"==typeof n?n:Function(n)),e)}:t};i(i.G+i.B+i.F*a,{setTimeout:s(r.setTimeout),setInterval:s(r.setInterval)})},function(t,n,e){e(257),e(196),e(198),e(197),e(200),e(202),e(207),e(201),e(199),e(209),e(208),e(204),e(205),e(203),e(195),e(206),e(210),e(211),e(163),e(165),e(164),e(213),e(212),e(183),e(193),e(194),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(244),e(249),e(256),e(247),e(239),e(240),e(245),e(250),e(252),e(235),e(236),e(237),e(238),e(241),e(242),e(243),e(246),e(248),e(251),e(253),e(254),e(255),e(158),e(160),e(159),e(162),e(161),e(147),e(145),e(151),e(148),e(154),e(156),e(144),e(150),e(141),e(155),e(139),e(153),e(152),e(146),e(149),e(138),e(140),e(143),e(142),e(157),e(85),e(229),e(234),e(114),e(230),e(231),e(232),e(233),e(214),e(113),e(115),e(116),e(269),e(258),e(259),e(264),e(267),e(268),e(262),e(265),e(263),e(266),e(260),e(261),e(215),e(216),e(217),e(218),e(219),e(222),e(220),e(221),e(223),e(224),e(225),e(226),e(228),e(227),e(270),e(296),e(299),e(298),e(300),e(301),e(297),e(302),e(303),e(281),e(284),e(280),e(278),e(279),e(282),e(283),e(273),e(295),e(304),e(272),e(274),e(276),e(275),e(277),e(286),e(287),e(289),e(288),e(291),e(290),e(292),e(293),e(294),e(271),e(285),e(307),e(306),e(305),t.exports=e(24)},function(t,n,e){(function(n){!function(n){"use strict";function e(t,n,e,r){var o=n&&n.prototype instanceof i?n:i,u=Object.create(o.prototype),c=new p(r||[]);return u._invoke=s(t,e,c),u}function r(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function i(){}function o(){}function u(){}function c(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function a(t){function e(n,i,o,u){var c=r(t[n],t,i);if("throw"!==c.type){var a=c.arg,s=a.value;return s&&"object"==typeof s&&_.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(s).then(function(t){a.value=t,o(a)},u)}u(c.arg)}function i(t,n){function r(){return new Promise(function(r,i){e(t,n,r,i)})}return o=o?o.then(r,r):r()}"object"==typeof n.process&&n.process.domain&&(e=n.process.domain.bind(e));var o;this._invoke=i}function s(t,n,e){var i=E;return function(o,u){if(i===F)throw new Error("Generator is already running");if(i===P){if("throw"===o)throw u;return y()}for(e.method=o,e.arg=u;;){var c=e.delegate;if(c){var a=f(c,e);if(a){if(a===M)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(i===E)throw i=P,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);i=F;var s=r(t,n,e);if("normal"===s.type){if(i=e.done?P:O,s.arg===M)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(i=P,e.method="throw",e.arg=s.arg)}}}function f(t,n){var e=t.iterator[n.method];if(e===d){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=d,f(t,n),"throw"===n.method))return M;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return M}var i=r(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,M;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=d),n.delegate=null,M):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,M)}function l(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function h(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function p(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(l,this),this.reset(!0)}function v(t){if(t){var n=t[k];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,r=function n(){for(;++e<t.length;)if(_.call(t,e))return n.value=t[e],n.done=!1,n;return n.value=d,n.done=!0,n};return r.next=r}}return{next:y}}function y(){return{value:d,done:!0}}var d,g=Object.prototype,_=g.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},k=b.iterator||"@@iterator",m=b.asyncIterator||"@@asyncIterator",w=b.toStringTag||"@@toStringTag",x="object"==typeof t,S=n.regeneratorRuntime;if(S)return void(x&&(t.exports=S));S=n.regeneratorRuntime=x?t.exports:{},S.wrap=e;var E="suspendedStart",O="suspendedYield",F="executing",P="completed",M={},I={};I[k]=function(){return this};var T=Object.getPrototypeOf,j=T&&T(T(v([])));j&&j!==g&&_.call(j,k)&&(I=j);var A=u.prototype=i.prototype=Object.create(I);o.prototype=A.constructor=u,u.constructor=o,u[w]=o.displayName="GeneratorFunction",S.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===o||"GeneratorFunction"===(n.displayName||n.name))},S.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,u):(t.__proto__=u,w in t||(t[w]="GeneratorFunction")),t.prototype=Object.create(A),t},S.awrap=function(t){return{__await:t}},c(a.prototype),a.prototype[m]=function(){return this},S.AsyncIterator=a,S.async=function(t,n,r,i){var o=new a(e(t,n,r,i));return S.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},c(A),A[w]="Generator",A[k]=function(){return this},A.toString=function(){return"[object Generator]"},S.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},S.values=v,p.prototype={constructor:p,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=d,this.done=!1,this.delegate=null,this.method="next",this.arg=d,this.tryEntries.forEach(h),!t)for(var n in this)"t"===n.charAt(0)&&_.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=d)},stop:function(){this.done=!0;var t=this.tryEntries[0],n=t.completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(t){function n(n,r){return o.type="throw",o.arg=t,e.next=n,r&&(e.method="next",e.arg=d),!!r}if(this.done)throw t;for(var e=this,r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r],o=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=_.call(i,"catchLoc"),c=_.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&_.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=n,i?(this.method="next",this.next=i.finallyLoc,M):this.complete(o)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),M},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),h(e),M}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;h(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:v(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=d),M}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(n,e(117))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,