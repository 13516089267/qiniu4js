!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.Qiniu=n():t.Qiniu=n()}(this,function(){return function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var e={};return n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=118)}([function(t,n,e){var r=e(2),i=e(24),o=e(12),u=e(13),c=e(25),a=function(t,n,e){var s,f,l,h,p=t&a.F,v=t&a.G,y=t&a.S,d=t&a.P,g=t&a.B,_=v?r:y?r[n]||(r[n]={}):(r[n]||{}).prototype,b=v?i:i[n]||(i[n]={}),k=b.prototype||(b.prototype={});v&&(e=n);for(s in e)f=!p&&_&&void 0!==_[s],l=(f?_:e)[s],h=g&&f?c(l,r):d&&"function"==typeof l?c(Function.call,l):l,_&&u(_,s,l,t&a.U),b[s]!=l&&o(b,s,h),d&&k[s]!=l&&(k[s]=l)};r.core=i,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(57)("wks"),i=e(39),o=e(2).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(97),o=e(23),u=Object.defineProperty;n.f=e(6)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(30),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(19);t.exports=function(t){return Object(r(t))}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(7),i=e(29);t.exports=e(6)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2),i=e(12),o=e(10),u=e(39)("src"),c=Function.toString,a=(""+c).split("toString");e(24).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,e,c){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,u)||i(e,u,t[n]?""+t[n]:a.join(String(n)))),t===r?t[n]=e:c?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},function(t,n,e){var r=e(0),i=e(3),o=e(19),u=/"/g,c=function(t,n,e,r){var i=String(o(t)),c="<"+n;return""!==e&&(c+=" "+e+'="'+String(r).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(c),r(r.P+r.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n,e){var r=e(46),i=e(19);t.exports=function(t){return r(i(t))}},function(t,n,e){var r=e(47),i=e(29),o=e(15),u=e(23),c=e(10),a=e(97),s=Object.getOwnPropertyDescriptor;n.f=e(6)?s:function(t,n){if(t=o(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(10),i=e(9),o=e(75)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(25),i=e(46),o=e(9),u=e(8),c=e(130);t.exports=function(t,n){var e=1==t,a=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||c;return function(n,c,v){for(var y,d,g=o(n),_=i(g),b=r(c,v,3),k=u(_.length),m=0,w=e?p(n,k):a?p(n,0):void 0;k>m;m++)if((h||m in _)&&(y=_[m],d=b(y,m,g),t))if(e)w[m]=d;else if(d)switch(t){case 3:return!0;case 5:return y;case 6:return m;case 2:w.push(y)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n,e){var r=e(0),i=e(24),o=e(3);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){var e=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(11);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n,e){var r=e(113),i=e(0),o=e(57)("metadata"),u=o.store||(o.store=new(e(116))),c=function(t,n,e){var i=u.get(t);if(!i){if(!e)return;u.set(t,i=new r)}var o=i.get(n);if(!o){if(!e)return;i.set(n,o=new r)}return o},a=function(t,n,e){var r=c(n,e,!1);return void 0!==r&&r.has(t)},s=function(t,n,e){var r=c(n,e,!1);return void 0===r?void 0:r.get(t)},f=function(t,n,e,r){c(e,r,!0).set(t,n)},l=function(t,n){var e=c(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},h=function(t){return void 0===t||"symbol"==typeof t?t:String(t)},p=function(t){i(i.S,"Reflect",t)};t.exports={store:u,map:c,has:a,get:s,set:f,keys:l,key:h,exp:p}},function(t,n,e){"use strict";if(e(6)){var r=e(32),i=e(2),o=e(3),u=e(0),c=e(58),a=e(82),s=e(25),f=e(31),l=e(29),h=e(12),p=e(36),v=e(30),y=e(8),d=e(38),g=e(23),_=e(10),b=e(110),k=e(45),m=e(4),w=e(9),x=e(67),S=e(33),E=e(17),O=e(34).f,F=e(84),P=e(39),M=e(5),I=e(21),T=e(48),j=e(76),A=e(85),N=e(42),R=e(54),D=e(37),L=e(60),C=e(90),U=e(7),B=e(16),z=U.f,W=B.f,G=i.RangeError,K=i.TypeError,V=i.Uint8Array,q=Array.prototype,Q=a.ArrayBuffer,H=a.DataView,X=I(0),J=I(2),Y=I(3),Z=I(4),$=I(5),tt=I(6),nt=T(!0),et=T(!1),rt=A.values,it=A.keys,ot=A.entries,ut=q.lastIndexOf,ct=q.reduce,at=q.reduceRight,st=q.join,ft=q.sort,lt=q.slice,ht=q.toString,pt=q.toLocaleString,vt=M("iterator"),yt=M("toStringTag"),dt=P("typed_constructor"),gt=P("def_constructor"),_t=c.CONSTR,bt=c.TYPED,kt=c.VIEW,mt=I(1,function(t,n){return Ft(j(t,t[gt]),n)}),wt=o(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),xt=!!V&&!!V.prototype.set&&o(function(){new V(1).set({})}),St=function(t,n){if(void 0===t)throw K("Wrong length!");var e=+t,r=y(t);if(n&&!b(e,r))throw G("Wrong length!");return r},Et=function(t,n){var e=v(t);if(e<0||e%n)throw G("Wrong offset!");return e},Ot=function(t){if(m(t)&&bt in t)return t;throw K(t+" is not a typed array!")},Ft=function(t,n){if(!(m(t)&&dt in t))throw K("It is not a typed array constructor!");return new t(n)},Pt=function(t,n){return Mt(j(t,t[gt]),n)},Mt=function(t,n){for(var e=0,r=n.length,i=Ft(t,r);r>e;)i[e]=n[e++];return i},It=function(t,n,e){z(t,n,{get:function(){return this._d[e]}})},Tt=function(t){var n,e,r,i,o,u,c=w(t),a=arguments.length,f=a>1?arguments[1]:void 0,l=void 0!==f,h=F(c);if(void 0!=h&&!x(h)){for(u=h.call(c),r=[],n=0;!(o=u.next()).done;n++)r.push(o.value);c=r}for(l&&a>2&&(f=s(f,arguments[2],2)),n=0,e=y(c.length),i=Ft(this,e);e>n;n++)i[n]=l?f(c[n],n):c[n];return i},jt=function(){for(var t=0,n=arguments.length,e=Ft(this,n);n>t;)e[t]=arguments[t++];return e},At=!!V&&o(function(){pt.call(new V(1))}),Nt=function(){return pt.apply(At?lt.call(Ot(this)):Ot(this),arguments)},Rt={copyWithin:function(t,n){return C.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Ot(this),arguments)},filter:function(t){return Pt(this,J(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){X(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return mt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return at.apply(Ot(this),arguments)},reverse:function(){for(var t,n=this,e=Ot(n).length,r=Math.floor(e/2),i=0;i<r;)t=n[i],n[i++]=n[--e],n[e]=t;return n},some:function(t){return Y(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ot(this),t)},subarray:function(t,n){var e=Ot(this),r=e.length,i=d(t,r);return new(j(e,e[gt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,y((void 0===n?r:d(n,r))-i))}},Dt=function(t,n){return Pt(this,lt.call(Ot(this),t,n))},Lt=function(t){Ot(this);var n=Et(arguments[1],1),e=this.length,r=w(t),i=y(r.length),o=0;if(i+n>e)throw G("Wrong length!");for(;o<i;)this[n+o]=r[o++]},Ct={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return rt.call(Ot(this))}},Ut=function(t,n){return m(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Bt=function(t,n){return Ut(t,n=g(n,!0))?l(2,t[n]):W(t,n)},zt=function(t,n,e){return!(Ut(t,n=g(n,!0))&&m(e)&&_(e,"value"))||_(e,"get")||_(e,"set")||e.configurable||_(e,"writable")&&!e.writable||_(e,"enumerable")&&!e.enumerable?z(t,n,e):(t[n]=e.value,t)};_t||(B.f=Bt,U.f=zt),u(u.S+u.F*!_t,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:zt}),o(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Wt=p({},Rt);p(Wt,Ct),h(Wt,vt,Ct.values),p(Wt,{slice:Dt,set:Lt,constructor:function(){},toString:ht,toLocaleString:Nt}),It(Wt,"buffer","b"),It(Wt,"byteOffset","o"),It(Wt,"byteLength","l"),It(Wt,"length","e"),z(Wt,yt,{get:function(){return this[bt]}}),t.exports=function(t,n,e,a){a=!!a;var s=t+(a?"Clamped":"")+"Array",l="Uint8Array"!=s,p="get"+t,v="set"+t,d=i[s],g=d||{},_=d&&E(d),b=!d||!c.ABV,w={},x=d&&d.prototype,F=function(t,e){var r=t._d;return r.v[p](e*n+r.o,wt)},P=function(t,e,r){var i=t._d;a&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[v](e*n+i.o,r,wt)},M=function(t,n){z(t,n,{get:function(){return F(this,n)},set:function(t){return P(this,n,t)},enumerable:!0})};b?(d=e(function(t,e,r,i){f(t,d,s,"_d");var o,u,c,a,l=0,p=0;if(m(e)){if(!(e instanceof Q||"ArrayBuffer"==(a=k(e))||"SharedArrayBuffer"==a))return bt in e?Mt(d,e):Tt.call(d,e);o=e,p=Et(r,n);var v=e.byteLength;if(void 0===i){if(v%n)throw G("Wrong length!");if((u=v-p)<0)throw G("Wrong length!")}else if((u=y(i)*n)+p>v)throw G("Wrong length!");c=u/n}else c=St(e,!0),u=c*n,o=new Q(u);for(h(t,"_d",{b:o,o:p,l:u,e:c,v:new H(o)});l<c;)M(t,l++)}),x=d.prototype=S(Wt),h(x,"constructor",d)):R(function(t){new d(null),new d(t)},!0)||(d=e(function(t,e,r,i){f(t,d,s);var o;return m(e)?e instanceof Q||"ArrayBuffer"==(o=k(e))||"SharedArrayBuffer"==o?void 0!==i?new g(e,Et(r,n),i):void 0!==r?new g(e,Et(r,n)):new g(e):bt in e?Mt(d,e):Tt.call(d,e):new g(St(e,l))}),X(_!==Function.prototype?O(g).concat(O(_)):O(g),function(t){t in d||h(d,t,g[t])}),d.prototype=x,r||(x.constructor=d));var I=x[vt],T=!!I&&("values"==I.name||void 0==I.name),j=Ct.values;h(d,dt,!0),h(x,bt,s),h(x,kt,!0),h(x,gt,d),(a?new d(1)[yt]==s:yt in x)||z(x,yt,{get:function(){return s}}),w[s]=d,u(u.G+u.W+u.F*(d!=g),w),u(u.S,s,{BYTES_PER_ELEMENT:n,from:Tt,of:jt}),"BYTES_PER_ELEMENT"in x||h(x,"BYTES_PER_ELEMENT",n),u(u.P,s,Rt),D(s),u(u.P+u.F*xt,s,{set:Lt}),u(u.P+u.F*!T,s,Ct),u(u.P+u.F*(x.toString!=ht),s,{toString:ht}),u(u.P+u.F*o(function(){new d(1).slice()}),s,{slice:Dt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!o(function(){x.toLocaleString.call([1,2])})),s,{toLocaleString:Nt}),N[s]=T?I:j,r||T||h(x,vt,j)}}else t.exports=function(){}},function(t,n,e){var r=e(39)("meta"),i=e(4),o=e(10),u=e(7).f,c=0,a=Object.isExtensible||function(){return!0},s=!e(3)(function(){return a(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!a(t))return"F";if(!n)return"E";f(t)}return t[r].i},h=function(t,n){if(!o(t,r)){if(!a(t))return!0;if(!n)return!1;f(t)}return t[r].w},p=function(t){return s&&v.NEED&&a(t)&&!o(t,r)&&f(t),t},v=t.exports={KEY:r,NEED:!1,fastKey:l,getWeak:h,onFreeze:p}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n){t.exports=!1},function(t,n,e){var r=e(1),i=e(103),o=e(63),u=e(75)("IE_PROTO"),c=function(){},a=function(){var t,n=e(62)("iframe"),r=o.length;for(n.style.display="none",e(65).appendChild(n),n.src="javascript:",t=n.contentWindow.document,t.open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;r--;)delete a.prototype[o[r]];return a()};t.exports=Object.create||function(t,n){var e;return null!==t?(c.prototype=r(t),e=new c,c.prototype=null,e[u]=t):e=a(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(105),i=e(63).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(105),i=e(63);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(13);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){"use strict";var r=e(2),i=e(7),o=e(6),u=e(5)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n,e){var r=e(30),i=Math.max,o=Math.min;t.exports=function(t,n){return t=r(t),t<0?i(t+n,0):o(t,n)}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(5)("unscopables"),i=Array.prototype;void 0==i[r]&&e(12)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){var r=e(25),i=e(99),o=e(67),u=e(1),c=e(8),a=e(84),s={},f={},n=t.exports=function(t,n,e,l,h){var p,v,y,d,g=h?function(){return t}:a(t),_=r(e,l,n?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=c(t.length);p>b;b++)if((d=n?_(u(v=t[b])[0],v[1]):_(t[b]))===s||d===f)return d}else for(y=g.call(t);!(v=y.next()).done;)if((d=i(y,_,v.value,n))===s||d===f)return d};n.BREAK=s,n.RETURN=f},function(t,n){t.exports={}},function(t,n,e){var r=e(7).f,i=e(10),o=e(5)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){var r=e(0),i=e(19),o=e(3),u=e(80),c="["+u+"]",a="​",s=RegExp("^"+c+c+"*"),f=RegExp(c+c+"*$"),l=function(t,n,e){var i={},c=o(function(){return!!u[t]()||a[t]()!=a}),s=i[t]=c?n(h):u[t];e&&(i[e]=s),r(r.P+r.F*c,"String",i)},h=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(s,"")),2&n&&(t=t.replace(f,"")),t};t.exports=l},function(t,n,e){var r=e(18),i=e(5)("toStringTag"),o="Arguments"==r(function(){return arguments}()),u=function(t,n){try{return t[n]}catch(t){}};t.exports=function(t){var n,e,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=u(n=Object(t),i))?e:o?r(n):"Object"==(c=r(n))&&"function"==typeof n.callee?"Arguments":c}},function(t,n,e){var r=e(18);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(15),i=e(8),o=e(38);t.exports=function(t){return function(n,e,u){var c,a=r(n),s=i(a.length),f=o(u,s);if(t&&e!=e){for(;s>f;)if((c=a[f++])!=c)return!0}else for(;s>f;f++)if((t||f in a)&&a[f]===e)return t||f||0;return!t&&-1}}},function(t,n,e){"use strict";var r=e(2),i=e(0),o=e(13),u=e(36),c=e(28),a=e(41),s=e(31),f=e(4),l=e(3),h=e(54),p=e(43),v=e(66);t.exports=function(t,n,e,y,d,g){var _=r[t],b=_,k=d?"set":"add",m=b&&b.prototype,w={},x=function(t){var n=m[t];o(m,t,"delete"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(g||m.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,E=S[k](g?{}:-0,1)!=S,O=l(function(){S.has(1)}),F=h(function(t){new b(t)}),P=!g&&l(function(){for(var t=new b,n=5;n--;)t[k](n,n);return!t.has(-0)});F||(b=n(function(n,e){s(n,b,t);var r=v(new _,n,b);return void 0!=e&&a(e,d,r[k],r),r}),b.prototype=m,m.constructor=b),(O||P)&&(x("delete"),x("has"),d&&x("get")),(P||E)&&x(k),g&&m.clear&&delete m.clear}else b=y.getConstructor(n,t,d,k),u(b.prototype,e),c.NEED=!0;return p(b,t),w[t]=b,i(i.G+i.W+i.F*(b!=_),w),g||y.setStrong(b,t,d),b}},function(t,n,e){"use strict";var r=e(12),i=e(13),o=e(3),u=e(19),c=e(5);t.exports=function(t,n,e){var a=c(t),s=e(u,a,""[t]),f=s[0],l=s[1];o(function(){var n={};return n[a]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,f),r(RegExp.prototype,a,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(4),i=e(18),o=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){t.exports=e(32)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(2),i=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,n,e){for(var r,i=e(2),o=e(12),u=e(39),c=u("typed_array"),a=u("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[h[l++]])?(o(r.prototype,c,!0),o(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,null,[{key:"d",value:function(n){t._enable&&console.debug(n)}},{key:"l",value:function(n){t._enable&&console.log(n)}},{key:"e",value:function(n){t._enable&&console.error(n)}},{key:"w",value:function(n){t._enable&&console.warn(n)}},{key:"i",value:function(n){t._enable&&console.info(n)}},{key:"enable",get:function(){return this._enable},set:function(t){this._enable=t}}]),t}();o._enable=!0,n.default=o},function(t,n,e){"use strict";var r=e(9),i=e(38),o=e(8);t.exports=function(t){for(var n=r(this),e=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,e),a=u>2?arguments[2]:void 0,s=void 0===a?e:i(a,e);s>c;)n[c++]=t;return n}},function(t,n,e){"use strict";var r=e(7),i=e(29);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(4),i=e(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){t.exports=e(2).document&&document.documentElement},function(t,n,e){var r=e(4),i=e(74).set;t.exports=function(t,n,e){var o,u=n.constructor;return u!==e&&"function"==typeof u&&(o=u.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(42),i=e(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(18);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){"use strict";var r=e(33),i=e(29),o=e(43),u={};e(12)(u,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){"use strict";var r=e(32),i=e(0),o=e(13),u=e(12),c=e(10),a=e(42),s=e(69),f=e(43),l=e(17),h=e(5)("iterator"),p=!([].keys&&"next"in[].keys()),v=function(){return this};t.exports=function(t,n,e,y,d,g,_){s(e,n,y);var b,k,m,w=function(t){if(!p&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},x=n+" Iterator",S="values"==d,E=!1,O=t.prototype,F=O[h]||O["@@iterator"]||d&&O[d],P=F||w(d),M=d?S?w("entries"):P:void 0,I="Array"==n?O.entries||F:F;if(I&&(m=l(I.call(new t)))!==Object.prototype&&(f(m,x,!0),r||c(m,h)||u(m,h,v)),S&&F&&"values"!==F.name&&(E=!0,P=function(){return F.call(this)}),r&&!_||!p&&!E&&O[h]||u(O,h,P),a[n]=P,a[x]=v,d)if(b={values:S?P:w("values"),keys:g?P:w("keys"),entries:M},_)for(k in b)k in O||o(O,k,b[k]);else i(i.P+i.F*(p||E),n,b);return b}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n,e){var r=e(2),i=e(81).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,a="process"==e(18)(u);t.exports=function(){var t,n,e,s=function(){var r,i;for(a&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(a)e=function(){u.nextTick(s)};else if(o){var f=!0,l=document.createTextNode("");new o(s).observe(l,{characterData:!0}),e=function(){l.data=f=!f}}else if(c&&c.resolve){var h=c.resolve();e=function(){h.then(s)}}else e=function(){i.call(r,s)};return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n,e){var r=e(4),i=e(1),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{r=e(25)(Function.call,e(16).f(Object.prototype,"__proto__").set,2),r(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){var r=e(57)("keys"),i=e(39);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n,e){var r=e(1),i=e(11),o=e(5)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||void 0==(e=r(u)[o])?n:i(e)}},function(t,n,e){var r=e(30),i=e(19);t.exports=function(t){return function(n,e){var o,u,c=String(i(n)),a=r(e),s=c.length;return a<0||a>=s?t?"":void 0:(o=c.charCodeAt(a),o<55296||o>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):o:t?c.slice(a,a+2):u-56320+(o-55296<<10)+65536)}}},function(t,n,e){var r=e(53),i=e(19);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){"use strict";var r=e(30),i=e(19);t.exports=function(t){var n=String(i(this)),e="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(e+=n);return e}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r,i,o,u=e(25),c=e(52),a=e(65),s=e(62),f=e(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,y=0,d={},g=function(){var t=+this;if(d.hasOwnProperty(t)){var n=d[t];delete d[t],n()}},_=function(t){g.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return d[++y]=function(){c("function"==typeof t?t:Function(t),n)},r(y),y},p=function(t){delete d[t]},"process"==e(18)(l)?r=function(t){l.nextTick(u(g,t,1))}:v?(i=new v,o=i.port2,i.port1.onmessage=_,r=u(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",_,!1)):r="onreadystatechange"in s("script")?function(t){a.appendChild(s("script")).onreadystatechange=function(){a.removeChild(this),g.call(t)}}:function(t){setTimeout(u(g,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(2),i=e(6),o=e(32),u=e(58),c=e(12),a=e(36),s=e(3),f=e(31),l=e(30),h=e(8),p=e(34).f,v=e(7).f,y=e(60),d=e(43),g=r.ArrayBuffer,_=r.DataView,b=r.Math,k=r.RangeError,m=r.Infinity,w=g,x=b.abs,S=b.pow,E=b.floor,O=b.log,F=b.LN2,P=i?"_b":"buffer",M=i?"_l":"byteLength",I=i?"_o":"byteOffset",T=function(t,n,e){var r,i,o,u=Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?S(2,-24)-S(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for(t=x(t),t!=t||t===m?(i=t!=t?1:0,r=a):(r=E(O(t)/F),t*(o=S(2,-r))<1&&(r--,o*=2),t+=r+s>=1?f/o:f*S(2,1-s),t*o>=2&&(r++,o/=2),r+s>=a?(i=0,r=a):r+s>=1?(i=(t*o-1)*S(2,n),r+=s):(i=t*S(2,s-1)*S(2,n),r=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(r=r<<n|i,c+=n;c>0;u[l++]=255&r,r/=256,c-=8);return u[--l]|=128*h,u},j=function(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;c>0;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;c>0;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===o)return r?NaN:s?-m:m;r+=S(2,n),f-=u}return(s?-1:1)*r*S(2,f-n)},A=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},N=function(t){return[255&t]},R=function(t){return[255&t,t>>8&255]},D=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},L=function(t){return T(t,52,8)},C=function(t){return T(t,23,4)},U=function(t,n,e){v(t.prototype,n,{get:function(){return this[e]}})},B=function(t,n,e,r){var i=+e,o=l(i);if(i!=o||o<0||o+n>t[M])throw k("Wrong index!");var u=t[P]._b,c=o+t[I],a=u.slice(c,c+n);return r?a:a.reverse()},z=function(t,n,e,r,i,o){var u=+e,c=l(u);if(u!=c||c<0||c+n>t[M])throw k("Wrong index!");for(var a=t[P]._b,s=c+t[I],f=r(+i),h=0;h<n;h++)a[s+h]=f[o?h:n-h-1]},W=function(t,n){f(t,g,"ArrayBuffer");var e=+n,r=h(e);if(e!=r)throw k("Wrong length!");return r};if(u.ABV){if(!s(function(){new g})||!s(function(){new g(.5)})){g=function(t){return new w(W(this,t))};for(var G,K=g.prototype=w.prototype,V=p(w),q=0;V.length>q;)(G=V[q++])in g||c(g,G,w[G]);o||(K.constructor=g)}var Q=new _(new g(2)),H=_.prototype.setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||a(_.prototype,{setInt8:function(t,n){H.call(this,t,n<<24>>24)},setUint8:function(t,n){H.call(this,t,n<<24>>24)}},!0)}else g=function(t){var n=W(this,t);this._b=y.call(Array(n),0),this[M]=n},_=function(t,n,e){f(this,_,"DataView"),f(t,g,"DataView");var r=t[M],i=l(n);if(i<0||i>r)throw k("Wrong offset!");if(e=void 0===e?r-i:h(e),i+e>r)throw k("Wrong length!");this[P]=t,this[I]=i,this[M]=e},i&&(U(g,"byteLength","_l"),U(_,"buffer","_b"),U(_,"byteLength","_l"),U(_,"byteOffset","_o")),a(_.prototype,{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var n=B(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=B(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return A(B(this,4,t,arguments[1]))},getUint32:function(t){return A(B(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return j(B(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return j(B(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){z(this,1,t,N,n)},setUint8:function(t,n){z(this,1,t,N,n)},setInt16:function(t,n){z(this,2,t,R,n,arguments[2])},setUint16:function(t,n){z(this,2,t,R,n,arguments[2])},setInt32:function(t,n){z(this,4,t,D,n,arguments[2])},setUint32:function(t,n){z(this,4,t,D,n,arguments[2])},setFloat32:function(t,n){z(this,4,t,C,n,arguments[2])},setFloat64:function(t,n){z(this,8,t,L,n,arguments[2])}});d(g,"ArrayBuffer"),d(_,"DataView"),c(_.prototype,u.VIEW,!0),n.ArrayBuffer=g,n.DataView=_},function(t,n,e){var r=e(2),i=e(24),o=e(32),u=e(112),c=e(7).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(45),i=e(5)("iterator"),o=e(42);t.exports=e(24).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){"use strict";var r=e(40),i=e(100),o=e(42),u=e(15);t.exports=e(70)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):"keys"==n?i(0,e):"values"==n?i(0,t[e]):i(0,[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=e(124),c=r(u),a=e(123),s=e(125),f=r(s),l=e(87),h=r(l),p=e(59),v=r(p),y=e(119),d=r(y),g=e(122),_=r(g),b=e(121),k=r(b);e(126),e(127);var m=function(){function t(n){var e=this;i(this,t),this.FILE_INPUT_EL_ID="qiniu4js-input",this._taskQueue=[],this._tasking=!1,this._scale=[],this._saveKey=!1,this.handleFiles=function(){if(0!=e.fileInput.files.length){e.generateTask();var t=!1,n=[],r=!0,i=!1,o=void 0;try{for(var u,c=e.taskQueue[Symbol.iterator]();!(r=(u=c.next()).done);r=!0){var a=u.value,s=!0,f=!1,l=void 0;try{for(var h,p=e.interceptors[Symbol.iterator]();!(s=(h=p.next()).done);s=!0){var y=h.value;if(y.onIntercept(a)&&(n.push(a),v.default.d("任务拦截器拦截了任务:"),v.default.d(a)),y.onInterrupt(a)){t=!0;break}}}catch(t){f=!0,l=t}finally{try{!s&&p.return&&p.return()}finally{if(f)throw l}}}}catch(t){i=!0,o=t}finally{try{!r&&c.return&&c.return()}finally{if(i)throw o}}if(t)return void v.default.w("任务拦截器中断了任务队列");var d=!0,g=!1,_=void 0;try{for(var b,k=n[Symbol.iterator]();!(d=(b=k.next()).done);d=!0){var m=b.value,w=e.taskQueue.indexOf(m);-1!=w&&e.taskQueue.splice(w,1)}}catch(t){g=!0,_=t}finally{try{!d&&k.return&&k.return()}finally{if(g)throw _}}e.listener.onReady(e.taskQueue),e.handleImages().then(function(){e.auto&&(v.default.d("开始自动上传"),e.start())})}},this.resolveUUID=function(t){var n=/\$\(uuid\)/;return n.test(t)?t.replace(n,f.default.uuid()):t},this.resolveImageInfo=function(t,n){var e=/\$\(imageInfo\.width\)/,r=/\$\(imageInfo\.height\)/;return e.test(n)||r.test(n)?new Promise(function(i){var o=new Image;o.src=URL.createObjectURL(t),o.onload=function(){n=n.replace(e,o.width.toString()),n=n.replace(r,o.height.toString()),i(n)}}):Promise.resolve(n)},this.onSaveKeyResolved=function(t){return e._tokenShare=e._tokenShare&&e._saveKey==t,t},this._retry=n.getRetry,this._size=n.getSize,this._chunk=n.getChunk,this._auto=n.getAuto,this._multiple=n.getMultiple,this._accept=n.getAccept,this._button=n.getButton,this._buttonEventName=n.getButtonEventName,this._compress=n.getCompress,this._scale=n.getScale,this._saveKey=n.getSaveKey,this._tokenFunc=n.getTokenFunc,this._tokenShare=n.getTokenShare,this._listener=Object.assign(new d.default,n.getListener),this._interceptors=n.getInterceptors,this._domain=n.getDomain,this._fileInputId=this.FILE_INPUT_EL_ID+"_"+(new Date).getTime(),v.default.enable=n.getIsDebug,this.validateOptions(),this.init()}return o(t,[{key:"init",value:function(){this.initFileInputEl()}},{key:"initFileInputEl",value:function(){var t=document.getElementById(this._fileInputId);if(this._fileInput=t||document.createElement("input"),this.fileInput.type="file",this.fileInput.id=this._fileInputId,this.fileInput.style.display="none",this.multiple&&(this.fileInput.multiple=!0),this.accept&&0!=this.accept.length){var n="",e=!0,r=!1,i=void 0;try{for(var o,u=this.accept[Symbol.iterator]();!(e=(o=u.next()).done);e=!0){n+=o.value,n+=","}}catch(t){r=!0,i=t}finally{try{!e&&u.return&&u.return()}finally{if(r)throw i}}n.endsWith(",")&&(n=n.substring(0,n.length-1)),this.fileInput.accept=n,v.default.d("accept类型 "+n)}if(document.body.appendChild(this.fileInput),this.fileInput.addEventListener("change",this.handleFiles,!1),void 0!=this._button){document.getElementById(this._button).addEventListener(this._buttonEventName,this.chooseFile.bind(this))}}},{key:"resetUploader",value:function(){v.default.d("开始重置 uploader"),this.taskQueue.length=0,v.default.d("任务队列已清空"),this._token=null,v.default.d("token已清空"),v.default.d("uploader 重置完毕")}},{key:"generateTask",value:function(){this.resetUploader();for(var t=this.fileInput.files,n=0;n<this.fileInput.files.length;n++){var e=t[n],r=void 0;r=this.chunk&&e.size>h.default.BLOCK_SIZE?new a.ChunkTask(e,h.default.BLOCK_SIZE,this.size):new c.default(e),0==this._saveKey&&(r.key=this.listener.onTaskGetKey(r)),this.taskQueue.push(r)}}},{key:"handleImages",value:function(){var n=this,e=[];if(1!=this.compress||0!=this.scale[0]||0!=this.scale[1]){var r=!0,i=!1,o=void 0;try{for(var u,c=this.taskQueue[Symbol.iterator]();!(r=(u=c.next()).done);r=!0){(function(){var r=u.value;if(!r.file.type.match("image.*"))return"continue";v.default.d(r.file.name+" 处理前的图片大小:"+r.file.size/1024+" kb");var i=document.createElement("canvas"),o=new Image,c=i.getContext("2d");o.src=URL.createObjectURL(r.file);var a=n;e.push(new Promise(function(t){return o.onload=function(){var n=o.width,e=o.height,u=a.scale[0],s=a.scale[1];0==u&&s>0?(i.width=n/e*s,i.height=s):0==s&&u>0?(i.width=u,i.height=e/n*u):u>0&&s>0?(i.width=u,i.height=s):(i.width=o.width,i.height=o.height),c.drawImage(o,0,0,i.width,i.height),console.log(i),console.log(i.toBlob),i.toBlob(function(n){t(n),v.default.d(r.file.name+" 处理后的图片大小:"+n.size/1024+" kb")},"image/jpeg",.95*a.compress)}}).then(function(n){n.name=r.file.name,r.file=n,t.isChunkTask(r)&&r.spliceFile2Block()}))})()}}catch(t){i=!0,o=t}finally{try{!r&&c.return&&c.return()}finally{if(i)throw o}}}return Promise.all(e)}},{key:"validateOptions",value:function(){if(v.default.d("开始检查构建参数合法性"),!this._tokenFunc)throw new Error("你必须提供一个获取Token的回调函数");if(!this.scale||!(this.scale instanceof Array)||2!=this.scale.length||this.scale[0]<0||this.scale[1]<0)throw new Error("scale必须是长度为2的number类型的数组,scale[0]为宽度，scale[1]为长度,必须大于等于0");v.default.d("构建参数检查完毕")}},{key:"start",value:function(){if(v.default.d("上传任务遍历开始"),0==this.fileInput.files.length)throw new Error("没有选中的文件，无法开始上传");if(this.tasking)throw new Error("任务执行中，请不要重复上传");this.listener.onStart(this.taskQueue);var n=!0,e=!1,r=void 0;try{for(var i,o=this.taskQueue[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var u=i.value;if(v.default.d("上传文件名："+u.file.name),v.default.d("上传文件大小："+u.file.size+"字节，"+u.file.size/1024+" kb，"+u.file.size/1024/1024+" mb"),t.isDirectTask(u))v.default.d("该上传任务为直传任务"),new _.default(this).upload(u);else{if(!t.isChunkTask(u))throw new Error("非法的task类型");v.default.d("该上传任务为分片任务"),new k.default(this).upload(u)}}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}}},{key:"isTaskQueueFinish",value:function(){var t=!0,n=!1,e=void 0;try{for(var r,i=this.taskQueue[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){if(!r.value.isFinish)return!1}}catch(t){n=!0,e=t}finally{try{!t&&i.return&&i.return()}finally{if(n)throw e}}return!0}},{key:"chooseFile",value:function(){this.fileInput.click()}},{key:"getToken",value:function(t){var n=this;return this._tokenShare&&void 0!=this._token?Promise.resolve(this._token):(v.default.d("开始获取上传token"),Promise.resolve(this._tokenFunc(this,t)).then(function(t){return v.default.d("上传token获取成功: "+t),n._token=t,t}))}},{key:"requestTaskToken",value:function(t,n){var e=this;return this.resolveSaveKey(t).then(function(t){return e.requestToken(n,t)})}},{key:"requestToken",value:function(t,n){return new Promise(function(e,r){"string"==typeof n&&(t+=(/\?/.test(t)?"&":"?")+"saveKey="+encodeURIComponent(n)),t+=(/\?/.test(t)?"&":"?")+(new Date).getTime();var i=new XMLHttpRequest;i.open("GET",t,!0),i.onreadystatechange=function(){if(i.readyState==XMLHttpRequest.DONE)return 200==i.status?void e(i.response.uptoken):void r(i.response)},i.onabort=function(){r("aborted")},i.responseType="json",i.send()})}},{key:"resolveSaveKey",value:function(t){var n=this,e=this._saveKey;return"string"!=typeof e?Promise.resolve(void 0):Promise.resolve(e).then(this.resolveUUID).then(function(e){return n.resolveImageInfo(t.file,e)}).then(this.onSaveKeyResolved)}},{key:"retry",get:function(){return this._retry}},{key:"size",get:function(){return this._size}},{key:"auto",get:function(){return this._auto}},{key:"multiple",get:function(){return this._multiple}},{key:"accept",get:function(){return this._accept}},{key:"compress",get:function(){return this._compress}},{key:"scale",get:function(){return this._scale}},{key:"listener",get:function(){return this._listener}},{key:"fileInput",get:function(){return this._fileInput}},{key:"chunk",get:function(){return this._chunk}},{key:"taskQueue",get:function(){return this._taskQueue}},{key:"tasking",get:function(){return this._tasking},set:function(t){this._tasking=t}},{key:"interceptors",get:function(){return this._interceptors}},{key:"domain",get:function(){return this._domain}}],[{key:"isChunkTask",value:function(t){return t.constructor.name===a.ChunkTask.name&&t instanceof a.ChunkTask}},{key:"isDirectTask",value:function(t){return t.constructor.name===c.default.name&&t instanceof c.default}}]),t}();n.default=m},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=e(86),c=r(u),a=e(120),s=r(a),f=function(){function t(){i(this,t),this._retry=0,this._domain=t.UPLOAD_DOMAIN,this._scheme=null,this._size=1048576,this._chunk=!0,this._auto=!0,this._multiple=!0,this._accept=[],this._compress=1,this._scale=[0,0],this._saveKey=!1,this._tokenShare=!0,this._interceptors=[],this._isDebug=!1}return o(t,[{key:"domain",value:function(t){return this._domain=t,this}},{key:"scheme",value:function(t){return this._scheme=t,this}},{key:"interceptor",value:function(t){return this._interceptors.push(Object.assign(new s.default,t)),this}},{key:"retry",value:function(t){return this._retry=t,this}},{key:"auto",value:function(t){return this._auto=t,this}},{key:"multiple",value:function(t){return this._multiple=t,this}},{key:"accept",value:function(t){return this._accept=t,this}},{key:"button",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"click";return this._button=t,this._buttonEventName=n,this}},{key:"compress",value:function(t){return this._compress=Math.max(Math.min(t,1),0),this}},{key:"scale",value:function(t){return this._scale=t,this}},{key:"saveKey",value:function(t){return this._saveKey=t,this}},{key:"tokenUrl",value:function(t){return this._tokenFunc=function(n,e){return n.requestTaskToken(e,t)},this}},{key:"tokenFunc",value:function(t){return this._tokenFunc=function(n,e){return new Promise(function(n){t(n,e)})},this}},{key:"listener",value:function(t){return this._listener=t,this}},{key:"tokenShare",value:function(t){return this._tokenShare=t,this}},{key:"chunk",value:function(t){return this._chunk=t,this}},{key:"debug",value:function(t){return this._isDebug=t,this}},{key:"build",value:function(){return new c.default(this)}},{key:"getRetry",get:function(){return this._retry}},{key:"getSize",get:function(){return this._size}},{key:"getAuto",get:function(){return this._auto}},{key:"getMultiple",get:function(){return this._multiple}},{key:"getAccept",get:function(){return this._accept}},{key:"getButton",get:function(){return this._button}},{key:"getButtonEventName",get:function(){return this._buttonEventName}},{key:"getCompress",get:function(){return this._compress}},{key:"getScale",get:function(){return this._scale}},{key:"getListener",get:function(){return this._listener}},{key:"getSaveKey",get:function(){return this._saveKey}},{key:"getTokenFunc",get:function(){return this._tokenFunc}},{key:"getTokenShare",get:function(){return this._tokenShare}},{key:"getChunk",get:function(){return this._chunk}},{key:"getIsDebug",get:function(){return this._isDebug}},{key:"getInterceptors",get:function(){return this._interceptors}},{key:"getDomain",get:function(){var n=this._domain;if(n||(n=t.UPLOAD_DOMAIN),"string"!=typeof n){var e=this._scheme;if("string"!=typeof e){var r=window.location.protocol;e=r.substring(0,r.length-1)}n=n[e]}return n.endsWith("/")?n.substring(0,n.length-1):n}}]),t}();f.MAX_CHUNK_SIZE=4194304,f.BLOCK_SIZE=f.MAX_CHUNK_SIZE,f.UPLOAD_DOMAIN={http:"http://upload.qiniu.com",https:"https://up.qbox.me"},n.default=f},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(n){r(this,t),this._retry=0,this._progress=0,this._isSuccess=!1,this._isFinish=!1,this._file=n,this._createDate=new Date}return i(t,[{key:"file",get:function(){return this._file},set:function(t){this._file=t}},{key:"retry",get:function(){return this._retry},set:function(t){this._retry=t}},{key:"createDate",get:function(){return this._createDate},set:function(t){this._createDate=t}},{key:"startDate",get:function(){return this._startDate},set:function(t){this._startDate=t}},{key:"endDate",get:function(){return this._endDate},set:function(t){this._endDate=t}},{key:"isSuccess",get:function(){return this._isSuccess},set:function(t){this._isSuccess=t}},{key:"progress",get:function(){return this._progress},set:function(t){this._progress=Math.min(Math.max(0,t),100)}},{key:"result",get:function(){return this._result},set:function(t){this._result=t}},{key:"error",get:function(){return this._error},set:function(t){this._error=t}},{key:"key",get:function(){return this._key},set:function(t){this._key=t}},{key:"isFinish",get:function(){return this._isFinish},set:function(t){this._isFinish=t}}]),t}();n.default=o},function(t,n,e){var r=e(18);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){"use strict";var r=e(9),i=e(38),o=e(8);t.exports=[].copyWithin||function(t,n){var e=r(this),u=o(e.length),c=i(t,u),a=i(n,u),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?u:i(s,u))-a,u-c),l=1;for(a<c&&c<a+f&&(l=-1,a+=f-1,c+=f-1);f-- >0;)a in e?e[c]=e[a]:delete e[c],c+=l,a+=l;return e}},function(t,n,e){var r=e(41);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n,e){var r=e(11),i=e(9),o=e(46),u=e(8);t.exports=function(t,n,e,c,a){r(n);var s=i(t),f=o(s),l=u(s.length),h=a?l-1:0,p=a?-1:1;if(e<2)for(;;){if(h in f){c=f[h],h+=p;break}if(h+=p,a?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;a?h>=0:l>h;h+=p)h in f&&(c=n(c,f[h],h,s));return c}},function(t,n,e){"use strict";var r=e(11),i=e(4),o=e(52),u=[].slice,c={},a=function(t,n,e){if(!(n in c)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";c[n]=Function("F,a","return new F("+r.join(",")+")")}return c[n](t,e)};t.exports=Function.bind||function(t){var n=r(this),e=u.call(arguments,1),c=function(){var r=e.concat(u.call(arguments));return this instanceof c?a(n,r.length,r):o(n,r,t)};return i(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n,e){"use strict";var r=e(7).f,i=e(33),o=e(36),u=e(25),c=e(31),a=e(19),s=e(41),f=e(70),l=e(100),h=e(37),p=e(6),v=e(28).fastKey,y=p?"_s":"size",d=function(t,n){var e,r=v(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,f){var l=t(function(t,r){c(t,l,n,"_i"),t._i=i(null),t._f=void 0,t._l=void 0,t[y]=0,void 0!=r&&s(r,e,t[f],t)});return o(l.prototype,{clear:function(){for(var t=this,n=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete n[e.i];t._f=t._l=void 0,t[y]=0},delete:function(t){var n=this,e=d(n,t);if(e){var r=e.n,i=e.p;delete n._i[e.i],e.r=!0,i&&(i.n=r),r&&(r.p=i),n._f==e&&(n._f=r),n._l==e&&(n._l=i),n[y]--}return!!e},forEach:function(t){c(this,l,"forEach");for(var n,e=u(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(e(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!d(this,t)}}),p&&r(l.prototype,"size",{get:function(){return a(this[y])}}),l},def:function(t,n,e){var r,i,o=d(t,n);return o?o.v=e:(t._l=o={i:i=v(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[y]++,"F"!==i&&(t._i[i]=o)),t},getEntry:d,setStrong:function(t,n,e){f(t,n,function(t,n){this._t=t,this._k=n,this._l=void 0},function(){for(var t=this,n=t._k,e=t._l;e&&e.r;)e=e.p;return t._t&&(t._l=e=e?e.n:t._t._f)?"keys"==n?l(0,e.k):"values"==n?l(0,e.v):l(0,[e.k,e.v]):(t._t=void 0,l(1))},e?"entries":"values",!e,!0),h(n)}}},function(t,n,e){var r=e(45),i=e(91);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,e){"use strict";var r=e(36),i=e(28).getWeak,o=e(1),u=e(4),c=e(31),a=e(41),s=e(21),f=e(10),l=s(5),h=s(6),p=0,v=function(t){return t._l||(t._l=new y)},y=function(){this.a=[]},d=function(t,n){return l(t.a,function(t){return t[0]===n})};y.prototype={get:function(t){var n=d(this,t);if(n)return n[1]},has:function(t){return!!d(this,t)},set:function(t,n){var e=d(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=h(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,o){var s=t(function(t,r){c(t,s,n,"_i"),t._i=p++,t._l=void 0,void 0!=r&&a(r,e,t[o],t)});return r(s.prototype,{delete:function(t){if(!u(t))return!1;var n=i(t);return!0===n?v(this).delete(t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!u(t))return!1;var n=i(t);return!0===n?v(this).has(t):n&&f(n,this._i)}}),s},def:function(t,n,e){var r=i(o(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){t.exports=!e(6)&&!e(3)(function(){return 7!=Object.defineProperty(e(62)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n,e){var r=e(1);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){"use strict";var r=e(35),i=e(56),o=e(47),u=e(9),c=e(46),a=Object.assign;t.exports=!a||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=a({},t)[e]||Object.keys(a({},n)).join("")!=r})?function(t,n){for(var e=u(t),a=arguments.length,s=1,f=i.f,l=o.f;a>s;)for(var h,p=c(arguments[s++]),v=f?r(p).concat(f(p)):r(p),y=v.length,d=0;y>d;)l.call(p,h=v[d++])&&(e[h]=p[h]);return e}:a},function(t,n,e){var r=e(7),i=e(1),o=e(35);t.exports=e(6)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),c=u.length,a=0;c>a;)r.f(t,e=u[a++],n[e]);return t}},function(t,n,e){var r=e(15),i=e(34).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return i(t)}catch(t){return u.slice()}};t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?c(t):i(r(t))}},function(t,n,e){var r=e(10),i=e(15),o=e(48)(!1),u=e(75)("IE_PROTO");t.exports=function(t,n){var e,c=i(t),a=0,s=[];for(e in c)e!=u&&r(c,e)&&s.push(e);for(;n.length>a;)r(c,e=n[a++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(35),i=e(15),o=e(47).f;t.exports=function(t){return function(n){for(var e,u=i(n),c=r(u),a=c.length,s=0,f=[];a>s;)o.call(u,e=c[s++])&&f.push(t?[e,u[e]]:u[e]);return f}}},function(t,n,e){var r=e(34),i=e(56),o=e(1),u=e(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){var r=e(2).parseFloat,i=e(44).trim;t.exports=1/r(e(80)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(2).parseInt,i=e(44).trim,o=e(80),u=/^[\-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){var r=e(8),i=e(79),o=e(19);t.exports=function(t,n,e,u){var c=String(o(t)),a=c.length,s=void 0===e?" ":String(e),f=r(n);if(f<=a||""==s)return c;var l=f-a,h=i.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},function(t,n,e){n.f=e(5)},function(t,n,e){"use strict";var r=e(94);t.exports=e(49)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(this,t);return n&&n.v},set:function(t,n){return r.def(this,0===t?0:t,n)}},r,!0)},function(t,n,e){e(6)&&"g"!=/./g.flags&&e(7).f(RegExp.prototype,"flags",{configurable:!0,get:e(51)})},function(t,n,e){"use strict";var r=e(94);t.exports=e(49)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(this,t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,i=e(21)(0),o=e(13),u=e(28),c=e(102),a=e(96),s=e(4),f=u.getWeak,l=Object.isExtensible,h=a.ufstore,p={},v=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(s(t)){var n=f(t);return!0===n?h(this).get(t):n?n[this._i]:void 0}},set:function(t,n){return a.def(this,t,n)}},d=t.exports=e(49)("WeakMap",v,y,a,!0,!0);7!=(new d).set((Object.freeze||Object)(p),7).get(p)&&(r=a.getConstructor(v),c(r.prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=d.prototype,e=n[t];o(n,t,function(n,i){if(s(n)&&!l(n)){this._f||(this._f=new r);var o=this._f[t](n,i);return"set"==t?this:o}return e.call(this,n,i)})}))},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(n,"__esModule",{value:!0}),n.UploaderBuilder=n.Uploader=void 0;var i=e(86),o=r(i),u=e(87),c=r(u);n.Uploader=o.default,n.UploaderBuilder=c.default},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,[{key:"onReady",value:function(t){}},{key:"onStart",value:function(t){}},{key:"onTaskProgress",value:function(t){}},{key:"onTaskGetKey",value:function(t){return null}},{key:"onTaskFail",value:function(t){}},{key:"onTaskSuccess",value:function(t){}},{key:"onTaskRetry",value:function(t){}},{key:"onFinish",value:function(t){}}]),t}();n.default=o},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,[{key:"onIntercept",value:function(t){return!1}},{key:"onInterrupt",value:function(t){return!1}}]),t}();n.default=o},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=e(59),u=function(t){return t&&t.__esModule?t:{default:t}}(o),c=function(){function t(n){r(this,t),this.uploader=n}return i(t,[{key:"init",value:function(t){this.uploader=t}},{key:"upload",value:function(t){var n=this;this.task=t,this.uploader.getToken(t).then(function(e){t.startDate=new Date,n.uploadBlock(e)})}},{key:"uploadBlock",value:function(t){var n=this;u.default.d("准备开始上传块");var e=Promise.resolve();u.default.d("共"+this.task.blocks.length+"块等待上传"),u.default.d("共"+this.task.totalChunkCount+"分片等待上传"),this.task.blocks.forEach(function(r,i){r.chunks.forEach(function(r,o){e=e.then(function(){return u.default.d("开始上传第"+(i+1)+"块,第"+(o+1)+"片"),n.uploadChunk(r,t)})})}),e.then(function(){return n.concatChunks(t)}).then(function(){n.uploader.isTaskQueueFinish()&&(u.default.d("上传任务队列已结束"),n.uploader.tasking=!1,n.uploader.listener.onFinish(n.uploader.taskQueue))}).catch(function(t){u.default.w(n.task.file.name+"分块上传失败"),n.task.error=t,n.task.isSuccess=!1,n.task.isFinish=!0,n.task.endDate=new Date,n.uploader.listener.onTaskFail(n.task)})}},{key:"uploadChunk",value:function(t,n){var e=this;return new Promise(function(r,i){var o=0==t.block.chunks.indexOf(t),u=t.block.chunks.indexOf(t),c=o?null:t.block.chunks[u-1],a=o?e.getUploadBlockUrl(t.block.data.size):e.getUploadChunkUrl(t.start,c?c.ctx:null,c?c.host:null),s=new XMLHttpRequest;s.open("POST",a+=(/\?/.test(a)?"&":"?")+(new Date).getTime(),!0),s.setRequestHeader("Content-Type","application/octet-stream"),s.setRequestHeader("Authorization","UpToken "+n),s.upload.onprogress=function(n){if(n.lengthComputable){var r=Math.round((e.task.finishedBlocksSize+t.start+n.loaded)/e.task.file.size*100);e.task.progress<r&&(e.task.progress=r,e.uploader.listener.onTaskProgress(e.task))}},s.upload.onload=function(){var n=Math.round((e.task.finishedBlocksSize+t.start+t.data.size)/e.task.file.size*100);e.task.progress<n&&(e.task.progress=n,e.uploader.listener.onTaskProgress(e.task))},s.onreadystatechange=function(){if(s.readyState==XMLHttpRequest.DONE)if(200==s.status&&""!=s.responseText){var n=JSON.parse(s.responseText);t.isFinish=!0,t.processing=!1,t.ctx=n.ctx,t.host=n.host;var e=t.block.chunks.indexOf(t),o=e!=t.block.chunks.length-1;o||(t.block.isFinish=!0,t.block.processing=!1),r()}else i(s.response)},s.send(t.data)})}},{key:"concatChunks",value:function(t){var n=this;return new Promise(function(e,r){var i=n.task.key?btoa(n.task.key):null;i&&(i=i.replace(/\+/g,"-"),i=i.replace(/\//g,"_"));var o=n.getMakeFileUrl(n.task.file.size,i),c="",a=!0,s=!1,f=void 0;try{for(var l,h=n.task.blocks[Symbol.iterator]();!(a=(l=h.next()).done);a=!0){var p=l.value;c+=p.chunks[p.chunks.length-1].ctx+","}}catch(t){s=!0,f=t}finally{try{!a&&h.return&&h.return()}finally{if(s)throw f}}c.endsWith(",")&&(c=c.substring(0,c.length-1));var v=new XMLHttpRequest;v.open("POST",o+=(/\?/.test(o)?"&":"?")+(new Date).getTime(),!0),v.setRequestHeader("Content-Type","text/plain"),v.setRequestHeader("Authorization","UpToken "+t),v.onreadystatechange=function(){if(v.readyState==XMLHttpRequest.DONE)if(n.task.isFinish=!0,200==v.status&&""!=v.responseText){var t=JSON.parse(v.responseText);n.task.isSuccess=!0,n.task.result=t,n.task.endDate=new Date,n.uploader.listener.onTaskSuccess(n.task),e()}else n.retryTask(n.task)?(u.default.w(n.task.file.name+"分块上传失败,准备开始重传"),n.uploader.listener.onTaskRetry(n.task)):r(v.response)},v.send(c)})}},{key:"getUploadBlockUrl",value:function(t){return this.uploader.domain+"/mkblk/"+t}},{key:"getUploadChunkUrl",value:function(t,n,e){return(e||this.uploader.domain)+"/bput/"+n+"/"+t+"/"}},{key:"getMakeFileUrl",value:function(t,n){return n?this.uploader.domain+"/mkfile/"+t+"/key/"+n:this.uploader.domain+"/mkfile/"+t}},{key:"retryTask",value:function(t){return t.retry>=this.uploader.retry?(u.default.w(t.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(t.retry++,u.default.w(t.file.name+"开始重传,当前重传次数"+t.retry),!0)}}]),t}();n.default=c},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=e(59),u=function(t){return t&&t.__esModule?t:{default:t}}(o),c=function(){function t(n){r(this,t),this.uploader=n}return i(t,[{key:"upload",value:function(t){var n=this;this.task=t,this.uploader.getToken(t).then(function(e){t.startDate=new Date,n.uploadFile(e)})}},{key:"createFormData",value:function(t){var n=this.task,e=new FormData;return null!==n.key&&void 0!==n.key&&e.append("key",n.key),e.append("token",t),e.append("file",n.file),u.default.d("创建formData对象"),e}},{key:"uploadFile",value:function(t){var n=this,e=this.task,r=new XMLHttpRequest;r.upload.onprogress=function(t){if(t.lengthComputable){var r=Math.round(100*t.loaded/t.total);e.progress<r&&(e.progress=r,n.uploader.listener.onTaskProgress(e))}},r.upload.onload=function(){e.progress<100&&(e.progress=100,n.uploader.listener.onTaskProgress(e))};var i=this.uploader.domain;i+=(/\?/.test(this.uploader.domain)?"&":"?")+(new Date).getTime(),r.open("POST",i,!0),r.onreadystatechange=function(){r.readyState==XMLHttpRequest.DONE&&(200==r.status&&""!=r.responseText?(e.result=JSON.parse(r.responseText),e.isSuccess=!0,e.isFinish=!0,e.endDate=new Date,n.uploader.listener.onTaskSuccess(e)):n.retryTask(e)?(u.default.w(e.file.name+"上传失败,准备开始重传"),n.uploader.listener.onTaskRetry(e)):(u.default.w(e.file.name+"上传失败"),e.error=r.response,e.isSuccess=!1,e.isFinish=!0,e.endDate=new Date,n.uploader.listener.onTaskFail(e)),n.uploader.isTaskQueueFinish()&&(n.uploader.tasking=!1,n.uploader.listener.onFinish(n.uploader.taskQueue)))};var o=this.createFormData(t);r.send(o),u.default.d("发送ajax post 请求")}},{key:"retryTask",value:function(t){return u.default.d("开始尝试重传"),t.retry>=this.uploader.retry?(u.default.w(t.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(t.retry++,u.default.w(t.file.name+"开始重传,当前重传次数"+t.retry),this.upload(t),!0)}}]),t}();n.default=c},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0}),n.Chunk=n.Block=n.ChunkTask=void 0;var u=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),c=e(88),a=function(t){return t&&t.__esModule?t:{default:t}}(c),s=function(t){function n(t,e,o){r(this,n);var u=i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));return u._blocks=[],u._blockSize=0,u._chunkSize=0,u._blockSize=e,u._chunkSize=o,u.spliceFile2Block(),u}return o(n,t),u(n,[{key:"spliceFile2Block",value:function(){this._blocks=[];for(var t=this._file.size,n=this._file,e=Math.ceil(t/this._blockSize),r=0;r<e;r++){var i=r*this._blockSize,o=i+this._blockSize,u=new f(i,o,n.slice(i,o),this._chunkSize,n);this._blocks.push(u)}}},{key:"blocks",get:function(){return this._blocks}},{key:"processingBlock",get:function(){var t=!0,n=!1,e=void 0;try{for(var r,i=this._blocks[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.processing)return o}}catch(t){n=!0,e=t}finally{try{!t&&i.return&&i.return()}finally{if(n)throw e}}throw Error("找不到正在处理的Block")}},{key:"finishedBlocksSize",get:function(){var t=0,n=!0,e=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var u=i.value;t+=u.isFinish?u.data.size:0}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}return t}},{key:"chunks",get:function(){var t=[],n=!0,e=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var u=i.value,c=!0,a=!1,s=void 0;try{for(var f,l=u.chunks[Symbol.iterator]();!(c=(f=l.next()).done);c=!0){var h=f.value;t.push(h)}}catch(t){a=!0,s=t}finally{try{!c&&l.return&&l.return()}finally{if(a)throw s}}}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}return t}},{key:"processingChunk",get:function(){var t=!0,n=!1,e=void 0;try{for(var r,i=this._blocks[Symbol.iterator]();!(t=(r=i.next()).done);t=!0){var o=r.value;if(o.processing){var u=!0,c=!1,a=void 0;try{for(var s,f=o.chunks[Symbol.iterator]();!(u=(s=f.next()).done);u=!0){var l=s.value;if(l.processing)return l}}catch(t){c=!0,a=t}finally{try{!u&&f.return&&f.return()}finally{if(c)throw a}}}}}catch(t){n=!0,e=t}finally{try{!t&&i.return&&i.return()}finally{if(n)throw e}}throw Error("找不到正在处理的Chunk")}},{key:"totalChunkCount",get:function(){var t=0,n=!0,e=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){t+=i.value.chunks.length}}catch(t){e=!0,r=t}finally{try{!n&&o.return&&o.return()}finally{if(e)throw r}}return t}}]),n}(a.default),f=function(){function t(n,e,i,o,u){r(this,t),this._chunks=[],this._isFinish=!1,this._processing=!1,this._data=i,this._start=n,this._end=e,this._file=u,this.spliceBlock2Chunk(o)}return u(t,[{key:"spliceBlock2Chunk",value:function(t){for(var n=this._data.size,e=this._data,r=Math.ceil(n/t),i=0;i<r;i++){var o=i*t,u=o+t,c=new l(o,u,e.slice(o,u),this);this._chunks.push(c)}}},{key:"processing",get:function(){return this._processing},set:function(t){this._processing=t}},{key:"file",get:function(){return this._file}},{key:"isFinish",get:function(){return this._isFinish},set:function(t){this._isFinish=t}},{key:"data",get:function(){return this._data}},{key:"start",get:function(){return this._start}},{key:"end",get:function(){return this._end}},{key:"chunks",get:function(){return this._chunks}}]),t}(),l=function(){function t(n,e,i,o){r(this,t),this._processing=!1,this._isFinish=!1,this._start=n,this._end=e,this._data=i,this._block=o}return u(t,[{key:"block",get:function(){return this._block}},{key:"start",get:function(){return this._start}},{key:"end",get:function(){return this._end}},{key:"data",get:function(){return this._data}},{key:"isFinish",get:function(){return this._isFinish},set:function(t){this._isFinish=t}},{key:"host",get:function(){return this._host},set:function(t){this._host=t}},{key:"processing",get:function(){return this._processing},set:function(t){this._processing=t}},{key:"ctx",get:function(){return this._ctx},set:function(t){this._ctx=t}}]),t}();n.ChunkTask=s,n.Block=f,n.Chunk=l},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function i(t,n){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?t:n}function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n)}Object.defineProperty(n,"__esModule",{value:!0});var u=e(88),c=function(t){return t&&t.__esModule?t:{default:t}}(u),a=function(t){function n(){return r(this,n),i(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return o(n,t),n}(c.default);n.default=a},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),o=function(){function t(){r(this,t)}return i(t,null,[{key:"uuid",value:function(){var t=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){var e=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"==n?e:3&e|8).toString(16)})}}]),t}();n.default=o},function(t,n,e){"use strict";HTMLCanvasElement.prototype.toBlob||Object.defineProperty(HTMLCanvasElement.prototype,"toBlob",{value:function(t,n,e){for(var r=atob(this.toDataURL(n,e).split(",")[1]),i=r.length,o=new Uint8Array(i),u=0;u<i;u++)o[u]=r.charCodeAt(u);t(new Blob([o],{type:n||"image/png"}))}})},function(t,n,e){"use strict";(function(t){function n(t,n,e){t[n]||Object[r](t,n,{writable:!0,configurable:!0,value:e})}if(e(308),e(309),e(128),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var r="defineProperty";n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(n,e(117))},function(t,n,e){e(137),t.exports=e(24).RegExp.escape},function(t,n,e){var r=e(4),i=e(68),o=e(5)("species");t.exports=function(t){var n;return i(t)&&(n=t.constructor,"function"!=typeof n||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){var r=e(129);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var r=e(1),i=e(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(35),i=e(56),o=e(47);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var u,c=e(t),a=o.f,s=0;c.length>s;)a.call(t,u=c[s++])&&n.push(u);return n}},function(t,n,e){var r=e(35),i=e(15);t.exports=function(t,n){for(var e,o=i(t),u=r(o),c=u.length,a=0;c>a;)if(o[e=u[a++]]===n)return e}},function(t,n,e){"use strict";var r=e(135),i=e(52),o=e(11);t.exports=function(){for(var t=o(this),n=arguments.length,e=Array(n),u=0,c=r._,a=!1;n>u;)(e[u]=arguments[u++])===c&&(a=!0);return function(){var r,o=this,u=arguments.length,s=0,f=0;if(!a&&!u)return i(t,e,o);if(r=e.slice(),a)for(;n>s;s++)r[s]===c&&(r[s]=arguments[f++]);for(;u>f;)r.push(arguments[f++]);return i(t,r,o)}}},function(t,n,e){t.exports=e(2)},function(t,n){t.exports=function(t,n){var e=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,e)}}},function(t,n,e){var r=e(0),i=e(136)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(90)}),e(40)("copyWithin")},function(t,n,e){"use strict";var r=e(0),i=e(21)(4);r(r.P+r.F*!e(20)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(60)}),e(40)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(21)(2);r(r.P+r.F*!e(20)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(21)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)(o)},function(t,n,e){"use strict";var r=e(0),i=e(21)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("find")},function(t,n,e){"use strict";var r=e(0),i=e(21)(0),o=e(20)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(25),i=e(0),o=e(9),u=e(99),c=e(67),a=e(8),s=e(61),f=e(84);i(i.S+i.F*!e(54)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,y=v>1?arguments[1]:void 0,d=void 0!==y,g=0,_=f(h);if(d&&(y=r(y,v>2?arguments[2]:void 0,2)),void 0==_||p==Array&&c(_))for(n=a(h.length),e=new p(n);n>g;g++)s(e,g,d?y(h[g],g):h[g]);else for(l=_.call(h),e=new p;!(i=l.next()).done;g++)s(e,g,d?u(l,y,[i.value,g],!0):i.value);return e.length=g,e}})},function(t,n,e){"use strict";var r=e(0),i=e(48)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(20)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(68)})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=[].join;r(r.P+r.F*(e(46)!=Object||!e(20)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=e(30),u=e(8),c=[].lastIndexOf,a=!!c&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(a||!e(20)(c)),"Array",{lastIndexOf:function(t){if(a)return c.apply(this,arguments)||0;var n=i(this),e=u(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){"use strict";var r=e(0),i=e(21)(1);r(r.P+r.F*!e(20)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(61);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(92);r(r.P+r.F*!e(20)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(92);r(r.P+r.F*!e(20)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(65),o=e(18),u=e(38),c=e(8),a=[].slice;r(r.P+r.F*e(3)(function(){i&&a.call(i)}),"Array",{slice:function(t,n){var e=c(this.length),r=o(this);if(n=void 0===n?e:n,"Array"==r)return a.call(this,t,n);for(var i=u(t,e),s=u(n,e),f=c(s-i),l=Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(i+h):this[i+h];return l}})},function(t,n,e){"use strict";var r=e(0),i=e(21)(3);r(r.P+r.F*!e(20)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),i=e(11),o=e(9),u=e(3),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(20)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,n,e){e(37)("Array")},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=Date.prototype.getTime,u=function(t){return t>9?t:"0"+t};r(r.P+r.F*(i(function(){return"0385-07-25T07:06:39.999Z"!=new Date(-5e13-1).toISOString()})||!i(function(){new Date(NaN).toISOString()})),"Date",{toISOString:function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(e>99?e:"0"+u(e))+"Z"}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(5)("toPrimitive"),i=Date.prototype;r in i||e(12)(i,r,e(131))},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(13)(r,"toString",function(){var t=o.call(this);return t===t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(93)})},function(t,n,e){"use strict";var r=e(4),i=e(17),o=e(5)("hasInstance"),u=Function.prototype;o in u||e(7).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(7).f,i=e(29),o=e(10),u=Function.prototype,c=/^\s*function ([^ (]*)/,a=Object.isExtensible||function(){return!0};"name"in u||e(6)&&r(u,"name",{configurable:!0,get:function(){try{var t=this,n=(""+t).match(c)[1];return o(t,"name")||!a(t)||r(t,"name",i(5,n)),n}catch(t){return""}}})},function(t,n,e){var r=e(0),i=e(101),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){function r(t){return isFinite(t=+t)&&0!=t?t<0?-r(-t):Math.log(t+Math.sqrt(t*t+1)):t}var i=e(0),o=Math.asinh;i(i.S+i.F*!(o&&1/o(0)>0),"Math",{asinh:r})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(72);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(71);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0),i=e(72),o=Math.pow,u=o(2,-52),c=o(2,-23),a=o(2,127)*(2-c),s=o(2,-126),f=function(t){return t+1/u-1/u};r(r.S,"Math",{fround:function(t){var n,e,r=Math.abs(t),o=i(t);return r<s?o*f(r/s/c)*s*c:(n=(1+c/u)*r,e=n-(n-r),e>a||e!=e?o*(1/0):o*e)}})},function(t,n,e){var r=e(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,o=0,u=0,c=arguments.length,a=0;u<c;)e=i(arguments[u++]),a<e?(r=a/e,o=o*r*r+1,a=e):e>0?(r=e/a,o+=r*r):o+=e;return a===1/0?1/0:a*Math.sqrt(o)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r;return 0|i*o+((65535&e>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)/Math.LN10}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(72)})},function(t,n,e){var r=e(0),i=e(71),o=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(71),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){"use strict";var r=e(2),i=e(10),o=e(18),u=e(66),c=e(23),a=e(3),s=e(34).f,f=e(16).f,l=e(7).f,h=e(44).trim,p=r.Number,v=p,y=p.prototype,d="Number"==o(e(33)(y)),g="trim"in String.prototype,_=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){n=g?n.trim():h(n,3);var e,r,i,o=n.charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var u,a=n.slice(2),s=0,f=a.length;s<f;s++)if((u=a.charCodeAt(s))<48||u>i)return NaN;return parseInt(a,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(d?a(function(){y.valueOf.call(e)}):"Number"!=o(e))?u(new v(_(n)),e,p):_(n)};for(var b,k=e(6)?s(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),m=0;k.length>m;m++)i(v,b=k[m])&&!i(p,b)&&l(p,b,f(v,b));p.prototype=y,y.constructor=p,e(13)(r,"Number",p)}},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(98)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(98),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(108);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(109);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){"use strict";var r=e(0),i=e(30),o=e(89),u=e(79),c=1..toFixed,a=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=a(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=a(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+u.call("0",7-e.length)+e}return n},v=function(t,n,e){return 0===n?e:n%2==1?v(t,n-1,e*t):v(t*t,n/2,e)},y=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n};r(r.P+r.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){c.call({})})),"Number",{toFixed:function(t){var n,e,r,c,a=o(this,f),s=i(t),d="",g="0";if(s<0||s>20)throw RangeError(f);if(a!=a)return"NaN";if(a<=-1e21||a>=1e21)return String(a);if(a<0&&(d="-",a=-a),a>1e-21)if(n=y(a*v(2,69,1))-69,e=n<0?a*v(2,-n,1):a/v(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(v(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=p()}else l(0,e),l(1<<-n,0),g=p()+u.call("0",s);return s>0?(c=g.length,g=d+(c<=s?"0."+u.call("0",s-c)+g:g.slice(0,c-s)+"."+g.slice(c-s))):g=d+g,g}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=e(89),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(102)})},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(33)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(6),"Object",{defineProperties:e(103)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(6),"Object",{defineProperty:e(7).f})},function(t,n,e){var r=e(4),i=e(28).onFreeze;e(22)("freeze",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(15),i=e(16).f;e(22)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){e(22)("getOwnPropertyNames",function(){return e(104).f})},function(t,n,e){var r=e(9),i=e(17);e(22)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(4);e(22)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(4);e(22)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(22)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(110)})},function(t,n,e){var r=e(9),i=e(35);e(22)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(4),i=e(28).onFreeze;e(22)("preventExtensions",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(4),i=e(28).onFreeze;e(22)("seal",function(t){return function(n){return t&&r(n)?t(i(n)):n}})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(74).set})},function(t,n,e){"use strict";var r=e(45),i={};i[e(5)("toStringTag")]="z",i+""!="[object z]"&&e(13)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0),i=e(108);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){var r=e(0),i=e(109);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){"use strict";var r,i,o,u=e(32),c=e(2),a=e(25),s=e(45),f=e(0),l=e(4),h=e(11),p=e(31),v=e(41),y=e(76),d=e(81).set,g=e(73)(),_=c.TypeError,b=c.process,k=c.Promise,b=c.process,m="process"==s(b),w=function(){},x=!!function(){try{var t=k.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(w,w)};return(m||"function"==typeof PromiseRejectionEvent)&&t.then(w)instanceof n}catch(t){}}(),S=function(t,n){return t===n||t===k&&n===o},E=function(t){var n;return!(!l(t)||"function"!=typeof(n=t.then))&&n},O=function(t){return S(k,t)?new F(t):new i(t)},F=i=function(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw _("Bad Promise constructor");n=t,e=r}),this.resolve=h(n),this.reject=h(e)},P=function(t){try{t()}catch(t){return{error:t}}},M=function(t,n){if(!t._n){t._n=!0;var e=t._c;g(function(){for(var r=t._v,i=1==t._s,o=0;e.length>o;)!function(n){var e,o,u=i?n.ok:n.fail,c=n.resolve,a=n.reject,s=n.domain;try{u?(i||(2==t._h&&j(t),t._h=1),!0===u?e=r:(s&&s.enter(),e=u(r),s&&s.exit()),e===n.promise?a(_("Promise-chain cycle")):(o=E(e))?o.call(e,c,a):c(e)):a(r)}catch(t){a(t)}}(e[o++]);t._c=[],t._n=!1,n&&!t._h&&I(t)})}},I=function(t){d.call(c,function(){var n,e,r,i=t._v;if(T(t)&&(n=P(function(){m?b.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=m||T(t)?2:1),t._a=void 0,n)throw n.error})},T=function(t){if(1==t._h)return!1;for(var n,e=t._a||t._c,r=0;e.length>r;)if(n=e[r++],n.fail||!T(n.promise))return!1;return!0},j=function(t){d.call(c,function(){var n;m?b.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},A=function(t){var n=this;n._d||(n._d=!0,n=n._w||n,n._v=t,n._s=2,n._a||(n._a=n._c.slice()),M(n,!0))},N=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw _("Promise can't be resolved itself");(n=E(t))?g(function(){var r={_w:e,_d:!1};try{n.call(t,a(N,r,1),a(A,r,1))}catch(t){A.call(r,t)}}):(e._v=t,e._s=1,M(e,!1))}catch(t){A.call({_w:e,_d:!1},t)}}};x||(k=function(t){p(this,k,"Promise","_h"),h(t),r.call(this);try{t(a(N,this,1),a(A,this,1))}catch(t){A.call(this,t)}},r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},r.prototype=e(36)(k.prototype,{then:function(t,n){var e=O(y(this,k));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=m?b.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&M(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),F=function(){var t=new r;this.promise=t,this.resolve=a(N,t,1),this.reject=a(A,t,1)}),f(f.G+f.W+f.F*!x,{Promise:k}),e(43)(k,"Promise"),e(37)("Promise"),o=e(24).Promise,f(f.S+f.F*!x,"Promise",{reject:function(t){var n=O(this);return(0,n.reject)(t),n.promise}}),f(f.S+f.F*(u||!x),"Promise",{resolve:function(t){if(t instanceof k&&S(t.constructor,this))return t;var n=O(this);return(0,n.resolve)(t),n.promise}}),f(f.S+f.F*!(x&&e(54)(function(t){k.all(t).catch(w)})),"Promise",{all:function(t){var n=this,e=O(n),r=e.resolve,i=e.reject,o=P(function(){var e=[],o=0,u=1;v(t,!1,function(t){var c=o++,a=!1;e.push(void 0),u++,n.resolve(t).then(function(t){a||(a=!0,e[c]=t,--u||r(e))},i)}),--u||r(e)});return o&&i(o.error),e.promise},race:function(t){var n=this,e=O(n),r=e.reject,i=P(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i&&r(i.error),e.promise}})},function(t,n,e){var r=e(0),i=e(11),o=e(1),u=(e(2).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!e(3)(function(){u(function(){})}),"Reflect",{apply:function(t,n,e){var r=i(t),a=o(e);return u?u(r,n,a):c.call(r,n,a)}})},function(t,n,e){var r=e(0),i=e(33),o=e(11),u=e(1),c=e(4),a=e(3),s=e(93),f=(e(2).Reflect||{}).construct,l=a(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!a(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var e=arguments.length<3?t:o(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var a=e.prototype,p=i(c(a)?a:Object.prototype),v=Function.apply.call(t,p,n);return c(v)?v:p}})},function(t,n,e){var r=e(7),i=e(0),o=e(1),u=e(23);i(i.S+i.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=u(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(16).f,o=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),i=e(1),o=function(t){this._t=i(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(69)(o,"Object",function(){var t,n=this,e=n._k;do{if(n._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[n._i++])in n._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,n,e){var r=e(16),i=e(0),o=e(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(17),o=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){function r(t,n){var e,c,f=arguments.length<3?t:arguments[2];return s(t)===f?t[n]:(e=i.f(t,n))?u(e,"value")?e.value:void 0!==e.get?e.get.call(f):void 0:a(c=o(t))?r(c,n,f):void 0}var i=e(16),o=e(17),u=e(10),c=e(0),a=e(4),s=e(1);c(c.S,"Reflect",{get:r})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(107)})},function(t,n,e){var r=e(0),i=e(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(74);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){function r(t,n,e){var a,h,p=arguments.length<4?t:arguments[3],v=o.f(f(t),n);if(!v){if(l(h=u(t)))return r(h,n,e,p);v=s(0)}return c(v,"value")?!(!1===v.writable||!l(p))&&(a=o.f(p,n)||s(0),a.value=e,i.f(p,n,a),!0):void 0!==v.set&&(v.set.call(p,e),!0)}var i=e(7),o=e(16),u=e(17),c=e(10),a=e(0),s=e(29),f=e(1),l=e(4);a(a.S,"Reflect",{set:r})},function(t,n,e){var r=e(2),i=e(66),o=e(7).f,u=e(34).f,c=e(53),a=e(51),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,v=new s(h)!==h;if(e(6)&&(!v||e(3)(function(){return p[e(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),o=void 0===n;return!e&&r&&t.constructor===s&&o?t:i(v?new f(r&&!o?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&o?a.call(t):n),e?this:l,s)};for(var y=u(f),d=0;y.length>d;)!function(t){t in s||o(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})}(y[d++]);l.constructor=s,s.prototype=l,e(13)(r,"RegExp",s)}e(37)("RegExp")},function(t,n,e){e(50)("match",1,function(t,n,e){return[function(e){"use strict";var r=t(this),i=void 0==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},e]})},function(t,n,e){e(50)("replace",2,function(t,n,e){return[function(r,i){"use strict";var o=t(this),u=void 0==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},e]})},function(t,n,e){e(50)("search",1,function(t,n,e){return[function(e){"use strict";var r=t(this),i=void 0==e?void 0:e[n];return void 0!==i?i.call(e,r):new RegExp(e)[n](String(r))},e]})},function(t,n,e){e(50)("split",2,function(t,n,r){"use strict";var i=e(53),o=r,u=[].push,c="length";if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[c]||2!="ab".split(/(?:ab)*/)[c]||4!=".".split(/(.?)(.?)/)[c]||".".split(/()()/)[c]>1||"".split(/.?/)[c]){var a=void 0===/()??/.exec("")[1];r=function(t,n){var e=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(e,t,n);var r,s,f,l,h,p=[],v=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),y=0,d=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,v+"g");for(a||(r=new RegExp("^"+g.source+"$(?!\\s)",v));(s=g.exec(e))&&!((f=s.index+s[0][c])>y&&(p.push(e.slice(y,s.index)),!a&&s[c]>1&&s[0].replace(r,function(){for(h=1;h<arguments[c]-2;h++)void 0===arguments[h]&&(s[h]=void 0)}),s[c]>1&&s.index<e[c]&&u.apply(p,s.slice(1)),l=s[0][c],y=f,p[c]>=d));)g.lastIndex===s.index&&g.lastIndex++;return y===e[c]?!l&&g.test("")||p.push(""):p.push(e.slice(y)),p[c]>d?p.slice(0,d):p}}else"0".split(void 0,0)[c]&&(r=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function(e,i){var o=t(this),u=void 0==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},function(t,n,e){"use strict";e(114);var r=e(1),i=e(51),o=e(6),u=/./.toString,c=function(t){e(13)(RegExp.prototype,"toString",t,!0)};e(3)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},function(t,n,e){"use strict";e(14)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(14)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(14)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(14)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";var r=e(0),i=e(77)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(78),u="".endsWith;r(r.P+r.F*e(64)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=i(n.length),c=void 0===e?r:Math.min(i(e),r),a=String(t);return u?u.call(n,a,c):n.slice(c-a.length,c)===a}})},function(t,n,e){"use strict";e(14)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(14)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(14)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){var r=e(0),i=e(38),o=String.fromCharCode,u=String.fromCodePoint;r(r.S+r.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,u=0;r>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){"use strict";var r=e(0),i=e(78);r(r.P+r.F*e(64)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){"use strict";e(14)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";var r=e(77)(!0);e(70)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";e(14)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){var r=e(0),i=e(15),o=e(8);r(r.S,"String",{raw:function(t){for(var n=i(t.raw),e=o(n.length),r=arguments.length,u=[],c=0;e>c;)u.push(String(n[c++])),c<r&&u.push(String(arguments[c]));return u.join("")}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(79)})},function(t,n,e){"use strict";e(14)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";var r=e(0),i=e(8),o=e(78),u="".startsWith;r(r.P+r.F*e(64)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),e=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return u?u.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(14)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(14)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(14)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){"use strict";e(44)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(2),i=e(10),o=e(6),u=e(0),c=e(13),a=e(28).KEY,s=e(3),f=e(57),l=e(43),h=e(39),p=e(5),v=e(112),y=e(83),d=e(133),g=e(132),_=e(68),b=e(1),k=e(15),m=e(23),w=e(29),x=e(33),S=e(104),E=e(16),O=e(7),F=e(35),P=E.f,M=O.f,I=S.f,T=r.Symbol,j=r.JSON,A=j&&j.stringify,N=p("_hidden"),R=p("toPrimitive"),D={}.propertyIsEnumerable,L=f("symbol-registry"),C=f("symbols"),U=f("op-symbols"),B=Object.prototype,z="function"==typeof T,W=r.QObject,G=!W||!W.prototype||!W.prototype.findChild,K=o&&s(function(){return 7!=x(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=P(B,n);r&&delete B[n],M(t,n,e),r&&t!==B&&M(B,n,r)}:M,V=function(t){var n=C[t]=x(T.prototype);return n._k=t,n},q=z&&"symbol"==typeof T.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof T},Q=function(t,n,e){return t===B&&Q(U,n,e),b(t),n=m(n,!0),b(e),i(C,n)?(e.enumerable?(i(t,N)&&t[N][n]&&(t[N][n]=!1),e=x(e,{enumerable:w(0,!1)})):(i(t,N)||M(t,N,w(1,{})),t[N][n]=!0),K(t,n,e)):M(t,n,e)},H=function(t,n){b(t);for(var e,r=g(n=k(n)),i=0,o=r.length;o>i;)Q(t,e=r[i++],n[e]);return t},X=function(t,n){return void 0===n?x(t):H(x(t),n)},J=function(t){var n=D.call(this,t=m(t,!0));return!(this===B&&i(C,t)&&!i(U,t))&&(!(n||!i(this,t)||!i(C,t)||i(this,N)&&this[N][t])||n)},Y=function(t,n){if(t=k(t),n=m(n,!0),t!==B||!i(C,n)||i(U,n)){var e=P(t,n);return!e||!i(C,n)||i(t,N)&&t[N][n]||(e.enumerable=!0),e}},Z=function(t){for(var n,e=I(k(t)),r=[],o=0;e.length>o;)i(C,n=e[o++])||n==N||n==a||r.push(n);return r},$=function(t){for(var n,e=t===B,r=I(e?U:k(t)),o=[],u=0;r.length>u;)!i(C,n=r[u++])||e&&!i(B,n)||o.push(C[n]);return o};z||(T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===B&&n.call(U,e),i(this,N)&&i(this[N],t)&&(this[N][t]=!1),K(this,t,w(1,e))};return o&&G&&K(B,t,{configurable:!0,set:n}),V(t)},c(T.prototype,"toString",function(){return this._k}),E.f=Y,O.f=Q,e(34).f=S.f=Z,e(47).f=J,e(56).f=$,o&&!e(32)&&c(B,"propertyIsEnumerable",J,!0),v.f=function(t){return V(p(t))}),u(u.G+u.W+u.F*!z,{Symbol:T});for(var tt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;tt.length>nt;)p(tt[nt++]);for(var tt=F(p.store),nt=0;tt.length>nt;)y(tt[nt++]);u(u.S+u.F*!z,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=T(t)},keyFor:function(t){if(q(t))return d(L,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){G=!0},useSimple:function(){G=!1}}),u(u.S+u.F*!z,"Object",{create:X,defineProperty:Q,defineProperties:H,getOwnPropertyDescriptor:Y,getOwnPropertyNames:Z,getOwnPropertySymbols:$}),j&&u(u.S+u.F*(!z||s(function(){var t=T();return"[null]"!=A([t])||"{}"!=A({a:t})||"{}"!=A(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!q(t)){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);return n=r[1],"function"==typeof n&&(e=n),!e&&_(n)||(n=function(t,n){if(e&&(n=e.call(this,t,n)),!q(n))return n}),r[1]=n,A.apply(j,r)}}}),T.prototype[R]||e(12)(T.prototype,R,T.prototype.valueOf),l(T,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){"use strict";var r=e(0),i=e(58),o=e(82),u=e(1),c=e(38),a=e(8),s=e(4),f=e(2).ArrayBuffer,l=e(76),h=o.ArrayBuffer,p=o.DataView,v=i.ABV&&f.isView,y=h.prototype.slice,d=i.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||s(t)&&d in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==y&&void 0===n)return y.call(u(this),t);for(var e=u(this).byteLength,r=c(t,e),i=c(void 0===n?e:n,e),o=new(l(this,h))(a(i-r)),s=new p(this),f=new p(o),v=0;r<i;)f.setUint8(v++,s.getUint8(r++));return o}}),e(37)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(58).ABV,{DataView:e(82).DataView})},function(t,n,e){e(27)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(27)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){"use strict";var r=e(96);e(49)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(this,t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(48)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(40)("includes")},function(t,n,e){var r=e(0),i=e(73)(),o=e(2).process,u="process"==e(18)(o);r(r.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,e){var r=e(0),i=e(18);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(95)("Map")})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var i=t>>>0,o=n>>>0,u=e>>>0;return o+(r>>>0)+((i&u|(i|u)&~(i+u>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>16,c=r>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var i=t>>>0,o=n>>>0,u=e>>>0;return o-(r>>>0)-((~i&u|~(i^u)&i-u>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>>16,c=r>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(11),u=e(7);e(6)&&r(r.P+e(55),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(11),u=e(7);e(6)&&r(r.P+e(55),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){var r=e(0),i=e(106)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){var r=e(0),i=e(107),o=e(15),u=e(16),c=e(61);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e=o(t),r=u.f,a=i(e),s={},f=0;a.length>f;)c(s,n=a[f++],r(e,n));return s}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(6)&&r(r.P+e(55),"Object",{__lookupGetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.get}while(e=u(e))}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(6)&&r(r.P+e(55),"Object",{__lookupSetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.set}while(e=u(e))}})},function(t,n,e){var r=e(0),i=e(106)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){"use strict";var r=e(0),i=e(2),o=e(24),u=e(73)(),c=e(5)("observable"),a=e(11),s=e(1),f=e(31),l=e(36),h=e(12),p=e(41),v=p.RETURN,y=function(t){return null==t?void 0:a(t)},d=function(t){var n=t._c;n&&(t._c=void 0,n())},g=function(t){return void 0===t._o},_=function(t){g(t)||(t._o=void 0,d(t))},b=function(t,n){s(t),this._c=void 0,this._o=t,t=new k(this);try{var e=n(t),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:a(e),this._c=e)}catch(n){return void t.error(n)}g(this)&&d(this)};b.prototype=l({},{unsubscribe:function(){_(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var n=this._s;if(!g(n)){var e=n._o;try{var r=y(e.next);if(r)return r.call(e,t)}catch(t){try{_(n)}finally{throw t}}}},error:function(t){var n=this._s;if(g(n))throw t;var e=n._o;n._o=void 0;try{var r=y(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{d(n)}finally{throw t}}return d(n),t},complete:function(t){var n=this._s;if(!g(n)){var e=n._o;n._o=void 0;try{var r=y(e.complete);t=r?r.call(e,t):void 0}catch(t){try{d(n)}finally{throw t}}return d(n),t}}});var m=function(t){f(this,m,"Observable","_f")._f=a(t)};l(m.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(e,r){a(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e})})}}),l(m,{from:function(t){var n="function"==typeof this?this:m,e=y(s(t)[c]);if(e){var r=s(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return u(function(){if(!e){try{if(p(t,!1,function(t){if(n.next(t),e)return v})===v)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,e=Array(n);t<n;)e[t]=arguments[t++];return new("function"==typeof this?this:m)(function(t){var n=!1;return u(function(){if(!n){for(var r=0;r<e.length;++r)if(t.next(e[r]),n)return;t.complete()}}),function(){n=!0}})}}),h(m.prototype,c,function(){return this}),r(r.G,{Observable:m}),e(37)("Observable")},function(t,n,e){var r=e(26),i=e(1),o=r.key,u=r.set;r.exp({defineMetadata:function(t,n,e,r){u(t,n,i(e),o(r))}})},function(t,n,e){var r=e(26),i=e(1),o=r.key,u=r.map,c=r.store;r.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:o(arguments[2]),r=u(i(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var a=c.get(n);return a.delete(e),!!a.size||c.delete(n)}})},function(t,n,e){var r=e(115),i=e(91),o=e(26),u=e(1),c=e(17),a=o.keys,s=o.key,f=function(t,n){var e=a(t,n),o=c(t);if(null===o)return e;var u=f(o,n);return u.length?e.length?i(new r(e.concat(u))):u:e};o.exp({getMetadataKeys:function(t){return f(u(t),arguments.length<2?void 0:s(arguments[1]))}})},function(t,n,e){var r=e(26),i=e(1),o=e(17),u=r.has,c=r.get,a=r.key,s=function(t,n,e){if(u(t,n,e))return c(t,n,e);var r=o(n);return null!==r?s(t,r,e):void 0};r.exp({getMetadata:function(t,n){return s(t,i(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},function(t,n,e){var r=e(26),i=e(1),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=e(17),u=r.has,c=r.key,a=function(t,n,e){if(u(t,n,e))return!0;var r=o(n);return null!==r&&a(t,r,e)};r.exp({hasMetadata:function(t,n){return a(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(26),i=e(1),o=e(11),u=r.key,c=r.set;r.exp({metadata:function(t,n){return function(e,r){c(t,n,(void 0!==r?i:o)(e),u(r))}}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(95)("Set")})},function(t,n,e){"use strict";var r=e(0),i=e(77)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(19),o=e(8),u=e(53),c=e(51),a=RegExp.prototype,s=function(t,n){this._r=t,this._s=n};e(69)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in a?String(t.flags):c.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=o(t.lastIndex),new s(r,n)}})},function(t,n,e){"use strict";var r=e(0),i=e(111);r(r.P,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(111);r(r.P,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){"use strict";e(44)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(44)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){e(83)("asyncIterator")},function(t,n,e){e(83)("observable")},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){for(var r=e(85),i=e(13),o=e(2),u=e(12),c=e(42),a=e(5),s=a("iterator"),f=a("toStringTag"),l=c.Array,h=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],p=0;p<5;p++){var v,y=h[p],d=o[y],g=d&&d.prototype;if(g){g[s]||u(g,s,l),g[f]||u(g,f,y),c[y]=l;for(v in r)g[v]||i(g,v,r[v],!0)}}},function(t,n,e){var r=e(0),i=e(81);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){var r=e(2),i=e(0),o=e(52),u=e(134),c=r.navigator,a=!!c&&/MSIE .\./.test(c.userAgent),s=function(t){return a?function(n,e){return t(o(u,[].slice.call(arguments,2),"function"==typeof n?n:Function(n)),e)}:t};i(i.G+i.B+i.F*a,{setTimeout:s(r.setTimeout),setInterval:s(r.setInterval)})},function(t,n,e){e(257),e(196),e(198),e(197),e(200),e(202),e(207),e(201),e(199),e(209),e(208),e(204),e(205),e(203),e(195),e(206),e(210),e(211),e(163),e(165),e(164),e(213),e(212),e(183),e(193),e(194),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(244),e(249),e(256),e(247),e(239),e(240),e(245),e(250),e(252),e(235),e(236),e(237),e(238),e(241),e(242),e(243),e(246),e(248),e(251),e(253),e(254),e(255),e(158),e(160),e(159),e(162),e(161),e(147),e(145),e(151),e(148),e(154),e(156),e(144),e(150),e(141),e(155),e(139),e(153),e(152),e(146),e(149),e(138),e(140),e(143),e(142),e(157),e(85),e(229),e(234),e(114),e(230),e(231),e(232),e(233),e(214),e(113),e(115),e(116),e(269),e(258),e(259),e(264),e(267),e(268),e(262),e(265),e(263),e(266),e(260),e(261),e(215),e(216),e(217),e(218),e(219),e(222),e(220),e(221),e(223),e(224),e(225),e(226),e(228),e(227),e(270),e(296),e(299),e(298),e(300),e(301),e(297),e(302),e(303),e(281),e(284),e(280),e(278),e(279),e(282),e(283),e(273),e(295),e(304),e(272),e(274),e(276),e(275),e(277),e(286),e(287),e(289),e(288),e(291),e(290),e(292),e(293),e(294),e(271),e(285),e(307),e(306),e(305),t.exports=e(24)},function(t,n,e){(function(n){!function(n){"use strict";function e(t,n,e,r){var o=n&&n.prototype instanceof i?n:i,u=Object.create(o.prototype),c=new p(r||[]);return u._invoke=s(t,e,c),u}function r(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function i(){}function o(){}function u(){}function c(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function a(t){function e(n,i,o,u){var c=r(t[n],t,i);if("throw"!==c.type){var a=c.arg,s=a.value;return s&&"object"==typeof s&&_.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,o,u)},function(t){e("throw",t,o,u)}):Promise.resolve(s).then(function(t){a.value=t,o(a)},u)}u(c.arg)}function i(t,n){function r(){return new Promise(function(r,i){e(t,n,r,i)})}return o=o?o.then(r,r):r()}"object"==typeof n.process&&n.process.domain&&(e=n.process.domain.bind(e));var o;this._invoke=i}function s(t,n,e){var i=E;return function(o,u){if(i===F)throw new Error("Generator is already running");if(i===P){if("throw"===o)throw u;return y()}for(e.method=o,e.arg=u;;){var c=e.delegate;if(c){var a=f(c,e);if(a){if(a===M)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(i===E)throw i=P,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);i=F;var s=r(t,n,e);if("normal"===s.type){if(i=e.done?P:O,s.arg===M)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(i=P,e.method="throw",e.arg=s.arg)}}}function f(t,n){var e=t.iterator[n.method];if(e===d){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=d,f(t,n),"throw"===n.method))return M;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return M}var i=r(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,M;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=d),n.delegate=null,M):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,M)}function l(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function h(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function p(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(l,this),this.reset(!0)}function v(t){if(t){var n=t[k];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,r=function n(){for(;++e<t.length;)if(_.call(t,e))return n.value=t[e],n.done=!1,n;return n.value=d,n.done=!0,n};return r.next=r}}return{next:y}}function y(){return{value:d,done:!0}}var d,g=Object.prototype,_=g.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},k=b.iterator||"@@iterator",m=b.asyncIterator||"@@asyncIterator",w=b.toStringTag||"@@toStringTag",x="object"==typeof t,S=n.regeneratorRuntime;if(S)return void(x&&(t.exports=S));S=n.regeneratorRuntime=x?t.exports:{},S.wrap=e;var E="suspendedStart",O="suspendedYield",F="executing",P="completed",M={},I={};I[k]=function(){return this};var T=Object.getPrototypeOf,j=T&&T(T(v([])));j&&j!==g&&_.call(j,k)&&(I=j);var A=u.prototype=i.prototype=Object.create(I);o.prototype=A.constructor=u,u.constructor=o,u[w]=o.displayName="GeneratorFunction",S.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===o||"GeneratorFunction"===(n.displayName||n.name))},S.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,u):(t.__proto__=u,w in t||(t[w]="GeneratorFunction")),t.prototype=Object.create(A),t},S.awrap=function(t){return{__await:t}},c(a.prototype),a.prototype[m]=function(){return this},S.AsyncIterator=a,S.async=function(t,n,r,i){var o=new a(e(t,n,r,i));return S.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},c(A),A[w]="Generator",A[k]=function(){return this},A.toString=function(){return"[object Generator]"},S.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},S.values=v,p.prototype={constructor:p,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=d,this.done=!1,this.delegate=null,this.method="next",this.arg=d,this.tryEntries.forEach(h),!t)for(var n in this)"t"===n.charAt(0)&&_.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=d)},stop:function(){this.done=!0;var t=this.tryEntries[0],n=t.completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(t){function n(n,r){return o.type="throw",o.arg=t,e.next=n,r&&(e.method="next",e.arg=d),!!r}if(this.done)throw t;for(var e=this,r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r],o=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=_.call(i,"catchLoc"),c=_.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&_.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=n,i?(this.method="next",this.next=i.finallyLoc,M):this.complete(o)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),M},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),h(e),M}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;h(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:v(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=d),M}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(n,e(117))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9xaW5pdTRqcy5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGFlNTI2YzUzMWI1YTc1MDliODRkIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL0xvZy50cyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VwbG9hZC9VcGxvYWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXBsb2FkL1VwbG9hZGVyQnVpbGRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXBsb2FkL3Rhc2svQmFzZVRhc2sudHMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXBsb2FkL2hvb2svU2ltcGxlVXBsb2FkTGlzdGVuZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VwbG9hZC9pbnRlcmNlcHRvci9TaW1wbGVVcGxvYWRJbnRlcmNlcHRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXBsb2FkL3BhdHRyZW4vQ2h1bmtVcGxvYWRQYXR0ZXJuLnRzIiwid2VicGFjazovLy8uL3NyYy91cGxvYWQvcGF0dHJlbi9EaXJlY3RVcGxvYWRQYXR0ZXJuLnRzIiwid2VicGFjazovLy8uL3NyYy91cGxvYWQvdGFzay9DaHVua1Rhc2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VwbG9hZC90YXNrL0RpcmVjdFRhc2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VwbG9hZC91dWlkL1VVSUQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvUG9seWZpbGwudHMiLCJ3ZWJwYWNrOi8vLy4vfi9iYWJlbC1wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL19rZXlvZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNicnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovLy8uL34vY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2xvYmFsIiwiY29yZSIsImhpZGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwic291cmNlIiwia2V5Iiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJ0YXJnZXQiLCJleHBQcm90byIsInVuZGVmaW5lZCIsIkZ1bmN0aW9uIiwiVSIsIlciLCJSIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiX19nIiwiZXhlYyIsImUiLCJzdG9yZSIsInVpZCIsIlN5bWJvbCIsIlVTRV9TWU1CT0wiLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJkZWZpbmVkIiwiY3JlYXRlRGVzYyIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiSU9iamVjdCIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0b09iamVjdCIsIklFX1BST1RPIiwiT2JqZWN0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwidG9TdHJpbmciLCJzbGljZSIsIm1ldGhvZCIsImFyZyIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjcmVhdGUiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJ0aGF0IiwicmVzIiwiaW5kZXgiLCJyZXN1bHQiLCJwdXNoIiwiS0VZIiwiZm4iLCJ2YWx1ZU9mIiwidmVyc2lvbiIsIl9fZSIsImFGdW5jdGlvbiIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsIk1hcCIsInNoYXJlZCIsImdldE9yQ3JlYXRlTWV0YWRhdGFNYXAiLCJ0YXJnZXRLZXkiLCJ0YXJnZXRNZXRhZGF0YSIsInNldCIsImtleU1ldGFkYXRhIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsIk1ldGFkYXRhVmFsdWUiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsImtleXMiLCJmb3JFYWNoIiwiXyIsInRvTWV0YUtleSIsIm1hcCIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInNhbWUiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJzdHJpY3RUb0xlbmd0aCIsIlNBTUUiLCJudW1iZXIiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsIml0ZXJhdG9yIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIm5leHQiLCJkb25lIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByb3RvIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJyZXZlcnNlIiwibWlkZGxlIiwiZmxvb3IiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiSVNOVF9VSU5UOCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImRhdGEiLCJ2Iiwic2V0dGVyIiwicm91bmQiLCJhZGRFbGVtZW50IiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsImNvbmNhdCIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwiZnJvbSIsIm9mIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwibWV0YSIsIk5FRUQiLCJiaXRtYXAiLCJjZWlsIiwiaXNOYU4iLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCIka2V5cyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwibWF4IiwicHgiLCJyYW5kb20iLCJVTlNDT1BBQkxFUyIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJkZWYiLCJzdGF0Iiwic3BhY2VzIiwic3BhY2UiLCJub24iLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwidHJpbSIsImNvZiIsIkFSRyIsInRyeUdldCIsIlQiLCJjYWxsZWUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiU1lNQk9MIiwiZm5zIiwic3RyZm4iLCJyeGZuIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJhcmdzIiwidW4iLCJNQVRDSCIsImlzUmVnRXhwIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkxvZyIsIl9lbmFibGUiLCJjb25zb2xlIiwiZGVidWciLCJsb2ciLCJlcnJvciIsIndhcm4iLCJpbmZvIiwiZGVmYXVsdCIsImVuZFBvcyIsIiRkZWZpbmVQcm9wZXJ0eSIsImlzIiwiY3JlYXRlRWxlbWVudCIsInJlIiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0UHJvdG90eXBlT2YiLCJpc0FycmF5IiwiSXRlcmF0b3JQcm90b3R5cGUiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCIkZXhwbTEiLCJleHBtMSIsIngiLCJzaWduIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInByb2Nlc3MiLCJQcm9taXNlIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0YXNrIiwiY2hlY2siLCJidWdneSIsIl9fcHJvdG9fXyIsIkQiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0Iiwic2VhcmNoU3RyaW5nIiwiY291bnQiLCJzdHIiLCJJbmZpbml0eSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwibnVtSW5kZXgiLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJ2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzIiwibnVtYmVyTGVuZ3RoIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIndrc0V4dCIsIiRTeW1ib2wiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl90IiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfRGlyZWN0VGFzayIsIl9EaXJlY3RUYXNrMiIsIl9DaHVua1Rhc2siLCJfVVVJRCIsIl9VVUlEMiIsIl9VcGxvYWRlckJ1aWxkZXIiLCJfVXBsb2FkZXJCdWlsZGVyMiIsIl9Mb2ciLCJfTG9nMiIsIl9TaW1wbGVVcGxvYWRMaXN0ZW5lciIsIl9TaW1wbGVVcGxvYWRMaXN0ZW5lcjIiLCJfRGlyZWN0VXBsb2FkUGF0dGVybiIsIl9EaXJlY3RVcGxvYWRQYXR0ZXJuMiIsIl9DaHVua1VwbG9hZFBhdHRlcm4iLCJfQ2h1bmtVcGxvYWRQYXR0ZXJuMiIsIlVwbG9hZGVyIiwiYnVpbGRlciIsIl90aGlzMiIsIkZJTEVfSU5QVVRfRUxfSUQiLCJfdGFza1F1ZXVlIiwiX3Rhc2tpbmciLCJfc2NhbGUiLCJfc2F2ZUtleSIsImhhbmRsZUZpbGVzIiwiZmlsZUlucHV0IiwiZmlsZXMiLCJnZW5lcmF0ZVRhc2siLCJpc0ludGVycnVwdCIsImludGVyY2VwdGVkVGFza3MiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwidGFza1F1ZXVlIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMiLCJfZGlkSXRlcmF0b3JFcnJvcjMiLCJfaXRlcmF0b3JFcnJvcjMiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiaW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJvbkludGVyY2VwdCIsIm9uSW50ZXJydXB0IiwiZXJyIiwicmV0dXJuIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX3Rhc2siLCJzcGxpY2UiLCJvblJlYWR5IiwiaGFuZGxlSW1hZ2VzIiwiYXV0byIsInJlc29sdmVVVUlEIiwidXVpZCIsInJlc29sdmVJbWFnZUluZm8iLCJibG9iIiwid2lkdGhSZSIsImhlaWdodFJlIiwiaW1nIiwiSW1hZ2UiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJvbmxvYWQiLCJ3aWR0aCIsImhlaWdodCIsIm9uU2F2ZUtleVJlc29sdmVkIiwic2F2ZUtleSIsIl90b2tlblNoYXJlIiwiX3JldHJ5IiwiZ2V0UmV0cnkiLCJfc2l6ZSIsImdldFNpemUiLCJfY2h1bmsiLCJnZXRDaHVuayIsIl9hdXRvIiwiZ2V0QXV0byIsIl9tdWx0aXBsZSIsImdldE11bHRpcGxlIiwiX2FjY2VwdCIsImdldEFjY2VwdCIsIl9idXR0b24iLCJnZXRCdXR0b24iLCJfYnV0dG9uRXZlbnROYW1lIiwiZ2V0QnV0dG9uRXZlbnROYW1lIiwiX2NvbXByZXNzIiwiZ2V0Q29tcHJlc3MiLCJnZXRTY2FsZSIsImdldFNhdmVLZXkiLCJfdG9rZW5GdW5jIiwiZ2V0VG9rZW5GdW5jIiwiZ2V0VG9rZW5TaGFyZSIsIl9saXN0ZW5lciIsImFzc2lnbiIsImdldExpc3RlbmVyIiwiX2ludGVyY2VwdG9ycyIsImdldEludGVyY2VwdG9ycyIsIl9kb21haW4iLCJnZXREb21haW4iLCJfZmlsZUlucHV0SWQiLCJEYXRlIiwiZ2V0VGltZSIsImVuYWJsZSIsImdldElzRGVidWciLCJ2YWxpZGF0ZU9wdGlvbnMiLCJpbml0IiwiaW5pdEZpbGVJbnB1dEVsIiwiZXhpc3QiLCJnZXRFbGVtZW50QnlJZCIsIl9maWxlSW5wdXQiLCJtdWx0aXBsZSIsImFjY2VwdCIsImFjY2VwdFZhbHVlIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQiLCJfZGlkSXRlcmF0b3JFcnJvcjQiLCJfaXRlcmF0b3JFcnJvcjQiLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJib2R5IiwiY2hvb3NlRmlsZSIsImJpbmQiLCJfdG9rZW4iLCJyZXNldFVwbG9hZGVyIiwiZmlsZSIsImNodW5rIiwic2l6ZSIsIkJMT0NLX1NJWkUiLCJDaHVua1Rhc2siLCJvblRhc2tHZXRLZXkiLCJfdGhpczMiLCJwcm9taXNlcyIsImNvbXByZXNzIiwic2NhbGUiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSIsIl9kaWRJdGVyYXRvckVycm9yNSIsIl9pdGVyYXRvckVycm9yNSIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiLCJtYXRjaCIsImNhbnZhcyIsImdldENvbnRleHQiLCJfdGhpcyIsImltZ1ciLCJpbWdIIiwic2NhbGVXIiwic2NhbGVIIiwiZHJhd0ltYWdlIiwidG9CbG9iIiwiaXNDaHVua1Rhc2siLCJzcGxpY2VGaWxlMkJsb2NrIiwiYWxsIiwiRXJyb3IiLCJ0YXNraW5nIiwib25TdGFydCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242IiwiX2RpZEl0ZXJhdG9yRXJyb3I2IiwiX2l0ZXJhdG9yRXJyb3I2IiwiX3N0ZXA2IiwiX2l0ZXJhdG9yNiIsIl90YXNrMiIsImlzRGlyZWN0VGFzayIsInVwbG9hZCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243IiwiX2RpZEl0ZXJhdG9yRXJyb3I3IiwiX2l0ZXJhdG9yRXJyb3I3IiwiX3N0ZXA3IiwiX2l0ZXJhdG9yNyIsImlzRmluaXNoIiwiY2xpY2siLCJfdGhpczQiLCJ0b2tlbiIsInVybCIsIl90aGlzNSIsInJlc29sdmVTYXZlS2V5IiwicmVxdWVzdFRva2VuIiwicmVqZWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiRE9ORSIsInN0YXR1cyIsInJlc3BvbnNlIiwidXB0b2tlbiIsIm9uYWJvcnQiLCJyZXNwb25zZVR5cGUiLCJzZW5kIiwiX3RoaXM2IiwiX1VwbG9hZGVyIiwiX1VwbG9hZGVyMiIsIl9TaW1wbGVVcGxvYWRJbnRlcmNlcHRvciIsIl9TaW1wbGVVcGxvYWRJbnRlcmNlcHRvcjIiLCJVcGxvYWRlckJ1aWxkZXIiLCJVUExPQURfRE9NQUlOIiwiX3NjaGVtZSIsIl9pc0RlYnVnIiwiX2ludGVyY2VwdG9yIiwiZXZlbnROYW1lIiwiX3Rva2VuVXJsIiwidXBsb2FkZXIiLCJyZXF1ZXN0VGFza1Rva2VuIiwiX2RlYnVnIiwic2NoZW1lIiwicHJvdG9jb2wiLCJsb2NhdGlvbiIsIk1BWF9DSFVOS19TSVpFIiwiaHR0cCIsImh0dHBzIiwiQmFzZVRhc2siLCJfcHJvZ3Jlc3MiLCJfaXNTdWNjZXNzIiwiX2lzRmluaXNoIiwiX2ZpbGUiLCJfY3JlYXRlRGF0ZSIsIl9zdGFydERhdGUiLCJfZW5kRGF0ZSIsIl9yZXN1bHQiLCJfZXJyb3IiLCJfa2V5IiwibXNnIiwidG8iLCJpbmMiLCJtZW1vIiwiaXNSaWdodCIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsInBhcnRBcmdzIiwiYm91bmQiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJrIiwiX2wiLCJyIiwiZGVsZXRlIiwicHJldiIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInVmc3RvcmUiLCJpc0Zpbml0ZSIsInJldCIsImxvZzFwIiwiZ2V0S2V5cyIsImdPUFMiLCIkYXNzaWduIiwiQSIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwibmFtZXMiLCJpc0VudHJpZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIiRwYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsIiR0cmltIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwieSIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJzdHJvbmciLCJmbGFncyIsImFkZCIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsImciLCJldmFsIiwiU2ltcGxlVXBsb2FkTGlzdGVuZXIiLCJTaW1wbGVVcGxvYWRJbnRlcmNlcHRvciIsIkNodW5rVXBsb2FkUGF0dGVybiIsImdldFRva2VuIiwic3RhcnREYXRlIiwidXBsb2FkQmxvY2siLCJjaGFpbiIsImJsb2NrcyIsInRvdGFsQ2h1bmtDb3VudCIsImJsb2NrIiwiYmxvY2tJbmRleCIsImNodW5rcyIsImNodW5rSW5kZXgiLCJ1cGxvYWRDaHVuayIsImNvbmNhdENodW5rcyIsImlzVGFza1F1ZXVlRmluaXNoIiwib25GaW5pc2giLCJjYXRjaCIsImlzU3VjY2VzcyIsImVuZERhdGUiLCJvblRhc2tGYWlsIiwiaXNGaXJzdENodW5rSW5CbG9jayIsInByZXZDaHVuayIsImdldFVwbG9hZEJsb2NrVXJsIiwiZ2V0VXBsb2FkQ2h1bmtVcmwiLCJob3N0Iiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucHJvZ3Jlc3MiLCJsZW5ndGhDb21wdXRhYmxlIiwicHJvZ3Jlc3MiLCJmaW5pc2hlZEJsb2Nrc1NpemUiLCJsb2FkZWQiLCJvblRhc2tQcm9ncmVzcyIsInJlc3BvbnNlVGV4dCIsIkpTT04iLCJwYXJzZSIsInByb2Nlc3NpbmciLCJfY2h1bmtJbmRleCIsImhhc05leHRDaHVua0luVGhpc0Jsb2NrIiwiZW5jb2RlZEtleSIsImJ0b2EiLCJnZXRNYWtlRmlsZVVybCIsImN0eExpc3RTdHJpbmciLCJvblRhc2tTdWNjZXNzIiwicmV0cnlUYXNrIiwib25UYXNrUmV0cnkiLCJibG9ja1NpemUiLCJmaWxlU2l6ZSIsInJldHJ5IiwiRGlyZWN0VXBsb2FkUGF0dGVybiIsInVwbG9hZEZpbGUiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidG90YWwiLCJjcmVhdGVGb3JtRGF0YSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJDaHVuayIsIkJsb2NrIiwiX0Jhc2VUYXNrMiIsIl9CYXNlVGFzazMiLCJfQmFzZVRhc2siLCJjaHVua1NpemUiLCJfYmxvY2tzIiwiX2Jsb2NrU2l6ZSIsIl9jaHVua1NpemUiLCJibG9ja0NvdW50IiwiYXJyYXkiLCJfY2h1bmtzIiwiX3Byb2Nlc3NpbmciLCJfZGF0YSIsIl9zdGFydCIsIl9lbmQiLCJzcGxpY2VCbG9jazJDaHVuayIsImNodW5rQ291bnQiLCJfYmxvY2siLCJfaG9zdCIsIl9jdHgiLCJEaXJlY3RUYXNrIiwiVVVJRCIsIkhUTUxDYW52YXNFbGVtZW50IiwiY2FsbGJhY2siLCJxdWFsaXR5IiwiYmluU3RyIiwiYXRvYiIsInRvRGF0YVVSTCIsIkJsb2IiLCJERUZJTkVfUFJPUEVSVFkiLCJfYmFiZWxQb2x5ZmlsbCIsInBhZFN0YXJ0IiwicGFkRW5kIiwiZXNjYXBlIiwib3JpZ2luYWwiLCJoaW50Iiwic3ltYm9scyIsInBhdGgiLCJwYXJncyIsImhvbGRlciIsInJlZ0V4cCIsInJlcGxhY2VyIiwicGFydCIsIiRyZSIsIiRldmVyeSIsIiRmaWx0ZXIiLCIkZmluZCIsImZvcmNlZCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiY3JlYXRlUHJvcGVydHkiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIkcmVkdWNlIiwidXBUbyIsImNsb25lZCIsIiRzb21lIiwiJHNvcnQiLCJub3ciLCJseiIsIm51bSIsInRvSVNPU3RyaW5nIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwidG9KU09OIiwicHYiLCJUT19QUklNSVRJVkUiLCJEYXRlUHJvdG8iLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiRlByb3RvIiwibmFtZVJFIiwic3FydCIsIiRhY29zaCIsImFjb3NoIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiYXNpbmgiLCIkYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwicm91bmRUaWVzVG9FdmVuIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxOMTAiLCJsb2cyIiwic2luaCIsIkUiLCJ0YW5oIiwidHJ1bmMiLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwiX2lzRmluaXRlIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJ0IiwiYWNjIiwieDIiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCIkZmFpbHMiLCIkdG9QcmVjaXNpb24iLCJ0b1ByZWNpc2lvbiIsInByZWNpc2lvbiIsIiRmcmVlemUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldFByb3RvdHlwZU9mIiwiJGlzRXh0ZW5zaWJsZSIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRzZWFsIiwiSW50ZXJuYWwiLCJHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInNhbWVDb25zdHJ1Y3RvciIsImlzVGhlbmFibGUiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJwZXJmb3JtIiwiaXNSZWplY3QiLCJfbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsImFicnVwdCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJnZXRQcm90byIsInJlY2VpdmVyIiwic2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsIiRmbGFncyIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwiJG1hdGNoIiwicmVnZXhwIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwiU1BMSVQiLCIkc3BsaXQiLCJfc3BsaXQiLCIkcHVzaCIsIkxFTkdUSCIsIk5QQ0ciLCJsaW1pdCIsInNlcGFyYXRvcjIiLCJsYXN0SW5kZXgiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwiJGF0IiwiY29kZVBvaW50QXQiLCJjb250ZXh0IiwiJGVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCJjb2xvciIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJ3a3NEZWZpbmUiLCJrZXlPZiIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiJGluY2x1ZGVzIiwiYXNhcCIsImlzRXJyb3IiLCJpYWRkaCIsIngwIiwieDEiLCJ5MCIsInkxIiwiJHgwIiwiJHgxIiwiJHkwIiwiaW11bGgiLCJ1IiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwiaXN1YmgiLCJ1bXVsaCIsIl9fZGVmaW5lR2V0dGVyX18iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiJHZhbHVlcyIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCJtZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiZGVsZXRlTWV0YWRhdGEiLCJTZXQiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiYXQiLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsInJ4IiwiJHBhZCIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsImNvbGxlY3Rpb25zIiwiQ29sbGVjdGlvbiIsIiR0YXNrIiwicGFydGlhbCIsIm5hdmlnYXRvciIsIk1TSUUiLCJ1c2VyQWdlbnQiLCJ0aW1lIiwic2V0SW50ZXJ2YWwiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwicmVjb3JkIiwiaGFzT3duIiwiX19hd2FpdCIsInVud3JhcHBlZCIsImVucXVldWUiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInByZXZpb3VzUHJvbWlzZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiaXRlcmF0b3JTeW1ib2wiLCJPcCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJwb3AiLCJza2lwVGVtcFJlc2V0Iiwic3RvcCIsInJvb3RFbnRyeSIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsSUFDQSxrQkFBQUcsZ0JBQUFDLElBQ0FELFVBQUFILEdBQ0EsZ0JBQUFDLFNBQ0FBLFFBQUEsTUFBQUQsSUFFQUQsRUFBQSxNQUFBQyxLQUNDSyxLQUFBLFdBQ0QsTUNBZ0IsVUFBVUMsR0NOMUIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFQLE9BR0EsSUFBQUMsR0FBQU8sRUFBQUQsSUFDQUUsRUFBQUYsRUFDQUcsR0FBQSxFQUNBVixXQVVBLE9BTkFLLEdBQUFFLEdBQUFJLEtBQUFWLEVBQUFELFFBQUFDLElBQUFELFFBQUFNLEdBR0FMLEVBQUFTLEdBQUEsRUFHQVQsRUFBQUQsUUF2QkEsR0FBQVEsS0ErREEsT0FuQ0FGLEdBQUFNLEVBQUFQLEVBR0FDLEVBQUFPLEVBQUFMLEVBR0FGLEVBQUFHLEVBQUEsU0FBQUssR0FBMkMsTUFBQUEsSUFHM0NSLEVBQUFTLEVBQUEsU0FBQWYsRUFBQWdCLEVBQUFDLEdBQ0FYLEVBQUFZLEVBQUFsQixFQUFBZ0IsSUFDQUcsT0FBQUMsZUFBQXBCLEVBQUFnQixHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVgsRUFBQWtCLEVBQUEsU0FBQXZCLEdBQ0EsR0FBQWdCLEdBQUFoQixLQUFBd0IsV0FDQSxXQUEyQixNQUFBeEIsR0FBQSxTQUMzQixXQUFpQyxNQUFBQSxH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LEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLElBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FD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R0FBQXIwQixLQUFBdTJDLFdBQUFsMkMsRUFDQSxJQUFBZzBCLEVBQUFnaUIsZUFHQSxNQUZBcjJDLE1BQUFteEMsU0FBQTljLEVBQUFvaUIsV0FBQXBpQixFQUFBaWlCLFVBQ0FFLEVBQUFuaUIsR0FDQXFoQixJQUtBNWMsTUFBQSxTQUFBcWQsR0FDQSxPQUFBOTFDLEdBQUFMLEtBQUF1MkMsV0FBQS92QyxPQUFBLEVBQThDbkcsR0FBQSxJQUFRQSxFQUFBLENBQ3RELEdBQUFnMEIsR0FBQXIwQixLQUFBdTJDLFdBQUFsMkMsRUFDQSxJQUFBZzBCLEVBQUE4aEIsV0FBQSxDQUNBLEdBQUF4QixHQUFBdGdCLEVBQUFvaUIsVUFDQSxjQUFBOUIsRUFBQXp5QyxLQUFBLENBQ0EsR0FBQTAyQyxHQUFBakUsRUFBQXJ0QyxHQUNBa3ZDLEdBQUFuaUIsR0FFQSxNQUFBdWtCLElBTUEsU0FBQXhwQixPQUFBLDBCQUdBeXBCLGNBQUEsU0FBQXhoQyxFQUFBMCtCLEVBQUFDLEdBYUEsTUFaQWgyQyxNQUFBdTFDLFVBQ0F6bEMsU0FBQWhELEVBQUF1SyxHQUNBMCtCLGFBQ0FDLFdBR0EsU0FBQWgyQyxLQUFBcUgsU0FHQXJILEtBQUFzSCxJQUFBbEUsR0FHQXN5QyxLQU9BLGdCQUFBOXpDLEtBQ0EsZ0JBQUFnQyxlQUNBLGdCQUFBRSxXQUFBOUQsUXZUZ3VUNkJPLEtBQUtYLEVBQVNNLEVBQW9CIiwiZmlsZSI6InFpbml1NGpzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlFpbml1XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlFpbml1XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlFpbml1XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlFpbml1XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTE4KTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMilcbiAgLCBjb3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KVxuICAsIGhpZGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpXG4gICwgcmVkZWZpbmUgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMylcbiAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KVxuICAgICwga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmKHRhcmdldClyZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KWV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHN0b3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSlcbiAgLCBTeW1ib2wgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5TeW1ib2xcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFuT2JqZWN0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG4gICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oNikgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNylcbiAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNikgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgaGlkZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcbiAgLCBoYXMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuICAsIFNSQyAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpKCdzcmMnKVxuICAsIFRPX1NUUklORyA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddXG4gICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI0KS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywga2V5LCB2YWwsIHNhZmUpe1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmKE9ba2V5XSA9PT0gdmFsKXJldHVybjtcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYoTyA9PT0gZ2xvYmFsKXtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaWYoIXNhZmUpe1xuICAgICAgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihPW2tleV0pT1trZXldID0gdmFsO1xuICAgICAgZWxzZSBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGZhaWxzICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpXG4gICwgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG4gICwgcXVvdCAgICA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpXG4gICAgLCBwMSA9ICc8JyArIHRhZztcbiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpe1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KVxuICAsIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBwSUUgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpXG4gICwgY3JlYXRlRGVzYyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KVxuICAsIHRvSU9iamVjdCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG4gICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oNikgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG4gICwgdG9PYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgSUVfUFJPVE8gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc1KSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cbi8qKiovIH0pLFxuLyogMTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuLyoqKi8gfSksXG4vKiAxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIGFyZyl7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uKCl7fSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG4gICwgSU9iamVjdCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KVxuICAsIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAsIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KVxuICAsIGFzYyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzApO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWFxuICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcylcbiAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgY29yZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpXG4gICwgZmFpbHMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAyNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgTWFwICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEzKVxuICAsICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgc2hhcmVkICA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpKCdtZXRhZGF0YScpXG4gICwgc3RvcmUgICA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChfX3dlYnBhY2tfcmVxdWlyZV9fKDExNikpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKXtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmKCF0YXJnZXRNZXRhZGF0YSl7XG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmKCFrZXlNZXRhZGF0YSl7XG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCl7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKVxuICAgICwga2V5cyAgICAgICAgPSBbXTtcbiAgaWYobWV0YWRhdGFNYXApbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbihfLCBrZXkpeyBrZXlzLnB1c2goa2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24oTyl7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5pZihfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKXtcbiAgdmFyIExJQlJBUlkgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKVxuICAgICwgZ2xvYmFsICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMilcbiAgICAsIGZhaWxzICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpXG4gICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAgICwgJHR5cGVkICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpXG4gICAgLCAkYnVmZmVyICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MilcbiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KVxuICAgICwgYW5JbnN0YW5jZSAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXG4gICAgLCBwcm9wZXJ0eURlc2MgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSlcbiAgICAsIGhpZGUgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAgICwgcmVkZWZpbmVBbGwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpXG4gICAgLCB0b0ludGVnZXIgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMClcbiAgICAsIHRvTGVuZ3RoICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG4gICAgLCB0b0luZGV4ICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOClcbiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKVxuICAgICwgaGFzICAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG4gICAgLCBzYW1lICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTApXG4gICAgLCBjbGFzc29mICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSlcbiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICAgLCB0b09iamVjdCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpXG4gICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMylcbiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KVxuICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpLmZcbiAgICAsIGdldEl0ZXJGbiAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KVxuICAgICwgdWlkICAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpXG4gICAgLCB3a3MgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuICAgICwgY3JlYXRlQXJyYXlNZXRob2QgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG4gICAgLCBjcmVhdGVBcnJheUluY2x1ZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OClcbiAgICAsIHNwZWNpZXNDb25zdHJ1Y3RvciAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KVxuICAgICwgQXJyYXlJdGVyYXRvcnMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oODUpXG4gICAgLCBJdGVyYXRvcnMgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MilcbiAgICAsICRpdGVyRGV0ZWN0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KVxuICAgICwgc2V0U3BlY2llcyAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpXG4gICAgLCBhcnJheUZpbGwgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MClcbiAgICAsIGFycmF5Q29weVdpdGhpbiAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwKVxuICAgICwgJERQICAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNylcbiAgICAsICRHT1BEICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuICAgICwgZFAgICAgICAgICAgICAgICAgICA9ICREUC5mXG4gICAgLCBnT1BEICAgICAgICAgICAgICAgID0gJEdPUEQuZlxuICAgICwgUmFuZ2VFcnJvciAgICAgICAgICA9IGdsb2JhbC5SYW5nZUVycm9yXG4gICAgLCBUeXBlRXJyb3IgICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAgICwgVWludDhBcnJheSAgICAgICAgICA9IGdsb2JhbC5VaW50OEFycmF5XG4gICAgLCBBUlJBWV9CVUZGRVIgICAgICAgID0gJ0FycmF5QnVmZmVyJ1xuICAgICwgU0hBUkVEX0JVRkZFUiAgICAgICA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSXG4gICAgLCBCWVRFU19QRVJfRUxFTUVOVCAgID0gJ0JZVEVTX1BFUl9FTEVNRU5UJ1xuICAgICwgUFJPVE9UWVBFICAgICAgICAgICA9ICdwcm90b3R5cGUnXG4gICAgLCBBcnJheVByb3RvICAgICAgICAgID0gQXJyYXlbUFJPVE9UWVBFXVxuICAgICwgJEFycmF5QnVmZmVyICAgICAgICA9ICRidWZmZXIuQXJyYXlCdWZmZXJcbiAgICAsICREYXRhVmlldyAgICAgICAgICAgPSAkYnVmZmVyLkRhdGFWaWV3XG4gICAgLCBhcnJheUZvckVhY2ggICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMClcbiAgICAsIGFycmF5RmlsdGVyICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgyKVxuICAgICwgYXJyYXlTb21lICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpXG4gICAgLCBhcnJheUV2ZXJ5ICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNClcbiAgICAsIGFycmF5RmluZCAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAgICwgYXJyYXlGaW5kSW5kZXggICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpXG4gICAgLCBhcnJheUluY2x1ZGVzICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKVxuICAgICwgYXJyYXlJbmRleE9mICAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpXG4gICAgLCBhcnJheVZhbHVlcyAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzXG4gICAgLCBhcnJheUtleXMgICAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMua2V5c1xuICAgICwgYXJyYXlFbnRyaWVzICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXNcbiAgICAsIGFycmF5TGFzdEluZGV4T2YgICAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mXG4gICAgLCBhcnJheVJlZHVjZSAgICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2VcbiAgICAsIGFycmF5UmVkdWNlUmlnaHQgICAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0XG4gICAgLCBhcnJheUpvaW4gICAgICAgICAgID0gQXJyYXlQcm90by5qb2luXG4gICAgLCBhcnJheVNvcnQgICAgICAgICAgID0gQXJyYXlQcm90by5zb3J0XG4gICAgLCBhcnJheVNsaWNlICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZVxuICAgICwgYXJyYXlUb1N0cmluZyAgICAgICA9IEFycmF5UHJvdG8udG9TdHJpbmdcbiAgICAsIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nXG4gICAgLCBJVEVSQVRPUiAgICAgICAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICAgLCBUQUcgICAgICAgICAgICAgICAgID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICAgLCBUWVBFRF9DT05TVFJVQ1RPUiAgID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpXG4gICAgLCBERUZfQ09OU1RSVUNUT1IgICAgID0gdWlkKCdkZWZfY29uc3RydWN0b3InKVxuICAgICwgQUxMX0NPTlNUUlVDVE9SUyAgICA9ICR0eXBlZC5DT05TVFJcbiAgICAsIFRZUEVEX0FSUkFZICAgICAgICAgPSAkdHlwZWQuVFlQRURcbiAgICAsIFZJRVcgICAgICAgICAgICAgICAgPSAkdHlwZWQuVklFV1xuICAgICwgV1JPTkdfTEVOR1RIICAgICAgICA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uKE8sIGxlbmd0aCl7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciBzdHJpY3RUb0xlbmd0aCA9IGZ1bmN0aW9uKGl0LCBTQU1FKXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHZhciBudW1iZXIgPSAraXRcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoaXQpO1xuICAgIGlmKFNBTUUgJiYgIXNhbWUobnVtYmVyLCBsZW5ndGgpKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9O1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uKGl0LCBCWVRFUyl7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihpdCl7XG4gICAgaWYoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KXJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uKEMsIGxlbmd0aCl7XG4gICAgaWYoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uKE8sIGxpc3Qpe1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24oQywgbGlzdCl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihpdCwga2V5LCBpbnRlcm5hbCl7XG4gICAgZFAoaXQsIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9fSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyosIG1hcGZuLCB0aGlzQXJnICovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KHNvdXJjZSlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKyl7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZihtYXBwaW5nICYmIGFMZW4gPiAyKW1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvcihpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspe1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyouLi5pdGVtcyovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qLCBlbmQgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQsIGVuZCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCl7XG4gICAgICB2YXIgdGhhdCAgID0gdGhpc1xuICAgICAgICAsIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aFxuICAgICAgICAsIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMilcbiAgICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAgICwgdmFsdWU7XG4gICAgICB3aGlsZShpbmRleCA8IG1pZGRsZSl7XG4gICAgICAgIHZhbHVlICAgICAgICAgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKXtcbiAgICAgIHZhciBPICAgICAgPSB2YWxpZGF0ZSh0aGlzKVxuICAgICAgICAsIGxlbmd0aCA9IE8ubGVuZ3RoXG4gICAgICAgICwgJGJlZ2luID0gdG9JbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiwgb2Zmc2V0ICovKXtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKVxuICAgICAgLCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgICAgLCBzcmMgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgaWYobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZShpbmRleCA8IGxlbil0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpe1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KXtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2Mpe1xuICAgIGlmKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApe1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IGVsc2UgcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZighQUxMX0NPTlNUUlVDVE9SUyl7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mICAgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogICAgICAgICAgICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKXtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogICAgICAgICAgJHNsaWNlLFxuICAgIHNldDogICAgICAgICAgICAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiAgICBmdW5jdGlvbigpeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6ICAgICAgIGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpe1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgICAgICAgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSdcbiAgICAgICwgSVNOVF9VSU5UOCA9IE5BTUUgIT0gJ1VpbnQ4QXJyYXknXG4gICAgICAsIEdFVFRFUiAgICAgPSAnZ2V0JyArIEtFWVxuICAgICAgLCBTRVRURVIgICAgID0gJ3NldCcgKyBLRVlcbiAgICAgICwgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXVxuICAgICAgLCBCYXNlICAgICAgID0gVHlwZWRBcnJheSB8fCB7fVxuICAgICAgLCBUQUMgICAgICAgID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KVxuICAgICAgLCBGT1JDRUQgICAgID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlZcbiAgICAgICwgTyAgICAgICAgICA9IHt9XG4gICAgICAsIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4LCB2YWx1ZSl7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZihDTEFNUEVEKXZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZihGT1JDRUQpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAgICAgLCBvZmZzZXQgPSAwXG4gICAgICAgICAgLCBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmKCFpc09iamVjdChkYXRhKSl7XG4gICAgICAgICAgbGVuZ3RoICAgICA9IHN0cmljdFRvTGVuZ3RoKGRhdGEsIHRydWUpXG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciAgICAgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGlmKCRsZW4gJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggPCAwKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpe1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYoISRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpe1xuICAgICAgLy8gVjggd29ya3Mgd2l0aCBpdGVyYXRvcnMsIGJ1dCBmYWlscyBpbiBtYW55IG90aGVyIGNhc2VzXG4gICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDU1MlxuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSl7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpcmV0dXJuIG5ldyBCYXNlKHN0cmljdFRvTGVuZ3RoKGRhdGEsIElTTlRfVUlOVDgpKTtcbiAgICAgICAgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighKGtleSBpbiBUeXBlZEFycmF5KSloaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmKCFMSUJSQVJZKVR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yICAgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXVxuICAgICAgLCBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpXG4gICAgICAsICRpdGVyYXRvciAgICAgICAgID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZihDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpe1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTLFxuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZighKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7c2V0OiAkc2V0fSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpLCBOQU1FLCB7dG9TdHJpbmc6IGFycmF5VG9TdHJpbmd9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHtzbGljZTogJHNsaWNlfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKVxuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7dG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ30pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9O1xuXG4vKioqLyB9KSxcbi8qIDI4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBNRVRBICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpKCdtZXRhJylcbiAgLCBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBoYXMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG4gICwgc2V0RGVzYyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIV9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7XG4gIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH19KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpe1xuICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6ICAgICAgTUVUQSxcbiAgTkVFRDogICAgIGZhbHNlLFxuICBmYXN0S2V5OiAgZmFzdEtleSxcbiAgZ2V0V2VhazogIGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuLyoqKi8gfSksXG4vKiAzMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBkUHMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTAzKVxuICAsIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MylcbiAgLCBJRV9QUk9UTyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpKCdJRV9QUk9UTycpXG4gICwgRW1wdHkgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MikoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIF9fd2VicGFja19yZXF1aXJlX18oNjUpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG4gIHZhciByZXN1bHQ7XG4gIGlmKE8gIT09IG51bGwpe1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNSlcbiAgLCBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNSlcbiAgLCBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDM2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciByZWRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqKi8gfSksXG4vKiAzNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGdsb2JhbCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuICAsIGRQICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KVxuICAsIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuICAsIFNQRUNJRVMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuLyoqKi8gfSksXG4vKiA0MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCd1bnNjb3BhYmxlcycpXG4gICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7XG5pZihBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpX193ZWJwYWNrX3JlcXVpcmVfXygxMikoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDQxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjdHggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG4gICwgY2FsbCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5KVxuICAsIGlzQXJyYXlJdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NylcbiAgLCBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCB0b0xlbmd0aCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcbiAgLCBnZXRJdGVyRm4gICA9IF9fd2VicGFja19yZXF1aXJlX18oODQpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuLyoqKi8gfSksXG4vKiA0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKioqLyB9KSxcbi8qIDQzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBkZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLmZcbiAgLCBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG4gICwgZmFpbHMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMylcbiAgLCBzcGFjZXMgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MClcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcblxuLyoqKi8gfSksXG4vKiA0NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpXG4gICwgVEFHID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG5cbi8qKiovIH0pLFxuLyogNDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKiovIH0pLFxuLyogNDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuICAsIHRvTGVuZ3RoICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcbiAgLCB0b0luZGV4ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogNDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnbG9iYWwgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMilcbiAgLCAkZXhwb3J0ICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCByZWRlZmluZSAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpXG4gICwgcmVkZWZpbmVBbGwgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KVxuICAsIG1ldGEgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIGZhaWxzICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVxuICAsICRpdGVyRGV0ZWN0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NClcbiAgLCBzZXRUb1N0cmluZ1RhZyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSAgICAgICAgICAgICA9IG5ldyBDXG4gICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgICAsIEhBU05UX0NIQUlOSU5HICAgICAgID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZVxuICAgICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KVxuICAgICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgICAgLCBBQ0NFUFRfSVRFUkFCTEVTICAgICA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgICAgLCBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpXG4gICAgICAgICAgLCBpbmRleCAgICAgPSA1O1xuICAgICAgICB3aGlsZShpbmRleC0tKSRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICAgIH0pO1xuICAgIGlmKCFBQ0NFUFRfSVRFUkFCTEVTKXsgXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZihCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKWZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZihJU19XRUFLICYmIHByb3RvLmNsZWFyKWRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDUwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaGlkZSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAsIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMylcbiAgLCBmYWlscyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMylcbiAgLCBkZWZpbmVkICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG4gICwgd2tzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgbGVuZ3RoLCBleGVjKXtcbiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSlcbiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pXG4gICAgLCBzdHJmbiAgICA9IGZuc1swXVxuICAgICwgcnhmbiAgICAgPSBmbnNbMV07XG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSl7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcblxuLyoqKi8gfSksXG4vKiA1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ICAgPSBhbk9iamVjdCh0aGlzKVxuICAgICwgcmVzdWx0ID0gJyc7XG4gIGlmKHRoYXQuZ2xvYmFsKSAgICAgcmVzdWx0ICs9ICdnJztcbiAgaWYodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7XG4gIGlmKHRoYXQudW5pY29kZSkgICAgcmVzdWx0ICs9ICd1JztcbiAgaWYodGhhdC5zdGlja3kpICAgICByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqKi8gfSksXG4vKiA1MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpe1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgY29mICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KVxuICAsIE1BVENIICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIElURVJBVE9SICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7XG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMil8fCAhX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbigpe1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbigpeyAvKiBlbXB0eSAqL30pO1xuICBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXygyKVtLXTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDU2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKiovIH0pLFxuLyogNTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMilcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDU4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgaGlkZSAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcbiAgLCB1aWQgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KVxuICAsIFRZUEVEICA9IHVpZCgndHlwZWRfYXJyYXknKVxuICAsIFZJRVcgICA9IHVpZCgndmlldycpXG4gICwgQUJWICAgID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldylcbiAgLCBDT05TVFIgPSBBQlZcbiAgLCBpID0gMCwgbCA9IDksIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZShpIDwgbCl7XG4gIGlmKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pe1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6ICAgIEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiAgVFlQRUQsXG4gIFZJRVc6ICAgVklFV1xufTtcblxuLyoqKi8gfSksXG4vKiA1OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBMb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9nKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9nLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiZFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZChvYmplY3QpIHtcbiAgICAgICAgICAgIGlmICghTG9nLl9lbmFibGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJsXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKCFMb2cuX2VuYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKCFMb2cuX2VuYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Iob2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIndcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHcob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoIUxvZy5fZW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS53YXJuKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKCFMb2cuX2VuYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZW5hYmxlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvZztcbn0oKTtcblxuTG9nLl9lbmFibGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gTG9nO1xuXG4vKioqLyB9KSxcbi8qIDYwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG5cbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcbiAgLCB0b0luZGV4ICA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpXG4gICwgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pe1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKVxuICAgICwgZW5kICAgID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG4vKioqLyB9KSxcbi8qIDYxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KVxuICAsIGNyZWF0ZURlc2MgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcbiAgaWYoaW5kZXggaW4gb2JqZWN0KSRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG4vKioqLyB9KSxcbi8qIDYyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMikuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cbi8qKiovIH0pLFxuLyogNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIE1BVENIID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoKGUpe1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcblxuLyoqKi8gfSksXG4vKiA2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMikuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4vKioqLyB9KSxcbi8qIDY2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBzZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXtcbiAgdmFyIFAsIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIGlmKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2Ype1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcblxuLyoqKi8gfSksXG4vKiA2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpXG4gICwgSVRFUkFUT1IgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbi8qKiovIH0pLFxuLyogNjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuLyoqKi8gfSksXG4vKiA2OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNyZWF0ZSAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMylcbiAgLCBkZXNjcmlwdG9yICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEyKShJdGVyYXRvclByb3RvdHlwZSwgX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cbi8qKiovIH0pLFxuLyogNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBMSUJSQVJZICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG4gICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgcmVkZWZpbmUgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKVxuICAsIGhpZGUgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcbiAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG4gICwgSXRlcmF0b3JzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKVxuICAsICRpdGVyQ3JlYXRlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OSlcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KVxuICAsIElURVJBVE9SICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cbi8qKiovIH0pLFxuLyogNzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcblxuLyoqKi8gfSksXG4vKiA3MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuXG4vKioqLyB9KSxcbi8qIDczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgbWFjcm90YXNrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MSkuc2V0XG4gICwgT2JzZXJ2ZXIgID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXJcbiAgLCBwcm9jZXNzICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIFByb21pc2UgICA9IGdsb2JhbC5Qcm9taXNlXG4gICwgaXNOb2RlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZihpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSlwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlKGhlYWQpe1xuICAgICAgZm4gICA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIGlmKGhlYWQpbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYocGFyZW50KXBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYoaXNOb2RlKXtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZihPYnNlcnZlcil7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWVcbiAgICAgICwgbm9kZSAgID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZihQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSl7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oZm4pe1xuICAgIHZhciB0YXNrID0ge2ZuOiBmbiwgbmV4dDogdW5kZWZpbmVkfTtcbiAgICBpZihsYXN0KWxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYoIWhlYWQpe1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiA3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpKEZ1bmN0aW9uLmNhbGwsIF9fd2VicGFja19yZXF1aXJlX18oMTYpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcblxuLyoqKi8gfSksXG4vKiA3NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NykoJ2tleXMnKVxuICAsIHVpZCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzkpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxuLyoqKi8gfSksXG4vKiA3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcbiAgLCBTUEVDSUVTICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDc3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKVxuICAsIGRlZmluZWQgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiA3OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MylcbiAgLCBkZWZpbmVkICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSl7XG4gIGlmKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMClcbiAgLCBkZWZpbmVkICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpXG4gICAgLCByZXMgPSAnJ1xuICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuXG4vKioqLyB9KSxcbi8qIDgwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcblxuLyoqKi8gfSksXG4vKiA4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY3R4ICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcbiAgLCBpbnZva2UgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKVxuICAsIGh0bWwgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpXG4gICwgY2VsICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MilcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpe1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKF9fd2VicGFja19yZXF1aXJlX18oMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAgIHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG5cbi8qKiovIH0pLFxuLyogODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMilcbiAgLCBERVNDUklQVE9SUyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNilcbiAgLCBMSUJSQVJZICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG4gICwgJHR5cGVkICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KVxuICAsIGhpZGUgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcbiAgLCByZWRlZmluZUFsbCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpXG4gICwgZmFpbHMgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpXG4gICwgYW5JbnN0YW5jZSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKVxuICAsIHRvSW50ZWdlciAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMClcbiAgLCB0b0xlbmd0aCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcbiAgLCBnT1BOICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpLmZcbiAgLCBkUCAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZlxuICAsIGFycmF5RmlsbCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MClcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpXG4gICwgQVJSQVlfQlVGRkVSICAgPSAnQXJyYXlCdWZmZXInXG4gICwgREFUQV9WSUVXICAgICAgPSAnRGF0YVZpZXcnXG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIFdST05HX0xFTkdUSCAgID0gJ1dyb25nIGxlbmd0aCEnXG4gICwgV1JPTkdfSU5ERVggICAgPSAnV3JvbmcgaW5kZXghJ1xuICAsICRBcnJheUJ1ZmZlciAgID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl1cbiAgLCAkRGF0YVZpZXcgICAgICA9IGdsb2JhbFtEQVRBX1ZJRVddXG4gICwgTWF0aCAgICAgICAgICAgPSBnbG9iYWwuTWF0aFxuICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgLCBJbmZpbml0eSAgICAgICA9IGdsb2JhbC5JbmZpbml0eVxuICAsIEJhc2VCdWZmZXIgICAgID0gJEFycmF5QnVmZmVyXG4gICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFic1xuICAsIHBvdyAgICAgICAgICAgID0gTWF0aC5wb3dcbiAgLCBmbG9vciAgICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nXG4gICwgTE4yICAgICAgICAgICAgPSBNYXRoLkxOMlxuICAsIEJVRkZFUiAgICAgICAgID0gJ2J1ZmZlcidcbiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJ1xuICAsIEJZVEVfT0ZGU0VUICAgID0gJ2J5dGVPZmZzZXQnXG4gICwgJEJVRkZFUiAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVJcbiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIXG4gICwgJE9GRlNFVCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbnZhciBwYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKHZhbHVlLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgYnVmZmVyID0gQXJyYXkobkJ5dGVzKVxuICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzICA9IGVNYXggPj4gMVxuICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMFxuICAgICwgaSAgICAgID0gMFxuICAgICwgcyAgICAgID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMFxuICAgICwgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpXG4gIGlmKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSl7XG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpe1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmKHZhbHVlICogYyA+PSAyKXtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IGVNYXgpe1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvcig7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xudmFyIHVucGFja0lFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzID0gZU1heCA+PiAxXG4gICAgLCBuQml0cyA9IGVMZW4gLSA3XG4gICAgLCBpICAgICA9IG5CeXRlcyAtIDFcbiAgICAsIHMgICAgID0gYnVmZmVyW2ktLV1cbiAgICAsIGUgICAgID0gcyAmIDEyN1xuICAgICwgbTtcbiAgcyA+Pj0gNztcbiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZihlID09PSAwKXtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYoZSA9PT0gZU1heCl7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59O1xuXG52YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpe1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn07XG52YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn07XG52YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oQywga2V5LCBpbnRlcm5hbCl7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH19KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59O1xudmFyIHNldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn07XG5cbnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXtcbiAgYW5JbnN0YW5jZSh0aGF0LCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gIHZhciBudW1iZXJMZW5ndGggPSArbGVuZ3RoXG4gICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpO1xuICBpZihudW1iZXJMZW5ndGggIT0gYnl0ZUxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gIHJldHVybiBieXRlTGVuZ3RoO1xufTtcblxuaWYoISR0eXBlZC5BQlYpe1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgIHZhciBieXRlTGVuZ3RoID0gdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpO1xuICAgIHRoaXMuX2IgICAgICAgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF1cbiAgICAgICwgb2Zmc2V0ICAgICAgID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmKERFU0NSSVBUT1JTKXtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYoIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcjsgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSl7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7ICl7XG4gICAgICBpZighKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9O1xuICAgIGlmKCFMSUJSQVJZKUFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKVxuICAgICwgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG5cbi8qKiovIH0pLFxuLyogODMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuICAsIGNvcmUgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNClcbiAgLCBMSUJSQVJZICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpXG4gICwgd2tzRXh0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMilcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTtcblxuLyoqKi8gfSksXG4vKiA4NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgY2xhc3NvZiAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSlcbiAgLCBJVEVSQVRPUiAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdpdGVyYXRvcicpXG4gICwgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Mik7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuLyoqKi8gfSksXG4vKiA4NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKVxuICAsIHN0ZXAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMClcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MilcbiAgLCB0b0lPYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCkoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8qKiovIH0pLFxuLyogODYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0RpcmVjdFRhc2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7XG5cbnZhciBfRGlyZWN0VGFzazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EaXJlY3RUYXNrKTtcblxudmFyIF9DaHVua1Rhc2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMyk7XG5cbnZhciBfVVVJRCA9IF9fd2VicGFja19yZXF1aXJlX18oMTI1KTtcblxudmFyIF9VVUlEMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1VVSUQpO1xuXG52YXIgX1VwbG9hZGVyQnVpbGRlciA9IF9fd2VicGFja19yZXF1aXJlX18oODcpO1xuXG52YXIgX1VwbG9hZGVyQnVpbGRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VcGxvYWRlckJ1aWxkZXIpO1xuXG52YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG52YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXG52YXIgX1NpbXBsZVVwbG9hZExpc3RlbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpO1xuXG52YXIgX1NpbXBsZVVwbG9hZExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpbXBsZVVwbG9hZExpc3RlbmVyKTtcblxudmFyIF9EaXJlY3RVcGxvYWRQYXR0ZXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpO1xuXG52YXIgX0RpcmVjdFVwbG9hZFBhdHRlcm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGlyZWN0VXBsb2FkUGF0dGVybik7XG5cbnZhciBfQ2h1bmtVcGxvYWRQYXR0ZXJuID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjEpO1xuXG52YXIgX0NodW5rVXBsb2FkUGF0dGVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaHVua1VwbG9hZFBhdHRlcm4pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDEyNik7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTI3KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFVwbG9hZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVwbG9hZGVyKGJ1aWxkZXIpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVwbG9hZGVyKTtcblxuICAgICAgICB0aGlzLkZJTEVfSU5QVVRfRUxfSUQgPSAncWluaXU0anMtaW5wdXQnO1xuICAgICAgICB0aGlzLl90YXNrUXVldWUgPSBbXTsgLy/ku7vliqHpmJ/liJdcbiAgICAgICAgdGhpcy5fdGFza2luZyA9IGZhbHNlOyAvL+S7u+WKoeaJp+ihjOS4rVxuICAgICAgICB0aGlzLl9zY2FsZSA9IFtdOyAvL+e8qeaUvuWkp+WwjyzpmZDlrprpq5jluqbnrYnmr5TnvKnmlL5baDoyMDAsdzowXSzpmZDlrprlrr3luqbnrYnmr5TnvKnmlL5baDowLHc6MTAwXSzpmZDlrprplb/lrr1baDoyMDAsdzoxMDBdXG4gICAgICAgIHRoaXMuX3NhdmVLZXkgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWkhOeQhuaWh+S7tlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oYW5kbGVGaWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8v5aaC5p6c5rKh5pyJ6YCJ5Lit5paH5Lu25bCx6L+U5ZueXG4gICAgICAgICAgICBpZiAoX3RoaXMyLmZpbGVJbnB1dC5maWxlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8v55Sf5oiQdGFza1xuICAgICAgICAgICAgX3RoaXMyLmdlbmVyYXRlVGFzaygpO1xuICAgICAgICAgICAgLy/mmK/lkKbkuK3mlq3ku7vliqFcbiAgICAgICAgICAgIHZhciBpc0ludGVycnVwdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGludGVyY2VwdGVkVGFza3MgPSBbXTtcbiAgICAgICAgICAgIC8v5Lu75Yqh5oum5oiq5Zmo6L+H5rukXG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfdGhpczIudGFza1F1ZXVlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFzayA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBfdGhpczIuaW50ZXJjZXB0b3JzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyY2VwdG9yID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mi6bmiKrnlJ/mlYhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJjZXB0b3Iub25JbnRlcmNlcHQodGFzaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJjZXB0ZWRUYXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCLku7vliqHmi6bmiKrlmajmi6bmiKrkuobku7vliqE6XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQodGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5omT5pat55Sf5pWIXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyY2VwdG9yLm9uSW50ZXJydXB0KHRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5bCG5omT5pat5qCH5b+X5L2N6K6+5Li6dHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ludGVycnVwdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNJbnRlcnJ1cHQpIHtcbiAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LncoXCLku7vliqHmi6bmiKrlmajkuK3mlq3kuobku7vliqHpmJ/liJdcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy/ku47ku7vliqHpmJ/liJfkuK3ljrvpmaTku7vliqFcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBpbnRlcmNlcHRlZFRhc2tzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGFzayA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpczIudGFza1F1ZXVlLmluZGV4T2YoX3Rhc2spO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi50YXNrUXVldWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL+Wbnuiwg+WHveaVsOWHveaVsFxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzMi5saXN0ZW5lci5vblJlYWR5KF90aGlzMi50YXNrUXVldWUpO1xuICAgICAgICAgICAgLy/lpITnkIblm77niYdcbiAgICAgICAgICAgIF90aGlzMi5oYW5kbGVJbWFnZXMoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvL+iHquWKqOS4iuS8oFxuICAgICAgICAgICAgICAgIGlmIChfdGhpczIuYXV0bykge1xuICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCLlvIDlp4voh6rliqjkuIrkvKBcIik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlc29sdmVVVUlEID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHZhciByZSA9IC9cXCRcXCh1dWlkXFwpLztcbiAgICAgICAgICAgIGlmIChyZS50ZXN0KHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZShyZSwgX1VVSUQyLmRlZmF1bHQudXVpZCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlc29sdmVJbWFnZUluZm8gPSBmdW5jdGlvbiAoYmxvYiwgcykge1xuICAgICAgICAgICAgdmFyIHdpZHRoUmUgPSAvXFwkXFwoaW1hZ2VJbmZvXFwud2lkdGhcXCkvO1xuICAgICAgICAgICAgdmFyIGhlaWdodFJlID0gL1xcJFxcKGltYWdlSW5mb1xcLmhlaWdodFxcKS87XG4gICAgICAgICAgICBpZiAoIXdpZHRoUmUudGVzdChzKSAmJiAhaGVpZ2h0UmUudGVzdChzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSh3aWR0aFJlLCBpbWcud2lkdGgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoaGVpZ2h0UmUsIGltZy5oZWlnaHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uU2F2ZUtleVJlc29sdmVkID0gZnVuY3Rpb24gKHNhdmVLZXkpIHtcbiAgICAgICAgICAgIF90aGlzMi5fdG9rZW5TaGFyZSA9IF90aGlzMi5fdG9rZW5TaGFyZSAmJiBfdGhpczIuX3NhdmVLZXkgPT0gc2F2ZUtleTtcbiAgICAgICAgICAgIHJldHVybiBzYXZlS2V5O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9yZXRyeSA9IGJ1aWxkZXIuZ2V0UmV0cnk7XG4gICAgICAgIHRoaXMuX3NpemUgPSBidWlsZGVyLmdldFNpemU7XG4gICAgICAgIHRoaXMuX2NodW5rID0gYnVpbGRlci5nZXRDaHVuaztcbiAgICAgICAgdGhpcy5fYXV0byA9IGJ1aWxkZXIuZ2V0QXV0bztcbiAgICAgICAgdGhpcy5fbXVsdGlwbGUgPSBidWlsZGVyLmdldE11bHRpcGxlO1xuICAgICAgICB0aGlzLl9hY2NlcHQgPSBidWlsZGVyLmdldEFjY2VwdDtcbiAgICAgICAgdGhpcy5fYnV0dG9uID0gYnVpbGRlci5nZXRCdXR0b247XG4gICAgICAgIHRoaXMuX2J1dHRvbkV2ZW50TmFtZSA9IGJ1aWxkZXIuZ2V0QnV0dG9uRXZlbnROYW1lO1xuICAgICAgICB0aGlzLl9jb21wcmVzcyA9IGJ1aWxkZXIuZ2V0Q29tcHJlc3M7XG4gICAgICAgIHRoaXMuX3NjYWxlID0gYnVpbGRlci5nZXRTY2FsZTtcbiAgICAgICAgdGhpcy5fc2F2ZUtleSA9IGJ1aWxkZXIuZ2V0U2F2ZUtleTtcbiAgICAgICAgdGhpcy5fdG9rZW5GdW5jID0gYnVpbGRlci5nZXRUb2tlbkZ1bmM7XG4gICAgICAgIHRoaXMuX3Rva2VuU2hhcmUgPSBidWlsZGVyLmdldFRva2VuU2hhcmU7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0gT2JqZWN0LmFzc2lnbihuZXcgX1NpbXBsZVVwbG9hZExpc3RlbmVyMi5kZWZhdWx0KCksIGJ1aWxkZXIuZ2V0TGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl9pbnRlcmNlcHRvcnMgPSBidWlsZGVyLmdldEludGVyY2VwdG9ycztcbiAgICAgICAgdGhpcy5fZG9tYWluID0gYnVpbGRlci5nZXREb21haW47XG4gICAgICAgIHRoaXMuX2ZpbGVJbnB1dElkID0gdGhpcy5GSUxFX0lOUFVUX0VMX0lEICsgXCJfXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgX0xvZzIuZGVmYXVsdC5lbmFibGUgPSBidWlsZGVyLmdldElzRGVidWc7XG4gICAgICAgIHRoaXMudmFsaWRhdGVPcHRpb25zKCk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDliJ3lp4vljJbmk43kvZxcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKFVwbG9hZGVyLCBbe1xuICAgICAgICBrZXk6IFwiaW5pdFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdEZpbGVJbnB1dEVsKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWIneWni+WMlmZpbGUgaW5wdXQgZWxlbWVudFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImluaXRGaWxlSW5wdXRFbFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdEZpbGVJbnB1dEVsKCkge1xuICAgICAgICAgICAgLy/mn6Xor6Llt7Lnu4/lrZjlnKjnmoRmaWxlIGlucHV0XG4gICAgICAgICAgICB2YXIgZXhpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLl9maWxlSW5wdXRJZCk7XG4gICAgICAgICAgICAvL+WIm+W7umlucHV05YWD57SgXG4gICAgICAgICAgICB0aGlzLl9maWxlSW5wdXQgPSBleGlzdCA/IGV4aXN0IDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7IC8vdHlwZSBmaWxlXG4gICAgICAgICAgICB0aGlzLmZpbGVJbnB1dC5pZCA9IHRoaXMuX2ZpbGVJbnB1dElkOyAvL2lkIOaWueS+v+WQjumdouafpeaJvlxuICAgICAgICAgICAgdGhpcy5maWxlSW5wdXQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsgLy/pmpDol49maWxlIGlucHV0XG4gICAgICAgICAgICAvL+WkmuaWh+S7tlxuICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAvL+WkmuaWh+S7tlxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0Lm11bHRpcGxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8v5paH5Lu257G75Z6LXG4gICAgICAgICAgICBpZiAodGhpcy5hY2NlcHQgJiYgdGhpcy5hY2NlcHQubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgYWNjZXB0VmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHRoaXMuYWNjZXB0W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdFZhbHVlICs9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0VmFsdWUgKz0gJywnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yNCA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCAmJiBfaXRlcmF0b3I0LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFjY2VwdFZhbHVlLmVuZHNXaXRoKCcsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXB0VmFsdWUgPSBhY2NlcHRWYWx1ZS5zdWJzdHJpbmcoMCwgYWNjZXB0VmFsdWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0LmFjY2VwdCA9IGFjY2VwdFZhbHVlO1xuICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcImFjY2VwdFxcdTdDN0JcXHU1NzhCIFwiICsgYWNjZXB0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy/lsIZpbnB1dOWFg+e0oOa3u+WKoOWIsGJvZHnlrZDoioLngrnnmoTmnKvlsL5cbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5maWxlSW5wdXQpO1xuICAgICAgICAgICAgLy/pgInmi6nmlofku7bnm5HlkKzlmahcbiAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlRmlsZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9idXR0b24gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuX2J1dHRvbik7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5fYnV0dG9uRXZlbnROYW1lLCB0aGlzLmNob29zZUZpbGUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOS4iuS8oOWujOaIkOaIluiAheWksei0peWQjizlr7nmnKzmrKHkuIrkvKDku7vliqHov5vooYzmuIXmiatcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZXNldFVwbG9hZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldFVwbG9hZGVyKCkge1xuICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKFwi5byA5aeL6YeN572uIHVwbG9hZGVyXCIpO1xuICAgICAgICAgICAgdGhpcy50YXNrUXVldWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcIuS7u+WKoemYn+WIl+W3sua4heepulwiKTtcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gbnVsbDtcbiAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcInRva2Vu5bey5riF56m6XCIpO1xuICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKFwidXBsb2FkZXIg6YeN572u5a6M5q+VXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmmK/lkKbmmK/liIblnZfku7vliqFcbiAgICAgICAgICogQHBhcmFtIHRhc2tcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2VuZXJhdGVUYXNrXCIsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOeUn+aIkHRhc2tcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVRhc2soKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0VXBsb2FkZXIoKTtcbiAgICAgICAgICAgIHZhciBmaWxlcyA9IHRoaXMuZmlsZUlucHV0LmZpbGVzO1xuICAgICAgICAgICAgLy/pgY3ljoZmaWxlcyDliJvlu7rkuIrkvKDku7vliqFcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWxlSW5wdXQuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzW2ldO1xuICAgICAgICAgICAgICAgIHZhciB0YXNrID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIC8v5Y+q5pyJ5Zyo5byA5ZCv5YiG5Z2X5LiK5Lyg77yM5bm25LiU5paH5Lu25aSn5bCP5aSn5LqONG1i55qE5pe25YCZ5omN6L+b6KGM5YiG5Z2X5LiK5LygXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2h1bmsgJiYgZmlsZS5zaXplID4gX1VwbG9hZGVyQnVpbGRlcjIuZGVmYXVsdC5CTE9DS19TSVpFKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sgPSBuZXcgX0NodW5rVGFzay5DaHVua1Rhc2soZmlsZSwgX1VwbG9hZGVyQnVpbGRlcjIuZGVmYXVsdC5CTE9DS19TSVpFLCB0aGlzLnNpemUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sgPSBuZXcgX0RpcmVjdFRhc2syLmRlZmF1bHQoZmlsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zYXZlS2V5ID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sua2V5ID0gdGhpcy5saXN0ZW5lci5vblRhc2tHZXRLZXkodGFzayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudGFza1F1ZXVlLnB1c2godGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWkhOeQhuWbvueJhy3nvKnmlL4t6LSo6YeP5Y6L57ypXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiaGFuZGxlSW1hZ2VzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVJbWFnZXMoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wcmVzcyAhPSAxIHx8IHRoaXMuc2NhbGVbMF0gIT0gMCB8fCB0aGlzLnNjYWxlWzFdICE9IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFzayA9IF9zdGVwNS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXNrLmZpbGUudHlwZS5tYXRjaCgnaW1hZ2UuKicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZCh0YXNrLmZpbGUubmFtZSArIFwiIFxcdTU5MDRcXHU3NDA2XFx1NTI0RFxcdTc2ODRcXHU1NkZFXFx1NzI0N1xcdTU5MjdcXHU1QzBGOlwiICsgdGFzay5maWxlLnNpemUgLyAxMDI0ICsgXCIga2JcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTCh0YXNrLmZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gX3RoaXMzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nVyA9IGltZy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZ0ggPSBpbWcuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGVXID0gX3RoaXMuc2NhbGVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZUggPSBfdGhpcy5zY2FsZVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlVyA9PSAwICYmIHNjYWxlSCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltZ1cgLyBpbWdIICogc2NhbGVIO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHNjYWxlSDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzY2FsZUggPT0gMCAmJiBzY2FsZVcgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBzY2FsZVc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nSCAvIGltZ1cgKiBzY2FsZVc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NhbGVXID4gMCAmJiBzY2FsZUggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBzY2FsZVc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2NhbGVIO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ov5nph4znmoTplb/lrr3mmK/nu5jliLbliLDnlLvluIPkuIrnmoTlm77niYfnmoTplb/lrr1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhbnZhcy50b0Jsb2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLzAuOTXmmK/mnIDmjqXov5Hljp/lm77lpKflsI/vvIzlpoLmnpzotKjph4/kuLox55qE6K+d5Lya5a+86Ie05q+U5Y6f5Zu+5aSn5Yeg5YCN44CCXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IoZnVuY3Rpb24gKGJsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYmxvYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQodGFzay5maWxlLm5hbWUgKyBcIiBcXHU1OTA0XFx1NzQwNlxcdTU0MEVcXHU3Njg0XFx1NTZGRVxcdTcyNDdcXHU1OTI3XFx1NUMwRjpcIiArIGJsb2Iuc2l6ZSAvIDEwMjQgKyBcIiBrYlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXCJpbWFnZS9qcGVnXCIsIF90aGlzLmNvbXByZXNzICogMC45NSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGJsb2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9iLm5hbWUgPSB0YXNrLmZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLmZpbGUgPSBibG9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVcGxvYWRlci5pc0NodW5rVGFzayh0YXNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLnNwbGljZUZpbGUyQmxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IHRoaXMudGFza1F1ZXVlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JldCA9IF9sb29wKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yNSA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSAmJiBfaXRlcmF0b3I1LnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjUucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I1O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5qOA6aqM6YCJ6aG55ZCI5rOV5oCnXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidmFsaWRhdGVPcHRpb25zXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCLlvIDlp4vmo4Dmn6XmnoTlu7rlj4LmlbDlkIjms5XmgKdcIik7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Rva2VuRnVuYykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5L2g5b+F6aG75o+Q5L6b5LiA5Liq6I635Y+WVG9rZW7nmoTlm57osIPlh73mlbAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zY2FsZSB8fCAhKHRoaXMuc2NhbGUgaW5zdGFuY2VvZiBBcnJheSkgfHwgdGhpcy5zY2FsZS5sZW5ndGggIT0gMiB8fCB0aGlzLnNjYWxlWzBdIDwgMCB8fCB0aGlzLnNjYWxlWzFdIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2NhbGXlv4XpobvmmK/plb/luqbkuLoy55qEbnVtYmVy57G75Z6L55qE5pWw57uELHNjYWxlWzBd5Li65a695bqm77yMc2NhbGVbMV3kuLrplb/luqYs5b+F6aG75aSn5LqO562J5LqOMCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKFwi5p6E5bu65Y+C5pWw5qOA5p+l5a6M5q+VXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDlvIDlp4vkuIrkvKBcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzdGFydFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCJcXHU0RTBBXFx1NEYyMFxcdTRFRkJcXHU1MkExXFx1OTA0RFxcdTUzODZcXHU1RjAwXFx1NTlDQlwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbGVJbnB1dC5maWxlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5rKh5pyJ6YCJ5Lit55qE5paH5Lu277yM5peg5rOV5byA5aeL5LiK5LygJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50YXNraW5nKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfku7vliqHmiafooYzkuK3vvIzor7fkuI3opoHph43lpI3kuIrkvKAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub25TdGFydCh0aGlzLnRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAvL+mBjeWOhuS7u+WKoemYn+WIl1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjYgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjYgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNiA9IHRoaXMudGFza1F1ZXVlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA2OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gKF9zdGVwNiA9IF9pdGVyYXRvcjYubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGFzazIgPSBfc3RlcDYudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKFwiXFx1NEUwQVxcdTRGMjBcXHU2NTg3XFx1NEVGNlxcdTU0MERcXHVGRjFBXCIgKyBfdGFzazIuZmlsZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKFwiXFx1NEUwQVxcdTRGMjBcXHU2NTg3XFx1NEVGNlxcdTU5MjdcXHU1QzBGXFx1RkYxQVwiICsgX3Rhc2syLmZpbGUuc2l6ZSArIFwiXFx1NUI1N1xcdTgyODJcXHVGRjBDXCIgKyBfdGFzazIuZmlsZS5zaXplIC8gMTAyNCArIFwiIGtiXFx1RkYwQ1wiICsgX3Rhc2syLmZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0ICsgXCIgbWJcIik7XG4gICAgICAgICAgICAgICAgICAgIC8v5qC55o2u5Lu75Yqh55qE57G75Z6L6LCD55So5LiN5ZCM55qE5LiK5Lyg5qih5byP6L+b6KGM5LiK5LygXG4gICAgICAgICAgICAgICAgICAgIGlmIChVcGxvYWRlci5pc0RpcmVjdFRhc2soX3Rhc2syKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKCfor6XkuIrkvKDku7vliqHkuLrnm7TkvKDku7vliqEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v55u05LygXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgX0RpcmVjdFVwbG9hZFBhdHRlcm4yLmRlZmF1bHQodGhpcykudXBsb2FkKF90YXNrMik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVXBsb2FkZXIuaXNDaHVua1Rhc2soX3Rhc2syKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKCfor6XkuIrkvKDku7vliqHkuLrliIbniYfku7vliqEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5YiG5Z2X5LiK5LygXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgX0NodW5rVXBsb2FkUGF0dGVybjIuZGVmYXVsdCh0aGlzKS51cGxvYWQoX3Rhc2syKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Z2e5rOV55qEdGFza+exu+WeiycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I2ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjYgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgJiYgX2l0ZXJhdG9yNi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjYucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaJgOacieS7u+WKoeaYr+WQpuWujOaIkFxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc1Rhc2tRdWV1ZUZpbmlzaFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNUYXNrUXVldWVGaW5pc2goKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I3ID0gdGhpcy50YXNrUXVldWVbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDc7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSAoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90YXNrMyA9IF9zdGVwNy52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIV90YXNrMy5pc0ZpbmlzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3I3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjcgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgJiYgX2l0ZXJhdG9yNy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjcucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDpgInmi6nmlofku7ZcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjaG9vc2VGaWxlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaG9vc2VGaWxlKCkge1xuICAgICAgICAgICAgdGhpcy5maWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFRva2VuXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb2tlbih0YXNrKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3Rva2VuU2hhcmUgJiYgdGhpcy5fdG9rZW4gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl90b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCJcXHU1RjAwXFx1NTlDQlxcdTgzQjdcXHU1M0Q2XFx1NEUwQVxcdTRGMjB0b2tlblwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fdG9rZW5GdW5jKHRoaXMsIHRhc2spKS50aGVuKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcIlxcdTRFMEFcXHU0RjIwdG9rZW5cXHU4M0I3XFx1NTNENlxcdTYyMTBcXHU1MjlGOiBcIiArIHRva2VuKTtcbiAgICAgICAgICAgICAgICBfdGhpczQuX3Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZXF1ZXN0VGFza1Rva2VuXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0VGFza1Rva2VuKHRhc2ssIHVybCkge1xuICAgICAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVTYXZlS2V5KHRhc2spLnRoZW4oZnVuY3Rpb24gKHNhdmVLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM1LnJlcXVlc3RUb2tlbih1cmwsIHNhdmVLZXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZXF1ZXN0VG9rZW5cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RUb2tlbih1cmwsIHNhdmVLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzYXZlS2V5ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsICs9ICgvXFw/Ly50ZXN0KHVybCkgPyBcIiZcIiA6IFwiP1wiKSArIFwic2F2ZUtleT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzYXZlS2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXJsICs9ICgvXFw/Ly50ZXN0KHVybCkgPyBcIiZcIiA6IFwiP1wiKSArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UudXB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4aHIub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdhYm9ydGVkJyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlc29sdmVTYXZlS2V5XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlU2F2ZUtleSh0YXNrKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIHNhdmVLZXkgPSB0aGlzLl9zYXZlS2V5O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzYXZlS2V5ICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNhdmVLZXkpLnRoZW4odGhpcy5yZXNvbHZlVVVJRCkudGhlbihmdW5jdGlvbiAoc2F2ZUtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczYucmVzb2x2ZUltYWdlSW5mbyh0YXNrLmZpbGUsIHNhdmVLZXkpO1xuICAgICAgICAgICAgfSkudGhlbih0aGlzLm9uU2F2ZUtleVJlc29sdmVkKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJldHJ5XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JldHJ5O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic2l6ZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYXV0b1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdXRvO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwibXVsdGlwbGVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbXVsdGlwbGU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJhY2NlcHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXB0O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcHJlc3NcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcHJlc3M7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzY2FsZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2FsZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImxpc3RlbmVyXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVyO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZmlsZUlucHV0XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbGVJbnB1dDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNodW5rXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NodW5rO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidGFza1F1ZXVlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rhc2tRdWV1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInRhc2tpbmdcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFza2luZztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rhc2tpbmcgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImludGVyY2VwdG9yc1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnRlcmNlcHRvcnM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJkb21haW5cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG9tYWluO1xuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogXCJpc0NodW5rVGFza1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNDaHVua1Rhc2sodGFzaykge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2suY29uc3RydWN0b3IubmFtZSA9PT0gX0NodW5rVGFzay5DaHVua1Rhc2submFtZSAmJiB0YXNrIGluc3RhbmNlb2YgX0NodW5rVGFzay5DaHVua1Rhc2s7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuaYr+ebtOS8oOS7u+WKoVxuICAgICAgICAgKiBAcGFyYW0gdGFza1xuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc0RpcmVjdFRhc2tcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzRGlyZWN0VGFzayh0YXNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFzay5jb25zdHJ1Y3Rvci5uYW1lID09PSBfRGlyZWN0VGFzazIuZGVmYXVsdC5uYW1lICYmIHRhc2sgaW5zdGFuY2VvZiBfRGlyZWN0VGFzazIuZGVmYXVsdDtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBVcGxvYWRlcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVXBsb2FkZXI7XG5cbi8qKiovIH0pLFxuLyogODcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1VwbG9hZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nik7XG5cbnZhciBfVXBsb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXBsb2FkZXIpO1xuXG52YXIgX1NpbXBsZVVwbG9hZEludGVyY2VwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApO1xuXG52YXIgX1NpbXBsZVVwbG9hZEludGVyY2VwdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpbXBsZVVwbG9hZEludGVyY2VwdG9yKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBVcGxvYWRlckJ1aWxkZXJcbiAqXG4gKi9cbnZhciBVcGxvYWRlckJ1aWxkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVXBsb2FkZXJCdWlsZGVyKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXBsb2FkZXJCdWlsZGVyKTtcblxuICAgICAgICB0aGlzLl9yZXRyeSA9IDA7IC8v5pyA5aSn6YeN6K+V5qyh5pWwXG4gICAgICAgIHRoaXMuX2RvbWFpbiA9IFVwbG9hZGVyQnVpbGRlci5VUExPQURfRE9NQUlOOyAvL+S4iuS8oOWfn+WQjVxuICAgICAgICB0aGlzLl9zY2hlbWUgPSBudWxsOyAvL+S4iuS8oOWfn+WQjeeahCBzY2hlbWVcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDEwMjQgKiAxMDI0OyAvL+WIhueJh+Wkp+WwjyzljZXkvY3lrZfoioIs5LiK6ZmQNG0s5LiN6IO95Li6MFxuICAgICAgICB0aGlzLl9jaHVuayA9IHRydWU7IC8v5YiG5Z2X5LiK5LygXG4gICAgICAgIHRoaXMuX2F1dG8gPSB0cnVlOyAvL+iHquWKqOS4iuS8oCzmr4/mrKHpgInmi6nmlofku7blkI5cbiAgICAgICAgdGhpcy5fbXVsdGlwbGUgPSB0cnVlOyAvL+aYr+WQpuaUr+aMgeWkmuaWh+S7tlxuICAgICAgICB0aGlzLl9hY2NlcHQgPSBbXTsgLy/mjqXlj5fnmoTmlofku7bnsbvlnotcbiAgICAgICAgdGhpcy5fY29tcHJlc3MgPSAxOyAvL+WbvueJh+WOi+e8qei0qOmHj1xuICAgICAgICB0aGlzLl9zY2FsZSA9IFswLCAwXTsgLy/nvKnmlL7lpKflsI8s6ZmQ5a6a6auY5bqm562J5q+UW2g6MjAwLHc6MF0s6ZmQ5a6a5a695bqm562J5q+UW2g6MCx3OjEwMF0s6ZmQ5a6a6ZW/5a69W2g6MjAwLHc6MTAwXVxuICAgICAgICB0aGlzLl9zYXZlS2V5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Rva2VuU2hhcmUgPSB0cnVlOyAvL+WIhuS6q3Rva2VuLOWmguaenOS4umZhbHNlLOavj+S4gOasoUhUVFDor7fmsYLpg73pnIDopoHmlrDojrflj5ZUb2tlblxuICAgICAgICB0aGlzLl9pbnRlcmNlcHRvcnMgPSBbXTsgLy/ku7vliqHmi6bmiKrlmahcbiAgICAgICAgdGhpcy5faXNEZWJ1ZyA9IGZhbHNlOyAvL1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDorr7nva7kuIrkvKDnmoTln5/lkI0s6buY6K6k5pivIHtodHRwOiAnaHR0cDovL3VwbG9hZC5xaW5pdS5jb20nLCBodHRwczogJ2h0dHBzOi8vdXAucWJveC5tZSd9XG4gICAgICogQHBhcmFtIGRvbWFpblxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhVcGxvYWRlckJ1aWxkZXIsIFt7XG4gICAgICAgIGtleTogXCJkb21haW5cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRvbWFpbihfZG9tYWluKSB7XG4gICAgICAgICAgICB0aGlzLl9kb21haW4gPSBfZG9tYWluO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOiuvue9ruS4iuS8oOWfn+WQjeeahOWNj+iuruexu+Wei++8jOm7mOiupOS7jiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wg6K+75Y+WXG4gICAgICAgICAqIEBwYXJhbSBzY2hlbWVcbiAgICAgICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzY2hlbWVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjaGVtZShfc2NoZW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlbWUgPSBfc2NoZW1lO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOa3u+WKoOS4gOS4quaLpuaIquWZqFxuICAgICAgICAgKiBAcGFyYW0gaW50ZXJjZXB0b3JcbiAgICAgICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpbnRlcmNlcHRvclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW50ZXJjZXB0b3IoX2ludGVyY2VwdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnRlcmNlcHRvcnMucHVzaChPYmplY3QuYXNzaWduKG5ldyBfU2ltcGxlVXBsb2FkSW50ZXJjZXB0b3IyLmRlZmF1bHQoKSwgX2ludGVyY2VwdG9yKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5LiK5Lyg5aSx6LSl5ZCO55qE6YeN5Lyg5bCd6K+V5qyh5pWwXG4gICAgICAgICAqIEBwYXJhbSByZXRyeSDpu5jorqQw5qyh77yM5LiN5bCd6K+V5qyh6YeN5LygXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmV0cnlcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldHJ5KF9yZXRyeSkge1xuICAgICAgICAgICAgdGhpcy5fcmV0cnkgPSBfcmV0cnk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyAvKipcbiAgICAgICAgLy8gICog6K6+572u5YiG54mH5aSn5bCPXG4gICAgICAgIC8vICAqIEBwYXJhbSBzaXplIOWIhuWdl+Wkp+WwjyzljZXkvY3lrZfoioIs6buY6K6kNCoxMDI0KjEwMjTlrZfoioIoNG1iKVxuICAgICAgICAvLyAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAgICAvLyAgKi9cbiAgICAgICAgLy8gcHJpdmF0ZSBzaXplKHNpemU6IG51bWJlcik6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIC8vICAgICB0aGlzLl9zaXplID0gTWF0aC5taW4oTWF0aC5tYXgoc2l6ZSwgMSksIFVwbG9hZGVyQnVpbGRlci5NQVhfQ0hVTktfU0laRSk7XG4gICAgICAgIC8vICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgLy8gfVxuICAgICAgICAvKipcbiAgICAgICAgICog6YCJ5oup5paH5Lu25ZCOLOaYr+WQpuiHquWKqOS4iuS8oFxuICAgICAgICAgKiBAcGFyYW0gYXV0byDpu5jorqR0cnVlXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYXV0b1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXV0byhfYXV0bykge1xuICAgICAgICAgICAgdGhpcy5fYXV0byA9IF9hdXRvO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuaUr+aMgeWkmuaWh+S7tumAieaLqVxuICAgICAgICAgKiBAcGFyYW0gbXVsdGlwbGUg6buY6K6kdHJ1ZVxuICAgICAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIm11bHRpcGxlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdWx0aXBsZShfbXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHRoaXMuX211bHRpcGxlID0gX211bHRpcGxlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaOpeWPl+S4iuS8oOeahOaWh+S7tuexu+Wei1xuICAgICAgICAgKiBAcGFyYW0gYWNjZXB0IOaVsOe7hOW9ouW8j+S+i+WmgjpbJy5wbmcnLCd2aWRlby8qJ11cbiAgICAgICAgICpcbiAgICAgICAgICog6K+m57uG6YWN572u6KeBaHR0cDovL3d3dy53M3NjaG9vbHMuY29tL3RhZ3MvYXR0X2lucHV0X2FjY2VwdC5hc3BcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJhY2NlcHRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFjY2VwdChfYWNjZXB0KSB7XG4gICAgICAgICAgICB0aGlzLl9hY2NlcHQgPSBfYWNjZXB0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOiuvue9ruS4iuS8oOaMiemSrlxuICAgICAgICAgKiBAcGFyYW0gYnV0dG9uIOS4iuS8oOaMiemSrklEXG4gICAgICAgICAqIEBwYXJhbSBldmVudE5hbWUg5LiK5Lyg5oyJ6ZKu55qE55uR5ZCs5LqL5Lu25ZCN56ew77yM6buY6K6k5Li6IFwiY2xpY2tcIiDjgIJcbiAgICAgICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJidXR0b25cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1dHRvbihfYnV0dG9uKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcImNsaWNrXCI7XG5cbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbiA9IF9idXR0b247XG4gICAgICAgICAgICB0aGlzLl9idXR0b25FdmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5Zu+54mH6LSo6YeP5Y6L57ypLOWPquWcqOS4iuS8oOeahOaWh+S7tuaYr+WbvueJh+eahOaXtuWAmeacieaViFxuICAgICAgICAgKiBAcGFyYW0gY29tcHJlc3MgMC0xLOm7mOiupDEs5LiN5Y6L57ypXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcHJlc3NcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXByZXNzKF9jb21wcmVzcykge1xuICAgICAgICAgICAgdGhpcy5fY29tcHJlc3MgPSBNYXRoLm1heChNYXRoLm1pbihfY29tcHJlc3MsIDEpLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDlm77niYfnvKnmlL5cbiAgICAgICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgICAgICogQHBhcmFtIHNjYWxlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic2NhbGVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjYWxlKF9zY2FsZSkge1xuICAgICAgICAgICAgdGhpcy5fc2NhbGUgPSBfc2NhbGU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6K6+572uIHNhdmVLZXlcbiAgICAgICAgICogQHBhcmFtIHNhdmVLZXlcbiAgICAgICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzYXZlS2V5XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlS2V5KF9zYXZlS2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9zYXZlS2V5ID0gX3NhdmVLZXk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+WVG9rZW7nmoTlnLDlnYBcbiAgICAgICAgICogQHBhcmFtIHRva2VuVXJsXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwidG9rZW5VcmxcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRva2VuVXJsKF90b2tlblVybCkge1xuICAgICAgICAgICAgdGhpcy5fdG9rZW5GdW5jID0gZnVuY3Rpb24gKHVwbG9hZGVyLCB0YXNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwbG9hZGVyLnJlcXVlc3RUYXNrVG9rZW4odGFzaywgX3Rva2VuVXJsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+WVG9rZW7nmoTlh73mlbBcbiAgICAgICAgICogQHBhcmFtIHRva2VuRnVuY1xuICAgICAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInRva2VuRnVuY1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdG9rZW5GdW5jKF90b2tlbkZ1bmMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuRnVuYyA9IGZ1bmN0aW9uICh1cGxvYWRlciwgdGFzaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9rZW5GdW5jKHJlc29sdmUsIHRhc2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDkuIrkvKDnlJ/lkb3lkajmnJ/pkqnlrZBcbiAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwibGlzdGVuZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbmVyKF9saXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXIgPSBfbGlzdGVuZXI7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5YiG5LqrdG9rZW4s5aaC5p6c5Li6ZmFsc2Xmr4/kuIrkvKDkuIDkuKrmlofku7bpg73pnIDopoHor7fmsYLkuIDmrKFUb2tlbuOAglxuICAgICAgICAgKiBAcGFyYW0gdG9rZW5TaGFyZVxuICAgICAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInRva2VuU2hhcmVcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRva2VuU2hhcmUoX3Rva2VuU2hhcmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuU2hhcmUgPSBfdG9rZW5TaGFyZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmmK/lkKbliIblnZfkuIrkvKBcbiAgICAgICAgICogQHBhcmFtIGNodW5rIOm7mOiupGZhbHNlXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY2h1bmtcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNodW5rKF9jaHVuaykge1xuICAgICAgICAgICAgdGhpcy5fY2h1bmsgPSBfY2h1bms7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5byA5ZCvZGVidWfmqKHlvI9cbiAgICAgICAgICogQHBhcmFtIGRlYnVnIOm7mOiupGZhbHNlXG4gICAgICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZGVidWdcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKF9kZWJ1Zykge1xuICAgICAgICAgICAgdGhpcy5faXNEZWJ1ZyA9IF9kZWJ1ZztcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYnVpbGRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBfVXBsb2FkZXIyLmRlZmF1bHQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRSZXRyeVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXRyeTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFNpemVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldEF1dG9cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXV0bztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldE11bHRpcGxlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX211bHRpcGxlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0QWNjZXB0XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjY2VwdDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldEJ1dHRvblwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9idXR0b247XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRCdXR0b25FdmVudE5hbWVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uRXZlbnROYW1lO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0Q29tcHJlc3NcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcHJlc3M7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRTY2FsZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2FsZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldExpc3RlbmVyXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVyO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0U2F2ZUtleVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZlS2V5O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0VG9rZW5GdW5jXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuRnVuYztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFRva2VuU2hhcmVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5TaGFyZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldENodW5rXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NodW5rO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0SXNEZWJ1Z1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RlYnVnO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZ2V0SW50ZXJjZXB0b3JzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVyY2VwdG9ycztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldERvbWFpblwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHZhciBkb21haW4gPSB0aGlzLl9kb21haW47XG4gICAgICAgICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICAgICAgICAgIGRvbWFpbiA9IFVwbG9hZGVyQnVpbGRlci5VUExPQURfRE9NQUlOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb21haW4gIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhciBzY2hlbWUgPSB0aGlzLl9zY2hlbWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWUgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVtZSA9IHByb3RvY29sLnN1YnN0cmluZygwLCBwcm90b2NvbC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZG9tYWluID0gZG9tYWluW3NjaGVtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZG9tYWluLmVuZHNXaXRoKCcvJykgPyBkb21haW4uc3Vic3RyaW5nKDAsIGRvbWFpbi5sZW5ndGggLSAxKSA6IGRvbWFpbjtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBVcGxvYWRlckJ1aWxkZXI7XG59KCk7XG5cblVwbG9hZGVyQnVpbGRlci5NQVhfQ0hVTktfU0laRSA9IDQgKiAxMDI0ICogMTAyNDsgLy/liIbniYfmnIDlpKflgLxcblVwbG9hZGVyQnVpbGRlci5CTE9DS19TSVpFID0gVXBsb2FkZXJCdWlsZGVyLk1BWF9DSFVOS19TSVpFOyAvL+WIhuWdl+Wkp+Wwj++8jOWPquacieWkp+S6jui/meS4quaVsOaJjemcgOimgeWIhuWdl1xuVXBsb2FkZXJCdWlsZGVyLlVQTE9BRF9ET01BSU4gPSB7IGh0dHA6ICdodHRwOi8vdXBsb2FkLnFpbml1LmNvbScsIGh0dHBzOiAnaHR0cHM6Ly91cC5xYm94Lm1lJyB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gVXBsb2FkZXJCdWlsZGVyO1xuXG4vKioqLyB9KSxcbi8qIDg4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiDkuIrkvKDku7vliqFcbiAqL1xudmFyIEJhc2VUYXNrID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VUYXNrKGZpbGUpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VUYXNrKTtcblxuICAgICAgICB0aGlzLl9yZXRyeSA9IDA7IC8v5bey6YeN6K+V5qyh5pWwXG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gMDsgLy/ku7vliqHov5vluqYs5pyA5aSnMTAwXG4gICAgICAgIHRoaXMuX2lzU3VjY2VzcyA9IGZhbHNlOyAvL+aYr+WQpuS4iuS8oOaIkOWKn1xuICAgICAgICB0aGlzLl9pc0ZpbmlzaCA9IGZhbHNlOyAvL+aYr+WQpue7k+adn1xuICAgICAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5fY3JlYXRlRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEJhc2VUYXNrLCBbe1xuICAgICAgICBrZXk6IFwiZmlsZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChmaWxlKSB7XG4gICAgICAgICAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJldHJ5XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JldHJ5O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmV0cnkgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNyZWF0ZURhdGVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlRGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZURhdGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInN0YXJ0RGF0ZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydERhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydERhdGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImVuZERhdGVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kRGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuZERhdGUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImlzU3VjY2Vzc1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1N1Y2Nlc3M7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1N1Y2Nlc3MgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb2dyZXNzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2dyZXNzO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heCgwLCB2YWx1ZSksIDEwMCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZXN1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJlcnJvclwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJrZXlcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fa2V5O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fa2V5ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc0ZpbmlzaFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0ZpbmlzaDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRmluaXNoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQmFzZVRhc2s7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VUYXNrO1xuXG4vKioqLyB9KSxcbi8qIDg5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKXRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxuLyoqKi8gfSksXG4vKiA5MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuXG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgdG9JbmRleCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KVxuICAsIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0Lyo9IDAqLywgc3RhcnQvKj0gMCwgZW5kID0gQGxlbmd0aCovKXtcbiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbiAgID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCB0byAgICA9IHRvSW5kZXgodGFyZ2V0LCBsZW4pXG4gICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbilcbiAgICAsIGVuZCAgID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9JbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pXG4gICAgLCBpbmMgICA9IDE7XG4gIGlmKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCl7XG4gICAgaW5jICA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICAgKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlKGNvdW50LS0gPiAwKXtcbiAgICBpZihmcm9tIGluIE8pT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICAgKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcblxuLyoqKi8gfSksXG4vKiA5MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZm9yT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLyoqKi8gfSksXG4vKiA5MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcbiAgLCB0b09iamVjdCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgSU9iamVjdCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NilcbiAgLCB0b0xlbmd0aCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpe1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KVxuICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDBcbiAgICAsIGkgICAgICA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmKGFMZW4gPCAyKWZvcig7Oyl7XG4gICAgaWYoaW5kZXggaW4gc2VsZil7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKWlmKGluZGV4IGluIHNlbGYpe1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuXG4vKioqLyB9KSxcbi8qIDkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYUZ1bmN0aW9uICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpXG4gICwgaXNPYmplY3QgICA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBpbnZva2UgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MilcbiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2VcbiAgLCBmYWN0b3JpZXMgID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbihGLCBsZW4sIGFyZ3Mpe1xuICBpZighKGxlbiBpbiBmYWN0b3JpZXMpKXtcbiAgICBmb3IodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKyluW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyosIGFyZ3MuLi4gKi8pe1xuICB2YXIgZm4gICAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uKC8qIGFyZ3MuLi4gKi8pe1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZihpc09iamVjdChmbi5wcm90b3R5cGUpKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcblxuLyoqKi8gfSksXG4vKiA5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGRQICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KS5mXG4gICwgY3JlYXRlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKVxuICAsIHJlZGVmaW5lQWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNilcbiAgLCBjdHggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG4gICwgYW5JbnN0YW5jZSAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKVxuICAsIGRlZmluZWQgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSlcbiAgLCBmb3JPZiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG4gICwgJGl0ZXJEZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKVxuICAsIHN0ZXAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDApXG4gICwgc2V0U3BlY2llcyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KVxuICAsIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuICAsIGZhc3RLZXkgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCkuZmFzdEtleVxuICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpLCBlbnRyeTtcbiAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0Ll9mID09IGVudHJ5KXRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgLCBraW5kICA9IHRoYXQuX2tcbiAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpe1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuXG4vKioqLyB9KSxcbi8qIDk1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSlcbiAgLCBmcm9tICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUpe1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7XG4gICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcbi8qIDk2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgcmVkZWZpbmVBbGwgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KVxuICAsIGdldFdlYWsgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCkuZ2V0V2Vha1xuICAsIGFuT2JqZWN0ICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSlcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG4gICwgY3JlYXRlQXJyYXlNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKVxuICAsICRoYXMgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMClcbiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAsIGlkICAgICAgICAgICAgICAgID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKHRoYXQpe1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmKGRhdGEgPT09IHRydWUpdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cbi8qKiovIH0pLFxuLyogOTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19yZXF1aXJlX18oNjIpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDk4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuXG4vKioqLyB9KSxcbi8qIDk5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cbi8qKiovIH0pLFxuLyogMTAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KVxuICAsIGdPUFMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NilcbiAgLCBwSUUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpXG4gICwgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgSU9iamVjdCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cbi8qKiovIH0pLFxuLyogMTAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBkUCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNylcbiAgLCBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBnZXRLZXlzICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNikgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG4gICwgZ09QTiAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCkuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDEwNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaGFzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMClcbiAgLCB0b0lPYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuICAsIGFycmF5SW5kZXhPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdldEtleXMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpXG4gICwgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcbiAgLCBpc0VudW0gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc0VudHJpZXMpe1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoaXQpXG4gICAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSAgICAgID0gMFxuICAgICAgLCByZXN1bHQgPSBbXVxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKXtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpXG4gICwgZ09QUyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KVxuICAsIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIFJlZmxlY3QgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXtcbiAgdmFyIGtleXMgICAgICAgPSBnT1BOLmYoYW5PYmplY3QoaXQpKVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxuLyoqKi8gfSksXG4vKiAxMDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRwYXJzZUZsb2F0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKS5wYXJzZUZsb2F0XG4gICwgJHRyaW0gICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cil7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMylcbiAgICAsIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcblxuLyoqKi8gfSksXG4vKiAxMDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRwYXJzZUludCA9IF9fd2VicGFja19yZXF1aXJlX18oMikucGFyc2VJbnRcbiAgLCAkdHJpbSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KS50cmltXG4gICwgd3MgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MClcbiAgLCBoZXggICAgICAgPSAvXltcXC0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuXG4vKioqLyB9KSxcbi8qIDExMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpe1xuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG5cbi8qKiovIH0pLFxuLyogMTExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG4gICwgcmVwZWF0ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KVxuICAsIGRlZmluZWQgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXtcbiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGhcbiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKVxuICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKXJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aFxuICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMTEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbi8qKiovIH0pLFxuLyogMTEzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgc3Ryb25nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCk7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkoJ01hcCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuXG4vKioqLyB9KSxcbi8qIDExNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZihfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKV9fd2VicGFja19yZXF1aXJlX18oNykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTE1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgc3Ryb25nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkoJ1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuXG4vKioqLyB9KSxcbi8qIDExNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGVhY2ggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpKDApXG4gICwgcmVkZWZpbmUgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMylcbiAgLCBtZXRhICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KVxuICAsIGFzc2lnbiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTAyKVxuICAsIHdlYWsgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTYpXG4gICwgaXNPYmplY3QgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIGdldFdlYWsgICAgICA9IG1ldGEuZ2V0V2Vha1xuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGVcbiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlXG4gICwgdG1wICAgICAgICAgID0ge31cbiAgLCBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpe1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgaWYoaXNPYmplY3Qoa2V5KSl7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KSgnV2Vha01hcCcsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZihuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KXtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIpO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBwcm90byAgPSAkV2Vha01hcC5wcm90b3R5cGVcbiAgICAgICwgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbihhLCBiKXtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSl7XG4gICAgICAgIGlmKCF0aGlzLl9mKXRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXA7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKiovIH0pLFxuLyogMTE3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG4vKioqLyB9KSxcbi8qIDExOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5VcGxvYWRlckJ1aWxkZXIgPSBleHBvcnRzLlVwbG9hZGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX1VwbG9hZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nik7XG5cbnZhciBfVXBsb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXBsb2FkZXIpO1xuXG52YXIgX1VwbG9hZGVyQnVpbGRlciA9IF9fd2VicGFja19yZXF1aXJlX18oODcpO1xuXG52YXIgX1VwbG9hZGVyQnVpbGRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VcGxvYWRlckJ1aWxkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLlVwbG9hZGVyID0gX1VwbG9hZGVyMi5kZWZhdWx0O1xuZXhwb3J0cy5VcGxvYWRlckJ1aWxkZXIgPSBfVXBsb2FkZXJCdWlsZGVyMi5kZWZhdWx0O1xuXG4vKioqLyB9KSxcbi8qIDExOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTaW1wbGVVcGxvYWRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW1wbGVVcGxvYWRMaXN0ZW5lcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZVVwbG9hZExpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2ltcGxlVXBsb2FkTGlzdGVuZXIsIFt7XG4gICAgICAgIGtleTogXCJvblJlYWR5XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlYWR5KHRhc2tRdWV1ZSkge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJvblN0YXJ0XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblN0YXJ0KHRhc2tRdWV1ZSkge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJvblRhc2tQcm9ncmVzc1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25UYXNrUHJvZ3Jlc3ModGFzaykge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJvblRhc2tHZXRLZXlcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uVGFza0dldEtleSh0YXNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIm9uVGFza0ZhaWxcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uVGFza0ZhaWwodGFzaykge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJvblRhc2tTdWNjZXNzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvblRhc2tTdWNjZXNzKHRhc2spIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwib25UYXNrUmV0cnlcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uVGFza1JldHJ5KHRhc2spIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwib25GaW5pc2hcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uRmluaXNoKHRhc2tRdWV1ZSkge31cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2ltcGxlVXBsb2FkTGlzdGVuZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNpbXBsZVVwbG9hZExpc3RlbmVyO1xuXG4vKioqLyB9KSxcbi8qIDEyMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTaW1wbGVVcGxvYWRJbnRlcmNlcHRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaW1wbGVVcGxvYWRJbnRlcmNlcHRvcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZVVwbG9hZEludGVyY2VwdG9yKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2ltcGxlVXBsb2FkSW50ZXJjZXB0b3IsIFt7XG4gICAgICAgIGtleTogXCJvbkludGVyY2VwdFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25JbnRlcmNlcHQodGFzaykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwib25JbnRlcnJ1cHRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uSW50ZXJydXB0KHRhc2spIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBTaW1wbGVVcGxvYWRJbnRlcmNlcHRvcjtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2ltcGxlVXBsb2FkSW50ZXJjZXB0b3I7XG5cbi8qKiovIH0pLFxuLyogMTIxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcblxudmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiDliIblnZfkuIrkvKBcbiAqL1xudmFyIENodW5rVXBsb2FkUGF0dGVybiA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDaHVua1VwbG9hZFBhdHRlcm4odXBsb2FkZXIpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENodW5rVXBsb2FkUGF0dGVybik7XG5cbiAgICAgICAgdGhpcy51cGxvYWRlciA9IHVwbG9hZGVyO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDaHVua1VwbG9hZFBhdHRlcm4sIFt7XG4gICAgICAgIGtleTogXCJpbml0XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KHVwbG9hZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZGVyID0gdXBsb2FkZXI7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJ1cGxvYWRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwbG9hZCh0YXNrKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLnRhc2sgPSB0YXNrO1xuICAgICAgICAgICAgdGhpcy51cGxvYWRlci5nZXRUb2tlbih0YXNrKS50aGVuKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgICAgIHRhc2suc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGxvYWRCbG9jayh0b2tlbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInVwbG9hZEJsb2NrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGxvYWRCbG9jayh0b2tlbikge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcIlxcdTUxQzZcXHU1OTA3XFx1NUYwMFxcdTU5Q0JcXHU0RTBBXFx1NEYyMFxcdTU3NTdcIik7XG4gICAgICAgICAgICB2YXIgY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcIlxcdTUxNzFcIiArIHRoaXMudGFzay5ibG9ja3MubGVuZ3RoICsgXCJcXHU1NzU3XFx1N0I0OVxcdTVGODVcXHU0RTBBXFx1NEYyMFwiKTtcbiAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcIlxcdTUxNzFcIiArIHRoaXMudGFzay50b3RhbENodW5rQ291bnQgKyBcIlxcdTUyMDZcXHU3MjQ3XFx1N0I0OVxcdTVGODVcXHU0RTBBXFx1NEYyMFwiKTtcbiAgICAgICAgICAgIHRoaXMudGFzay5ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYmxvY2ssIGJsb2NrSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBibG9jay5jaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmssIGNodW5rSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW4gPSBjaGFpbi50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZChcIlxcdTVGMDBcXHU1OUNCXFx1NEUwQVxcdTRGMjBcXHU3QjJDXCIgKyAoYmxvY2tJbmRleCArIDEpICsgXCJcXHU1NzU3LFxcdTdCMkNcIiArIChjaHVua0luZGV4ICsgMSkgKyBcIlxcdTcyNDdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnVwbG9hZENodW5rKGNodW5rLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjaGFpbi50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmNvbmNhdENodW5rcyh0b2tlbik7XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvL+aJgOacieS7u+WKoemDvee7k+adn+S6hlxuICAgICAgICAgICAgICAgIGlmIChfdGhpczIudXBsb2FkZXIuaXNUYXNrUXVldWVGaW5pc2goKSkge1xuICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCJcXHU0RTBBXFx1NEYyMFxcdTRFRkJcXHU1MkExXFx1OTYxRlxcdTUyMTdcXHU1REYyXFx1N0VEM1xcdTY3NUZcIik7XG4gICAgICAgICAgICAgICAgICAgIC8v5pu05pS55Lu75Yqh5omn6KGM5Lit5qCH5b+XXG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi51cGxvYWRlci50YXNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8v55uR5ZCs5Zmo6LCD55SoXG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi51cGxvYWRlci5saXN0ZW5lci5vbkZpbmlzaChfdGhpczIudXBsb2FkZXIudGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LncoX3RoaXMyLnRhc2suZmlsZS5uYW1lICsgXCJcXHU1MjA2XFx1NTc1N1xcdTRFMEFcXHU0RjIwXFx1NTkzMVxcdThEMjVcIik7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnRhc2suZXJyb3IgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICBfdGhpczIudGFzay5pc1N1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpczIudGFzay5pc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnRhc2suZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza0ZhaWwoX3RoaXMyLnRhc2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJ1cGxvYWRDaHVua1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBsb2FkQ2h1bmsoY2h1bmssIHRva2VuKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNGaXJzdENodW5rSW5CbG9jayA9IGNodW5rLmJsb2NrLmNodW5rcy5pbmRleE9mKGNodW5rKSA9PSAwO1xuICAgICAgICAgICAgICAgIHZhciBjaHVua0luZGV4ID0gY2h1bmsuYmxvY2suY2h1bmtzLmluZGV4T2YoY2h1bmspO1xuICAgICAgICAgICAgICAgIC8v5YmN5LiA5LiqY2h1bmss5aaC5p6c5a2Y5Zyo55qE6K+dXG4gICAgICAgICAgICAgICAgdmFyIHByZXZDaHVuayA9IGlzRmlyc3RDaHVua0luQmxvY2sgPyBudWxsIDogY2h1bmsuYmxvY2suY2h1bmtzW2NodW5rSW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gaXNGaXJzdENodW5rSW5CbG9jayA/IF90aGlzMy5nZXRVcGxvYWRCbG9ja1VybChjaHVuay5ibG9jay5kYXRhLnNpemUpIDogX3RoaXMzLmdldFVwbG9hZENodW5rVXJsKGNodW5rLnN0YXJ0LCBwcmV2Q2h1bmsgPyBwcmV2Q2h1bmsuY3R4IDogbnVsbCwgcHJldkNodW5rID8gcHJldkNodW5rLmhvc3QgOiBudWxsKTtcbiAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwgKz0gKC9cXD8vLnRlc3QodXJsKSA/IFwiJlwiIDogXCI/XCIpICsgbmV3IERhdGUoKS5nZXRUaW1lKCksIHRydWUpO1xuICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7IC8v6K6+572uY29udGVudFR5cGVcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIFwiVXBUb2tlbiBcIiArIHRva2VuKTsgLy/mt7vliqB0b2tlbumqjOivgeWktFxuICAgICAgICAgICAgICAgIC8v5YiG54mH5LiK5Lyg5LitXG4gICAgICAgICAgICAgICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5yb3VuZCgoX3RoaXMzLnRhc2suZmluaXNoZWRCbG9ja3NTaXplICsgY2h1bmsuc3RhcnQgKyBlLmxvYWRlZCkgLyBfdGhpczMudGFzay5maWxlLnNpemUgKiAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy50YXNrLnByb2dyZXNzIDwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMudGFzay5wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy51cGxvYWRlci5saXN0ZW5lci5vblRhc2tQcm9ncmVzcyhfdGhpczMudGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8v5YiG54mH5LiK5Lyg5a6M5oiQXG4gICAgICAgICAgICAgICAgeGhyLnVwbG9hZC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGgucm91bmQoKF90aGlzMy50YXNrLmZpbmlzaGVkQmxvY2tzU2l6ZSArIGNodW5rLnN0YXJ0ICsgY2h1bmsuZGF0YS5zaXplKSAvIF90aGlzMy50YXNrLmZpbGUuc2l6ZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMudGFzay5wcm9ncmVzcyA8IHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczMudGFzay5wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza1Byb2dyZXNzKF90aGlzMy50YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy/lk43lupTov5Tlm55cbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwICYmIHhoci5yZXNwb25zZVRleHQgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuay5pc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmN0eCA9IHJlc3VsdC5jdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsuaG9zdCA9IHJlc3VsdC5ob3N0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfY2h1bmtJbmRleCA9IGNodW5rLmJsb2NrLmNodW5rcy5pbmRleE9mKGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzTmV4dENodW5rSW5UaGlzQmxvY2sgPSBfY2h1bmtJbmRleCAhPSBjaHVuay5ibG9jay5jaHVua3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc05leHRDaHVua0luVGhpc0Jsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmJsb2NrLmlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsuYmxvY2sucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4aHIuc2VuZChjaHVuay5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY29uY2F0Q2h1bmtzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXRDaHVua3ModG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBlbmNvZGVkS2V5ID0gX3RoaXM0LnRhc2sua2V5ID8gYnRvYShfdGhpczQudGFzay5rZXkpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAvLyDlronlhajlrZfnrKbkuLIg5Y+C6ICD77yaaHR0cHM6Ly9kZXZlbG9wZXIucWluaXUuY29tL2tvZG8vYXBpL21rZmlsZVxuICAgICAgICAgICAgICAgIGlmIChlbmNvZGVkS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWRLZXkgPSBlbmNvZGVkS2V5LnJlcGxhY2UoL1xcKy9nLCAnLScpO1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVkS2V5ID0gZW5jb2RlZEtleS5yZXBsYWNlKC9cXC8vZywgJ18nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IF90aGlzNC5nZXRNYWtlRmlsZVVybChfdGhpczQudGFzay5maWxlLnNpemUsIGVuY29kZWRLZXkpO1xuICAgICAgICAgICAgICAgIC8v5p6E5bu65omA5pyJ5pWw5o2u5Z2X5pyA5ZCO5LiA5Liq5pWw5o2u54mH5LiK5Lyg5ZCO5b6X5Yiw55qEPGN0eD7nmoTnu4TlkIjmiJDnmoTliJfooajlrZfnrKbkuLJcbiAgICAgICAgICAgICAgICB2YXIgY3R4TGlzdFN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfdGhpczQudGFzay5ibG9ja3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RDaHVuayA9IGJsb2NrLmNodW5rc1tibG9jay5jaHVua3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHhMaXN0U3RyaW5nICs9IGxhc3RDaHVuay5jdHggKyAnLCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdHhMaXN0U3RyaW5nLmVuZHNXaXRoKCcsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4TGlzdFN0cmluZyA9IGN0eExpc3RTdHJpbmcuc3Vic3RyaW5nKDAsIGN0eExpc3RTdHJpbmcubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICB4aHIub3BlbignUE9TVCcsIHVybCArPSAoL1xcPy8udGVzdCh1cmwpID8gXCImXCIgOiBcIj9cIikgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluJyk7IC8v6K6+572uY29udGVudFR5cGVcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIFwiVXBUb2tlbiBcIiArIHRva2VuKTsgLy/mt7vliqB0b2tlbumqjOivgeWktFxuICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQudGFzay5pc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDAgJiYgeGhyLnJlc3BvbnNlVGV4dCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC50YXNrLmlzU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnRhc2sucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC50YXNrLmVuZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC51cGxvYWRlci5saXN0ZW5lci5vblRhc2tTdWNjZXNzKF90aGlzNC50YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzNC5yZXRyeVRhc2soX3RoaXM0LnRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC53KF90aGlzNC50YXNrLmZpbGUubmFtZSArIFwiXFx1NTIwNlxcdTU3NTdcXHU0RTBBXFx1NEYyMFxcdTU5MzFcXHU4RDI1LFxcdTUxQzZcXHU1OTA3XFx1NUYwMFxcdTU5Q0JcXHU5MUNEXFx1NEYyMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQudXBsb2FkZXIubGlzdGVuZXIub25UYXNrUmV0cnkoX3RoaXM0LnRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgeGhyLnNlbmQoY3R4TGlzdFN0cmluZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+W5Z2X5LiK5Lyg55qEdXJsXG4gICAgICAgICAqIEBwYXJhbSBibG9ja1NpemVcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRVcGxvYWRCbG9ja1VybFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXBsb2FkQmxvY2tVcmwoYmxvY2tTaXplKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRlci5kb21haW4gKyBcIi9ta2Jsay9cIiArIGJsb2NrU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+W54mH5LiK5Lyg55qEdXJsXG4gICAgICAgICAqIEBwYXJhbSBzdGFydCDniYfnmoTlnKjlnZfkuK3nmoTotbflp4vkvY3nva5cbiAgICAgICAgICogQHBhcmFtIGN0eCDliY3kuIDmrKHkuIrkvKDov5Tlm57nmoTlnZfnuqfkuIrkvKDmjqfliLbkv6Hmga/jgIJcbiAgICAgICAgICogQHBhcmFtIGhvc3Qg5oyH5a6aaG9zdFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldFVwbG9hZENodW5rVXJsXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVcGxvYWRDaHVua1VybChzdGFydCwgY3R4LCBob3N0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGhvc3QgPyBob3N0IDogdGhpcy51cGxvYWRlci5kb21haW4pICsgXCIvYnB1dC9cIiArIGN0eCArIFwiL1wiICsgc3RhcnQgKyBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+W5ZCI5bm25Z2X5Li65paH5Lu255qEdXJsXG4gICAgICAgICAqIEBwYXJhbSBmaWxlU2l6ZSDmlofku7blpKflsI9cbiAgICAgICAgICogQHBhcmFtIGVuY29kZWRLZXkgYmFzZTY0VXJsRW5jb2Rl5ZCO55qE6LWE5rqQ5ZCN56ewLOiLpeacquaMh+Wumu+8jOWImeS9v+eUqHNhdmVLZXnvvJvoi6XmnKrmjIflrppzYXZlS2V577yM5YiZ5L2/55So6LWE5rqQ5YaF5a6555qEU0hBMeWAvOS9nOS4uui1hOa6kOWQjeOAglxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImdldE1ha2VGaWxlVXJsXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYWtlRmlsZVVybChmaWxlU2l6ZSwgZW5jb2RlZEtleSkge1xuICAgICAgICAgICAgaWYgKGVuY29kZWRLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRlci5kb21haW4gKyBcIi9ta2ZpbGUvXCIgKyBmaWxlU2l6ZSArIFwiL2tleS9cIiArIGVuY29kZWRLZXk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZGVyLmRvbWFpbiArIFwiL21rZmlsZS9cIiArIGZpbGVTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmV0cnlUYXNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXRyeVRhc2sodGFzaykge1xuICAgICAgICAgICAgLy/ovr7liLDph43or5XmrKHmlbBcbiAgICAgICAgICAgIGlmICh0YXNrLnJldHJ5ID49IHRoaXMudXBsb2FkZXIucmV0cnkpIHtcbiAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LncodGFzay5maWxlLm5hbWUgKyBcIlxcdThGQkVcXHU1MjMwXFx1OTFDRFxcdTRGMjBcXHU2QjIxXFx1NjU3MFxcdTRFMEFcXHU5NjUwXCIgKyB0aGlzLnVwbG9hZGVyLnJldHJ5ICsgXCIsXFx1NTA1Q1xcdTZCNjJcXHU5MUNEXFx1NEYyMFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXNrLnJldHJ5Kys7XG4gICAgICAgICAgICBfTG9nMi5kZWZhdWx0LncodGFzay5maWxlLm5hbWUgKyBcIlxcdTVGMDBcXHU1OUNCXFx1OTFDRFxcdTRGMjAsXFx1NUY1M1xcdTUyNERcXHU5MUNEXFx1NEYyMFxcdTZCMjFcXHU2NTcwXCIgKyB0YXNrLnJldHJ5KTtcbiAgICAgICAgICAgIC8vIHRoaXMudXBsb2FkKHRhc2spO1xuICAgICAgICAgICAgLy90b2RvXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDaHVua1VwbG9hZFBhdHRlcm47XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENodW5rVXBsb2FkUGF0dGVybjtcblxuLyoqKi8gfSksXG4vKiAxMjIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXG52YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIOebtOaOpeS4iuS8oFxuICovXG52YXIgRGlyZWN0VXBsb2FkUGF0dGVybiA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaXJlY3RVcGxvYWRQYXR0ZXJuKHVwbG9hZGVyKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXJlY3RVcGxvYWRQYXR0ZXJuKTtcblxuICAgICAgICB0aGlzLnVwbG9hZGVyID0gdXBsb2FkZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWunueOsOaOpeWPo+eahOS4iuS8oOaWueazlVxuICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhEaXJlY3RVcGxvYWRQYXR0ZXJuLCBbe1xuICAgICAgICBrZXk6ICd1cGxvYWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBsb2FkKHRhc2spIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMudGFzayA9IHRhc2s7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmdldFRva2VuKHRhc2spLnRoZW4oZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgdGFzay5zdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnVwbG9hZEZpbGUodG9rZW4pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWIm+W7uuihqOWNlVxuICAgICAgICAgKiBAcGFyYW0gdG9rZW5cbiAgICAgICAgICogQHJldHVybnMge0Zvcm1EYXRhfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY3JlYXRlRm9ybURhdGEnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRm9ybURhdGEodG9rZW4pIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGhpcy50YXNrO1xuICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICAvL2tleeWtmOWcqO+8jOa3u+WKoOWIsGZvcm1EYXRh5Lit77yM6Iul5LiN6K6+572u77yM5LiD54mb5pyN5Yqh5Zmo5Lya6Ieq5Yqo55Sf5oiQaGFzaCBrZXlcbiAgICAgICAgICAgIGlmICh0YXNrLmtleSAhPT0gbnVsbCAmJiB0YXNrLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdrZXknLCB0YXNrLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3Rva2VuJywgdG9rZW4pO1xuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgdGFzay5maWxlKTtcbiAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZCgnXFx1NTIxQlxcdTVFRkFmb3JtRGF0YVxcdTVCRjlcXHU4QzYxJyk7XG4gICAgICAgICAgICByZXR1cm4gZm9ybURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOS4iuS8oOaWh+S7tlxuICAgICAgICAgKiBAcGFyYW0gdG9rZW5cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VwbG9hZEZpbGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBsb2FkRmlsZSh0b2tlbikge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciB0YXNrID0gdGhpcy50YXNrO1xuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgLy/kuIrkvKDkuK1cbiAgICAgICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLnJvdW5kKGUubG9hZGVkICogMTAwIC8gZS50b3RhbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLnByb2dyZXNzIDwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2sucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi51cGxvYWRlci5saXN0ZW5lci5vblRhc2tQcm9ncmVzcyh0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvL+S4iuS8oOWujOaIkFxuICAgICAgICAgICAgeGhyLnVwbG9hZC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2sucHJvZ3Jlc3MgPCAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza1Byb2dyZXNzKHRhc2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgdXJsID0gdGhpcy51cGxvYWRlci5kb21haW47XG4gICAgICAgICAgICAvL+mBv+WFjea1j+iniOWZqOe8k+WtmGh0dHDor7fmsYJcbiAgICAgICAgICAgIHVybCArPSAoL1xcPy8udGVzdCh0aGlzLnVwbG9hZGVyLmRvbWFpbikgPyBcIiZcIiA6IFwiP1wiKSArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDAgJiYgeGhyLnJlc3BvbnNlVGV4dCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5yZXN1bHQgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5pc1N1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5pc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrLmVuZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza1N1Y2Nlc3ModGFzayk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnJldHJ5VGFzayh0YXNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC53KHRhc2suZmlsZS5uYW1lICsgJ1xcdTRFMEFcXHU0RjIwXFx1NTkzMVxcdThEMjUsXFx1NTFDNlxcdTU5MDdcXHU1RjAwXFx1NTlDQlxcdTkxQ0RcXHU0RjIwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIudXBsb2FkZXIubGlzdGVuZXIub25UYXNrUmV0cnkodGFzayk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LncodGFzay5maWxlLm5hbWUgKyAnXFx1NEUwQVxcdTRGMjBcXHU1OTMxXFx1OEQyNScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5lcnJvciA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suaXNTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrLmlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIudXBsb2FkZXIubGlzdGVuZXIub25UYXNrRmFpbCh0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL+aJgOacieS7u+WKoemDvee7k+adn+S6hlxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLnVwbG9hZGVyLmlzVGFza1F1ZXVlRmluaXNoKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5pu05pS55Lu75Yqh5omn6KGM5Lit5qCH5b+XXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIudXBsb2FkZXIudGFza2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9vbkZpbmlzaCBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnVwbG9hZGVyLmxpc3RlbmVyLm9uRmluaXNoKF90aGlzMi51cGxvYWRlci50YXNrUXVldWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IHRoaXMuY3JlYXRlRm9ybURhdGEodG9rZW4pO1xuICAgICAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5kKFwi5Y+R6YCBYWpheCBwb3N0IOivt+axglwiKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6YeN5LygXG4gICAgICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmV0cnlUYXNrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJldHJ5VGFzayh0YXNrKSB7XG4gICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmQoXCLlvIDlp4vlsJ3or5Xph43kvKBcIik7XG4gICAgICAgICAgICAvL+i+vuWIsOmHjeivleasoeaVsFxuICAgICAgICAgICAgaWYgKHRhc2sucmV0cnkgPj0gdGhpcy51cGxvYWRlci5yZXRyeSkge1xuICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQudyh0YXNrLmZpbGUubmFtZSArICdcXHU4RkJFXFx1NTIzMFxcdTkxQ0RcXHU0RjIwXFx1NkIyMVxcdTY1NzBcXHU0RTBBXFx1OTY1MCcgKyB0aGlzLnVwbG9hZGVyLnJldHJ5ICsgJyxcXHU1MDVDXFx1NkI2MlxcdTkxQ0RcXHU0RjIwJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFzay5yZXRyeSsrO1xuICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC53KHRhc2suZmlsZS5uYW1lICsgJ1xcdTVGMDBcXHU1OUNCXFx1OTFDRFxcdTRGMjAsXFx1NUY1M1xcdTUyNERcXHU5MUNEXFx1NEYyMFxcdTZCMjFcXHU2NTcwJyArIHRhc2sucmV0cnkpO1xuICAgICAgICAgICAgdGhpcy51cGxvYWQodGFzayk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBEaXJlY3RVcGxvYWRQYXR0ZXJuO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXJlY3RVcGxvYWRQYXR0ZXJuO1xuXG4vKioqLyB9KSxcbi8qIDEyMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNodW5rID0gZXhwb3J0cy5CbG9jayA9IGV4cG9ydHMuQ2h1bmtUYXNrID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX0Jhc2VUYXNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oODgpO1xuXG52YXIgX0Jhc2VUYXNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jhc2VUYXNrMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiDliIblnZfku7vliqFcbiAqL1xudmFyIENodW5rVGFzayA9IGZ1bmN0aW9uIChfQmFzZVRhc2spIHtcbiAgICBfaW5oZXJpdHMoQ2h1bmtUYXNrLCBfQmFzZVRhc2spO1xuXG4gICAgLyoqXG4gICAgICog5p6E6YCg5Ye95pWwXG4gICAgICogQHBhcmFtIGZpbGVcbiAgICAgKiBAcGFyYW0gYmxvY2tTaXplIOWdl+Wkp+Wwj1xuICAgICAqIEBwYXJhbSBjaHVua1NpemUg54mH5aSn5bCPXG4gICAgICovXG4gICAgZnVuY3Rpb24gQ2h1bmtUYXNrKGZpbGUsIGJsb2NrU2l6ZSwgY2h1bmtTaXplKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDaHVua1Rhc2spO1xuXG4gICAgICAgIC8v5YiG5Z2XXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDaHVua1Rhc2suX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDaHVua1Rhc2spKS5jYWxsKHRoaXMsIGZpbGUpKTtcblxuICAgICAgICBfdGhpcy5fYmxvY2tzID0gW107XG4gICAgICAgIF90aGlzLl9ibG9ja1NpemUgPSAwO1xuICAgICAgICBfdGhpcy5fY2h1bmtTaXplID0gMDtcbiAgICAgICAgX3RoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZTtcbiAgICAgICAgX3RoaXMuX2NodW5rU2l6ZSA9IGNodW5rU2l6ZTtcbiAgICAgICAgX3RoaXMuc3BsaWNlRmlsZTJCbG9jaygpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWwhuaWh+S7tuWIhuWdl1xuICAgICAqL1xuXG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2h1bmtUYXNrLCBbe1xuICAgICAgICBrZXk6IFwic3BsaWNlRmlsZTJCbG9ja1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3BsaWNlRmlsZTJCbG9jaygpIHtcbiAgICAgICAgICAgIHRoaXMuX2Jsb2NrcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGZpbGVTaXplID0gdGhpcy5fZmlsZS5zaXplO1xuICAgICAgICAgICAgdmFyIGZpbGUgPSB0aGlzLl9maWxlO1xuICAgICAgICAgICAgLy/mgLvlnZfmlbBcbiAgICAgICAgICAgIHZhciBibG9ja0NvdW50ID0gTWF0aC5jZWlsKGZpbGVTaXplIC8gdGhpcy5fYmxvY2tTaXplKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaSAqIHRoaXMuX2Jsb2NrU2l6ZTsgLy/otbflp4vkvY3nva5cbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gc3RhcnQgKyB0aGlzLl9ibG9ja1NpemU7IC8v57uT5p2f5L2N572uXG4gICAgICAgICAgICAgICAgLy/mnoTpgKDkuIDkuKrlnZflrp7kvotcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBuZXcgQmxvY2soc3RhcnQsIGVuZCwgZmlsZS5zbGljZShzdGFydCwgZW5kKSwgdGhpcy5fY2h1bmtTaXplLCBmaWxlKTtcbiAgICAgICAgICAgICAgICAvL+a3u+WKoOWIsOaVsOe7hOS4rVxuICAgICAgICAgICAgICAgIHRoaXMuX2Jsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+W5omA5pyJ55qEYmxvY2tcbiAgICAgICAgICogQHJldHVybnMge0Jsb2NrW119XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYmxvY2tzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrcztcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6I635Y+W5q2j5Zyo5aSE55CG55qEYmxvY2tcbiAgICAgICAgICogQHJldHVybnMge0Jsb2NrfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb2Nlc3NpbmdCbG9ja1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMuX2Jsb2Nrc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFibG9jay5wcm9jZXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCLmib7kuI3liLDmraPlnKjlpITnkIbnmoRCbG9ja1wiKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImZpbmlzaGVkQmxvY2tzU2l6ZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHZhciBzaXplID0gMDtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLl9ibG9ja3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHNpemUgKz0gYmxvY2suaXNGaW5pc2ggPyBibG9jay5kYXRhLnNpemUgOiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNodW5rc1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IHRoaXMuX2Jsb2Nrc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IGJsb2NrLmNodW5rc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2goY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOiOt+WPluato+WcqOWkhOeQhueahGNodW5rXG4gICAgICAgICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJwcm9jZXNzaW5nQ2h1bmtcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I1ID0gdGhpcy5fYmxvY2tzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9jayA9IF9zdGVwNS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJsb2NrLnByb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNiA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNiA9IGJsb2NrLmNodW5rc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNiA9IChfc3RlcDYgPSBfaXRlcmF0b3I2Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb242ID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IF9zdGVwNi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2h1bmsucHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNodW5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjYgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjYgJiYgX2l0ZXJhdG9yNi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNSA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I1ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ICYmIF9pdGVyYXRvcjUucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I1LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIuaJvuS4jeWIsOato+WcqOWkhOeQhueahENodW5rXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmgLvlhbHliIbniYfmlbDph48o5omA5pyJ5YiG5Z2X55qE5YiG54mH5pWw6YeP5oC75ZKMKVxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInRvdGFsQ2h1bmtDb3VudFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yNyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yNyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3I3ID0gdGhpcy5fYmxvY2tzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA3OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ID0gKF9zdGVwNyA9IF9pdGVyYXRvcjcubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjcgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9jayA9IF9zdGVwNy52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBibG9jay5jaHVua3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yNyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3I3ID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb243ICYmIF9pdGVyYXRvcjcucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3I3LnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I3O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2h1bmtUYXNrO1xufShfQmFzZVRhc2szLmRlZmF1bHQpO1xuLyoqXG4gKiDliIblnZfvvIzliIblnZflpKflsI/kuIPniZvlm7rlrprmmK80TVxuICovXG5cblxudmFyIEJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXJ0IOi1t+Wni+S9jee9rlxuICAgICAqIEBwYXJhbSBlbmQg57uT5p2f5L2N572uXG4gICAgICogQHBhcmFtIGRhdGEg5Z2X5pWw5o2uXG4gICAgICogQHBhcmFtIGNodW5rU2l6ZSDliIbniYfmlbDmja7nmoTmnIDlpKflpKflsI9cbiAgICAgKiBAcGFyYW0gZmlsZSDliIblnZfmiYDlsZ7mlofku7ZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCbG9jayhzdGFydCwgZW5kLCBkYXRhLCBjaHVua1NpemUsIGZpbGUpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJsb2NrKTtcblxuICAgICAgICB0aGlzLl9jaHVua3MgPSBbXTtcbiAgICAgICAgdGhpcy5faXNGaW5pc2ggPSBmYWxzZTsgLy/mmK/lkKbkuIrkvKDlrozmiJBcbiAgICAgICAgdGhpcy5fcHJvY2Vzc2luZyA9IGZhbHNlOyAvL+aYr+WQpuato+WcqOS4iuS8oFxuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZW5kID0gZW5kO1xuICAgICAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5zcGxpY2VCbG9jazJDaHVuayhjaHVua1NpemUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDlsIblnZfliIbniYdcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKEJsb2NrLCBbe1xuICAgICAgICBrZXk6IFwic3BsaWNlQmxvY2syQ2h1bmtcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNwbGljZUJsb2NrMkNodW5rKGNodW5rU2l6ZSkge1xuICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2RhdGEuc2l6ZTtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgICAgICAgIC8v5oC754mH5pWwXG4gICAgICAgICAgICB2YXIgY2h1bmtDb3VudCA9IE1hdGguY2VpbChibG9ja1NpemUgLyBjaHVua1NpemUpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBpICogY2h1bmtTaXplOyAvL+i1t+Wni+S9jee9rlxuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIGNodW5rU2l6ZTsgLy/nu5PmnZ/kvY3nva5cbiAgICAgICAgICAgICAgICAvL+aehOmAoOS4gOS4queJh+WunuS+i1xuICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IG5ldyBDaHVuayhzdGFydCwgZW5kLCBkYXRhLnNsaWNlKHN0YXJ0LCBlbmQpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAvL+a3u+WKoOWIsOaVsOe7hOS4rVxuICAgICAgICAgICAgICAgIHRoaXMuX2NodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5LiK5Lyg5LitXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb2Nlc3NpbmdcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc2luZztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NpbmcgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5YiG5Z2X5omA5bGe55qE5paH5Lu2XG4gICAgICAgICAqIEByZXR1cm5zIHtGaWxlfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImZpbGVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlsZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5bey57uP57uT5p2fXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImlzRmluaXNoXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRmluaXNoO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faXNGaW5pc2ggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6L+U5Zue5YiG5Z2X5pWw5o2uXG4gICAgICAgICAqIEByZXR1cm5zIHtCbG9ifVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImRhdGFcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6L+U5Zue5a2X6IqC6LW35aeL5L2N572uXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3RhcnRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOi/lOWbnuWtl+iKgue7k+adn+S9jee9rlxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImVuZFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjaHVua3NcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2h1bmtzO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJsb2NrO1xufSgpO1xuLyoqXG4gKiDliIbniYfvvIzliIbniYflpKflsI/lj6/ku6Xoh6rlrprkuYnvvIzoh7PlsJEx5a2X6IqCXG4gKi9cblxuXG52YXIgQ2h1bmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhcnQg5a2X6IqC6LW35aeL5L2N572uXG4gICAgICogQHBhcmFtIGVuZCDlrZfoioLnu5PmnZ/kvY3nva5cbiAgICAgKiBAcGFyYW0gZGF0YSDliIbniYfmlbDmja5cbiAgICAgKiBAcGFyYW0gYmxvY2sg5YiG5Z2X5a+56LGhXG4gICAgICovXG4gICAgZnVuY3Rpb24gQ2h1bmsoc3RhcnQsIGVuZCwgZGF0YSwgYmxvY2spIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENodW5rKTtcblxuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gZmFsc2U7IC8v5piv5ZCm5q2j5Zyo5LiK5LygXG4gICAgICAgIHRoaXMuX2lzRmluaXNoID0gZmFsc2U7IC8v5piv5ZCm5LiK5Lyg5a6M5oiQXG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuX2Jsb2NrID0gYmxvY2s7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOi/lOWbnmNodW5r5omA5bGe55qEQmxvY2vlr7nosaFcbiAgICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhDaHVuaywgW3tcbiAgICAgICAga2V5OiBcImJsb2NrXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDov5Tlm57lrZfoioLotbflp4vkvY3nva5cbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzdGFydFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6L+U5Zue5a2X6IqC57uT5p2f5L2N572uXG4gICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZW5kXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6L+U5Zue5YiG54mH5pWw5o2uXG4gICAgICAgICAqIEByZXR1cm5zIHtCbG9ifVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImRhdGFcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5bey57uP57uT5p2fXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImlzRmluaXNoXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRmluaXNoO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faXNGaW5pc2ggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImhvc3RcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faG9zdDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvc3QgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog5piv5ZCm5LiK5Lyg5LitXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb2Nlc3NpbmdcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc2luZztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NpbmcgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICog6L+U5Zue5LiK5Lyg5o6n5Yi25L+h5oGvKOS4g+eJm+acjeWKoeWZqOi/lOWbnuWJjeS4gOasoeS4iuS8oOi/lOWbnueahOWIhueJh+S4iuS8oOaOp+WItuS/oeaBryznlKjkuo7kuIvkuIDmrKHkuIrkvKAs56ys5LiA5LiqY2h1bmvmraTlgLzkuLrnqbopXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY3R4XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N0eDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENodW5rO1xufSgpO1xuXG5leHBvcnRzLkNodW5rVGFzayA9IENodW5rVGFzaztcbmV4cG9ydHMuQmxvY2sgPSBCbG9jaztcbmV4cG9ydHMuQ2h1bmsgPSBDaHVuaztcblxuLyoqKi8gfSksXG4vKiAxMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9CYXNlVGFzazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4KTtcblxudmFyIF9CYXNlVGFzazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CYXNlVGFzazIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICog55u05Lyg5Lu75YqhXG4gKi9cbnZhciBEaXJlY3RUYXNrID0gZnVuY3Rpb24gKF9CYXNlVGFzaykge1xuICBfaW5oZXJpdHMoRGlyZWN0VGFzaywgX0Jhc2VUYXNrKTtcblxuICBmdW5jdGlvbiBEaXJlY3RUYXNrKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEaXJlY3RUYXNrKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRGlyZWN0VGFzay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKERpcmVjdFRhc2spKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBEaXJlY3RUYXNrO1xufShfQmFzZVRhc2szLmRlZmF1bHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEaXJlY3RUYXNrO1xuXG4vKioqLyB9KSxcbi8qIDEyNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBVVUlEID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVVSUQoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVVUlEKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoVVVJRCwgbnVsbCwgW3tcbiAgICAgICAga2V5OiAndXVpZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1dWlkKCkge1xuICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgICAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGMgPT0gJ3gnID8gciA6IHIgJiAweDMgfCAweDgpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFVVSUQ7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFVVSUQ7XG5cbi8qKiovIH0pLFxuLyogMTI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogY2FudmFzLnRvQmxvYiBwb2x5ZmlsbFxuICovXG5pZiAoIUhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS50b0Jsb2IpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlLCAndG9CbG9iJywge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoY2FsbGJhY2ssIHR5cGUsIHF1YWxpdHkpIHtcbiAgICAgICAgICAgIHZhciBiaW5TdHIgPSBhdG9iKHRoaXMudG9EYXRhVVJMKHR5cGUsIHF1YWxpdHkpLnNwbGl0KCcsJylbMV0pLFxuICAgICAgICAgICAgICAgIGxlbiA9IGJpblN0ci5sZW5ndGgsXG4gICAgICAgICAgICAgICAgYXJyID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSBiaW5TdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBCbG9iKFthcnJdLCB7IHR5cGU6IHR5cGUgfHwgJ2ltYWdlL3BuZycgfSkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8qKiovIH0pLFxuLyogMTI3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDMwOCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMzA5KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMjgpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxMTcpKSlcblxuLyoqKi8gfSksXG4vKiAxMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxMzcpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KS5SZWdFeHAuZXNjYXBlO1xuXG4vKioqLyB9KSxcbi8qIDEyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgaXNBcnJheSAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4KVxuICAsIFNQRUNJRVMgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXtcbiAgdmFyIEM7XG4gIGlmKGlzQXJyYXkob3JpZ2luYWwpKXtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZih0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpQyA9IHVuZGVmaW5lZDtcbiAgICBpZihpc09iamVjdChDKSl7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmKEMgPT09IG51bGwpQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG5cbi8qKiovIH0pLFxuLyogMTMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEzMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFuT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMylcbiAgLCBOVU1CRVIgICAgICA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpe1xuICBpZihoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKXRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuXG4vKioqLyB9KSxcbi8qIDEzMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KVxuICAsIGdPUFMgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KVxuICAsIHBJRSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKiovIH0pLFxuLyogMTMzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnZXRLZXlzICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KVxuICAsIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwYXRoICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNSlcbiAgLCBpbnZva2UgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKVxuICAsIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigvKiAuLi5wYXJncyAqLyl7XG4gIHZhciBmbiAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIHBhcmdzICA9IEFycmF5KGxlbmd0aClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIF8gICAgICA9IHBhdGguX1xuICAgICwgaG9sZGVyID0gZmFsc2U7XG4gIHdoaWxlKGxlbmd0aCA+IGkpaWYoKHBhcmdzW2ldID0gYXJndW1lbnRzW2krK10pID09PSBfKWhvbGRlciA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzO1xuICAgIGlmKCFob2xkZXIgJiYgIWFMZW4pcmV0dXJuIGludm9rZShmbiwgcGFyZ3MsIHRoYXQpO1xuICAgIGFyZ3MgPSBwYXJncy5zbGljZSgpO1xuICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTtcbiAgICB3aGlsZShhTGVuID4gaylhcmdzLnB1c2goYXJndW1lbnRzW2srK10pO1xuICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG4vKioqLyB9KSxcbi8qIDEzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlZ0V4cCwgcmVwbGFjZSl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcblxuLyoqKi8gfSksXG4vKiAxMzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHJlICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTM2KSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7ZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpeyByZXR1cm4gJHJlKGl0KTsgfX0pO1xuXG5cbi8qKiovIH0pLFxuLyogMTM4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2NvcHlXaXRoaW46IF9fd2VicGFja19yZXF1aXJlX18oOTApfSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNDApKCdjb3B5V2l0aGluJyk7XG5cbi8qKiovIH0pLFxuLyogMTM5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkZXZlcnkgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMjApKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKX0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQwKSgnZmlsbCcpO1xuXG4vKioqLyB9KSxcbi8qIDE0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJGZpbHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkZmluZCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkoNilcbiAgLCBLRVkgICAgID0gJ2ZpbmRJbmRleCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg0MCkoS0VZKTtcblxuLyoqKi8gfSksXG4vKiAxNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICRmaW5kICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKSg1KVxuICAsIEtFWSAgICAgPSAnZmluZCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQwKShLRVkpO1xuXG4vKioqLyB9KSxcbi8qIDE0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICRmb3JFYWNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkoMClcbiAgLCBTVFJJQ1QgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjApKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBjdHggICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpXG4gICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpXG4gICwgY2FsbCAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5KVxuICAsIGlzQXJyYXlJdGVyICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NylcbiAgLCB0b0xlbmd0aCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpXG4gICwgZ2V0SXRlckZuICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXyg1NCkoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UvKiwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIEMgICAgICAgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5XG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpbmRleCAgID0gMFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZihtYXBwaW5nKW1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4Kyspe1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvcihyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuLyoqKi8gfSksXG4vKiAxNDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZXhwb3J0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICRpbmRleE9mICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KShmYWxzZSlcbiAgLCAkbmF0aXZlICAgICAgID0gW10uaW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9fd2VicGFja19yZXF1aXJlX18oMjApKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5Jywge2lzQXJyYXk6IF9fd2VicGFja19yZXF1aXJlX18oNjgpfSk7XG5cbi8qKiovIH0pLFxuLyogMTQ4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCB0b0lPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuICAsIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KSAhPSBPYmplY3QgfHwgIV9fd2VicGFja19yZXF1aXJlX18oMjApKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9JT2JqZWN0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG4gICwgdG9JbnRlZ2VyICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzApXG4gICwgdG9MZW5ndGggICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcbiAgLCAkbmF0aXZlICAgICAgID0gW10ubGFzdEluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXygyMCkoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYoTkVHQVRJVkVfWkVSTylyZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gbGVuZ3RoIC0gMTtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYoaW5kZXggPCAwKWluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yKDtpbmRleCA+PSAwOyBpbmRleC0tKWlmKGluZGV4IGluIE8paWYoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICRtYXAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXygyMCkoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTUxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYxKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUoYUxlbiA+IGluZGV4KWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkcmVkdWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMjApKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pe1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE1MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHJlZHVjZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE1NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgaHRtbCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjUpXG4gICwgY29mICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpXG4gICwgdG9JbmRleCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpXG4gICwgdG9MZW5ndGggICA9IF9fd2VicGFja19yZXF1aXJlX18oOClcbiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbigpe1xuICBpZihodG1sKWFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXtcbiAgICB2YXIgbGVuICAgPSB0b0xlbmd0aCh0aGlzLmxlbmd0aClcbiAgICAgICwga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYoa2xhc3MgPT0gJ0FycmF5JylyZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCAgPSB0b0luZGV4KGJlZ2luLCBsZW4pXG4gICAgICAsIHVwVG8gICA9IHRvSW5kZXgoZW5kLCBsZW4pXG4gICAgICAsIHNpemUgICA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydClcbiAgICAgICwgY2xvbmVkID0gQXJyYXkoc2l6ZSlcbiAgICAgICwgaSAgICAgID0gMDtcbiAgICBmb3IoOyBpIDwgc2l6ZTsgaSsrKWNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE1NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHNvbWUgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE1NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuICAsIHRvT2JqZWN0ICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcbiAgLCBmYWlscyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpXG4gICwgJHNvcnQgICAgID0gW10uc29ydFxuICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXygyMCkoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMzcpKCdBcnJheScpO1xuXG4vKioqLyB9KSxcbi8qIDE1OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywge25vdzogZnVuY3Rpb24oKXsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9fSk7XG5cbi8qKiovIH0pLFxuLyogMTU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgZmFpbHMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMylcbiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcblxudmFyIGx6ID0gZnVuY3Rpb24obnVtKXtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZSgtNWUxMyAtIDEpLnRvSVNPU3RyaW5nKCkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgbmV3IERhdGUoTmFOKS50b0lTT1N0cmluZygpO1xufSkpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7XG4gICAgaWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gICAgdmFyIGQgPSB0aGlzXG4gICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAgICwgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgICAgICwgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZXhwb3J0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCB0b09iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcbiAgLCB0b1ByaW1pdGl2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGwgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoe3RvSVNPU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gMTsgfX0pICE9PSAxO1xufSksICdEYXRlJywge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpe1xuICAgIHZhciBPICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTYxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBUT19QUklNSVRJVkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCd0b1ByaW1pdGl2ZScpXG4gICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSlfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKShwcm90bywgVE9fUFJJTUlUSVZFLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMSkpO1xuXG4vKioqLyB9KSxcbi8qIDE2MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgRGF0ZVByb3RvICAgID0gRGF0ZS5wcm90b3R5cGVcbiAgLCBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJ1xuICAsIFRPX1NUUklORyAgICA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgICAgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXVxuICAsIGdldFRpbWUgICAgICA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSl7XG4gIF9fd2VicGFja19yZXF1aXJlX18oMTMpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuXG4vKioqLyB9KSxcbi8qIDE2MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7YmluZDogX193ZWJwYWNrX3JlcXVpcmVfXyg5Myl9KTtcblxuLyoqKi8gfSksXG4vKiAxNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpXG4gICwgSEFTX0lOU1RBTkNFICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdoYXNJbnN0YW5jZScpXG4gICwgRnVuY3Rpb25Qcm90byAgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKV9fd2VicGFja19yZXF1aXJlX18oNykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHt2YWx1ZTogZnVuY3Rpb24oTyl7XG4gIGlmKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTtcbiAgaWYoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSlyZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSlpZih0aGlzLnByb3RvdHlwZSA9PT0gTylyZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufX0pO1xuXG4vKioqLyB9KSxcbi8qIDE2NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZlxuICAsIGNyZWF0ZURlc2MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KVxuICAsIGhhcyAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuICAsIEZQcm90byAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGVcbiAgLCBuYW1lUkUgICAgID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvXG4gICwgTkFNRSAgICAgICA9ICduYW1lJztcblxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKXtcbiAgICB0cnkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAgICwgbmFtZSA9ICgnJyArIHRoYXQpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICBoYXModGhhdCwgTkFNRSkgfHwgIWlzRXh0ZW5zaWJsZSh0aGF0KSB8fCBkUCh0aGF0LCBOQU1FLCBjcmVhdGVEZXNjKDUsIG5hbWUpKTtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgbG9nMXAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTAxKVxuICAsIHNxcnQgICAgPSBNYXRoLnNxcnRcbiAgLCAkYWNvc2ggID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU4gXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkYXNpbmggID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCl7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywge2FzaW5oOiBhc2luaH0pO1xuXG4vKioqLyB9KSxcbi8qIDE2OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkYXRhbmggID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE2OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIHNpZ24gICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpe1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNzAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCl7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNzEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCl7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTcyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkZXhwbTEgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7ZXhwbTE6ICRleHBtMX0pO1xuXG4vKioqLyB9KSxcbi8qIDE3MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgc2lnbiAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MilcbiAgLCBwb3cgICAgICAgPSBNYXRoLnBvd1xuICAsIEVQU0lMT04gICA9IHBvdygyLCAtNTIpXG4gICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMylcbiAgLCBNQVgzMiAgICAgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKVxuICAsIE1JTjMyICAgICA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnJvdW5kOiBmdW5jdGlvbiBmcm91bmQoeCl7XG4gICAgdmFyICRhYnMgID0gTWF0aC5hYnMoeClcbiAgICAgICwgJHNpZ24gPSBzaWduKHgpXG4gICAgICAsIGEsIHJlc3VsdDtcbiAgICBpZigkYWJzIDwgTUlOMzIpcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gICAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gICAgaWYocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdClyZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE3NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGFicyAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSAgPSAwXG4gICAgICAsIGkgICAgPSAwXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGxhcmcgPSAwXG4gICAgICAsIGFyZywgZGl2O1xuICAgIHdoaWxlKGkgPCBhTGVuKXtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZihsYXJnIDwgYXJnKXtcbiAgICAgICAgZGl2ICA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSAgPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmKGFyZyA+IDApe1xuICAgICAgICBkaXYgID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICRpbXVsICAgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgeG4gPSAreFxuICAgICAgLCB5biA9ICt5XG4gICAgICAsIHhsID0gVUlOVDE2ICYgeG5cbiAgICAgICwgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNzYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCl7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxNzcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge2xvZzFwOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSl9KTtcblxuLyoqKi8gfSksXG4vKiAxNzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCl7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE3OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtzaWduOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKX0pO1xuXG4vKioqLyB9KSxcbi8qIDE4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBleHBtMSAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSlcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMTgxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGV4cG0xICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpe1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KVxuICAgICAgLCBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGdsb2JhbCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuICAsIGhhcyAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMClcbiAgLCBjb2YgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KVxuICAsIHRvUHJpbWl0aXZlICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMylcbiAgLCBnT1BOICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpLmZcbiAgLCBnT1BEICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpLmZcbiAgLCBkUCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNykuZlxuICAsICR0cmltICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCkudHJpbVxuICAsIE5VTUJFUiAgICAgICAgICAgID0gJ051bWJlcidcbiAgLCAkTnVtYmVyICAgICAgICAgICA9IGdsb2JhbFtOVU1CRVJdXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkTnVtYmVyXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkTnVtYmVyLnByb3RvdHlwZVxuICAvLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbiAgLCBCUk9LRU5fQ09GICAgICAgICA9IGNvZihfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKShwcm90bykpID09IE5VTUJFUlxuICAsIFRSSU0gICAgICAgICAgICAgID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24oYXJndW1lbnQpe1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMClcbiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpe1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZihmaXJzdCA9PT0gNDgpe1xuICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpe1xuICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzkgOiBjYXNlIDExMSA6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKXtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpe1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlXG4gICAgICAsIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspe1xuICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpe1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIF9fd2VicGFja19yZXF1aXJlX18oMTMpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cblxuLyoqKi8gfSksXG4vKiAxODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7RVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKX0pO1xuXG4vKioqLyB9KSxcbi8qIDE4NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBfaXNGaW5pdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7aXNJbnRlZ2VyOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KX0pO1xuXG4vKioqLyB9KSxcbi8qIDE4NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcil7XG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGlzSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oOTgpXG4gICwgYWJzICAgICAgID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcil7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE4OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmfSk7XG5cbi8qKiovIH0pLFxuLyogMTkwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgJGV4cG9ydCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHBhcnNlRmxvYXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7XG5cbi8qKiovIH0pLFxuLyogMTkyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHBhcnNlSW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pO1xuXG4vKioqLyB9KSxcbi8qIDE5MyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCB0b0ludGVnZXIgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKVxuICAsIGFOdW1iZXJWYWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18oODkpXG4gICwgcmVwZWF0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OSlcbiAgLCAkdG9GaXhlZCAgICAgPSAxLi50b0ZpeGVkXG4gICwgZmxvb3IgICAgICAgID0gTWF0aC5mbG9vclxuICAsIGRhdGEgICAgICAgICA9IFswLCAwLCAwLCAwLCAwLCAwXVxuICAsIEVSUk9SICAgICAgICA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJ1xuICAsIFpFUk8gICAgICAgICA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24obiwgYyl7XG4gIHZhciBpICA9IC0xXG4gICAgLCBjMiA9IGM7XG4gIHdoaWxlKCsraSA8IDYpe1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbihuKXtcbiAgdmFyIGkgPSA2XG4gICAgLCBjID0gMDtcbiAgd2hpbGUoLS1pID49IDApe1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgdmFyIGkgPSA2XG4gICAgLCBzID0gJyc7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBpZihzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApe1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24oeCwgbiwgYWNjKXtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbih4KXtcbiAgdmFyIG4gID0gMFxuICAgICwgeDIgPSB4O1xuICB3aGlsZSh4MiA+PSA0MDk2KXtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUoeDIgPj0gMil7XG4gICAgbiAgKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4Li50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIV9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpe1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKVxuICAgICAgLCBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKVxuICAgICAgLCBzID0gJydcbiAgICAgICwgbSA9IFpFUk9cbiAgICAgICwgZSwgeiwgaiwgaztcbiAgICBpZihmIDwgMCB8fCBmID4gMjApdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgaWYoeCAhPSB4KXJldHVybiAnTmFOJztcbiAgICBpZih4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSlyZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmKHggPCAwKXtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmKHggPiAxZS0yMSl7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmKGUgPiAwKXtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZShqID49IDcpe1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlKGogPj0gMjMpe1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZiA+IDApe1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkZmFpbHMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpXG4gICwgYU51bWJlclZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OSlcbiAgLCAkdG9QcmVjaXNpb24gPSAxLi50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKXtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7IFxuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAxOTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMil9KTtcblxuLyoqKi8gfSksXG4vKiAxOTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogX193ZWJwYWNrX3JlcXVpcmVfXygzMyl9KTtcblxuLyoqKi8gfSksXG4vKiAxOTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyl9KTtcblxuLyoqKi8gfSksXG4vKiAxOTggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oNiksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IF9fd2VicGFja19yZXF1aXJlX18oNykuZn0pO1xuXG4vKioqLyB9KSxcbi8qIDE5OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgbWV0YSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5vbkZyZWV6ZTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2ZyZWV6ZScsIGZ1bmN0aW9uKCRmcmVlemUpe1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KXtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcbiAgLCAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikuZjtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpLmY7XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAsICRnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIyKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjIpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7aXM6IF9fd2VicGFja19yZXF1aXJlX18oMTEwKX0pO1xuXG4vKioqLyB9KSxcbi8qIDIwNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcbiAgLCAka2V5cyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIyKSgna2V5cycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgbWV0YSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5vbkZyZWV6ZTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyMikoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24oJHByZXZlbnRFeHRlbnNpb25zKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIwOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBtZXRhICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpLm9uRnJlZXplO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIyKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IF9fd2VicGFja19yZXF1aXJlX18oNzQpLnNldH0pO1xuXG4vKioqLyB9KSxcbi8qIDIxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDUpXG4gICwgdGVzdCAgICA9IHt9O1xudGVzdFtfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpe1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG5cbi8qKiovIH0pLFxuLyogMjEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkcGFyc2VGbG9hdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTA4KTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTtcblxuLyoqKi8gfSksXG4vKiAyMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRleHBvcnQgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkcGFyc2VJbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOSk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHtwYXJzZUludDogJHBhcnNlSW50fSk7XG5cbi8qKiovIH0pLFxuLyogMjE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgTElCUkFSWSAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgY3R4ICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcbiAgLCBjbGFzc29mICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KVxuICAsICRleHBvcnQgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBpc09iamVjdCAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgYUZ1bmN0aW9uICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcbiAgLCBhbkluc3RhbmNlICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKVxuICAsIGZvck9mICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NilcbiAgLCB0YXNrICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxKS5zZXRcbiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKSgpXG4gICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnXG4gICwgVHlwZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBJbnRlcm5hbCwgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAsIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbX193ZWJwYWNrX3JlcXVpcmVfXyg1KSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uKGV4ZWMpeyBleGVjKGVtcHR5LCBlbXB0eSk7IH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBzYW1lQ29uc3RydWN0b3IgPSBmdW5jdGlvbihhLCBiKXtcbiAgLy8gd2l0aCBsaWJyYXJ5IHdyYXBwZXIgc3BlY2lhbCBjYXNlXG4gIHJldHVybiBhID09PSBiIHx8IGEgPT09ICRQcm9taXNlICYmIGIgPT09IFdyYXBwZXI7XG59O1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbihpdCl7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7XG4gIHJldHVybiBzYW1lQ29uc3RydWN0b3IoJFByb21pc2UsIEMpXG4gICAgPyBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICA6IG5ldyBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uKCQkcmVzb2x2ZSwgJCRyZWplY3Qpe1xuICAgIGlmKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ICA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcbnZhciBwZXJmb3JtID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB7ZXJyb3I6IGV9O1xuICB9XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uKHByb21pc2UsIGlzUmVqZWN0KXtcbiAgaWYocHJvbWlzZS5fbilyZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIG9rICAgID0gcHJvbWlzZS5fcyA9PSAxXG4gICAgICAsIGkgICAgID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24ocmVhY3Rpb24pe1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbFxuICAgICAgICAsIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlXG4gICAgICAgICwgcmVqZWN0ICA9IHJlYWN0aW9uLnJlamVjdFxuICAgICAgICAsIGRvbWFpbiAgPSByZWFjdGlvbi5kb21haW5cbiAgICAgICAgLCByZXN1bHQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZihoYW5kbGVyKXtcbiAgICAgICAgICBpZighb2spe1xuICAgICAgICAgICAgaWYocHJvbWlzZS5faCA9PSAyKW9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGhhbmRsZXIgPT09IHRydWUpcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2Upe1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSl7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSlydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZihpc1JlamVjdCAmJiAhcHJvbWlzZS5faClvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBhYnJ1cHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSkpe1xuICAgICAgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgICBpZihpc05vZGUpe1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbil7XG4gICAgICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZX0pO1xuICAgICAgICB9IGVsc2UgaWYoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcil7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmKGFicnVwdCl0aHJvdyBhYnJ1cHQuZXJyb3I7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICBpZihwcm9taXNlLl9oID09IDEpcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2NcbiAgICAsIGkgICAgID0gMFxuICAgICwgcmVhY3Rpb247XG4gIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpe1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZihyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSlyZXR1cm4gZmFsc2U7XG4gIH0gcmV0dXJuIHRydWU7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYoaXNOb2RlKXtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCl7XG4gICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3Z9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmKCFwcm9taXNlLl9hKXByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpc1xuICAgICwgdGhlbjtcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZihwcm9taXNlID09PSB2YWx1ZSl0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZih0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpe1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB3cmFwcGVyID0ge193OiBwcm9taXNlLCBfZDogZmFsc2V9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgJHJlamVjdC5jYWxsKHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmKCFVU0VfTkFUSVZFKXtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaChlcnIpe1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl7XG4gICAgICB2YXIgcmVhY3Rpb24gICAgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rICAgICA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCAgID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYodGhpcy5fYSl0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYodGhpcy5fcylub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpe1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcHJvbWlzZSAgPSBuZXcgSW50ZXJuYWw7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ICA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1Byb21pc2U6ICRQcm9taXNlfSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQzKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKDM3KShQUk9NSVNFKTtcbldyYXBwZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpXG4gICwgYW5PYmplY3QgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIHJBcHBseSAgICA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpLlJlZmxlY3QgfHwge30pLmFwcGx5XG4gICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCl7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KVxuICAgICAgLCBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGNyZWF0ZSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKVxuICAsIGFGdW5jdGlvbiAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuICAsIGFuT2JqZWN0ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgaXNPYmplY3QgICA9IF9fd2VicGFja19yZXF1aXJlX18oNClcbiAgLCBmYWlscyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVxuICAsIGJpbmQgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKVxuICAsIHJDb25zdHJ1Y3QgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygyKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbigpe30sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgckNvbnN0cnVjdChmdW5jdGlvbigpe30pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiwgbmV3VGFyZ2V0Ki8pe1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYoVGFyZ2V0ID09IG5ld1RhcmdldCl7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gICAgPSBuZXdUYXJnZXQucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIxNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KVxuICAsICRleHBvcnQgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGFuT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXygzKShmdW5jdGlvbigpe1xuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHt2YWx1ZTogMX0pLCAxLCB7dmFsdWU6IDJ9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgZ09QRCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mXG4gICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIxOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXSAgICAgICAvLyBrZXlzXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gaXRlcmF0ZWQpa2V5cy5wdXNoKGtleSk7XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXyg2OSkoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgPSB0aGlzXG4gICAgLCBrZXlzID0gdGhhdC5fa1xuICAgICwga2V5O1xuICBkbyB7XG4gICAgaWYodGhhdC5faSA+PSBrZXlzLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICB9IHdoaWxlKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4ge3ZhbHVlOiBrZXksIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCl7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjIwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcbiAgLCAkZXhwb3J0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgZ2V0UHJvdG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KVxuICAsIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuICAsIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcbiAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTApXG4gICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgaXNPYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpXG4gICwgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleS8qLCByZWNlaXZlciovKXtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl1cbiAgICAsIGRlc2MsIHByb3RvO1xuICBpZihhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcilyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSlyZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSlyZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7Z2V0OiBnZXR9KTtcblxuLyoqKi8gfSksXG4vKiAyMjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjI0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgYW5PYmplY3QgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogX193ZWJwYWNrX3JlcXVpcmVfXygxMDcpfSk7XG5cbi8qKiovIH0pLFxuLyogMjI2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYoJHByZXZlbnRFeHRlbnNpb25zKSRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBzZXRQcm90byA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpO1xuXG5pZihzZXRQcm90bykkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKXtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIyOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KVxuICAsIGdPUEQgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcbiAgLCBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpXG4gICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGNyZWF0ZURlc2MgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSlcbiAgLCBhbk9iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBpc09iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpXG4gICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZighb3duRGVzYyl7XG4gICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7XG5cbi8qKiovIH0pLFxuLyogMjI5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMilcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpXG4gICwgZFAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLmZcbiAgLCBnT1BOICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpLmZcbiAgLCBpc1JlZ0V4cCAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpXG4gICwgJGZsYWdzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKVxuICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cFxuICAsIEJhc2UgICAgICAgICAgICAgID0gJFJlZ0V4cFxuICAsIHByb3RvICAgICAgICAgICAgID0gJFJlZ0V4cC5wcm90b3R5cGVcbiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2dcbiAgLCByZTIgICAgICAgICAgICAgICA9IC9hL2dcbiAgLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG4gICwgQ09SUkVDVF9ORVcgICAgICAgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmKF9fd2VicGFja19yZXF1aXJlX18oNikgJiYgKCFDT1JSRUNUX05FVyB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uKCl7XG4gIHJlMltfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSl7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZil7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cFxuICAgICAgLCBwaVJFID0gaXNSZWdFeHAocClcbiAgICAgICwgZmlVICA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpe1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7IClwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIF9fd2VicGFja19yZXF1aXJlX18oMTMpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDM3KSgnUmVnRXhwJyk7XG5cbi8qKiovIH0pLFxuLyogMjMwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbl9fd2VicGFja19yZXF1aXJlX18oNTApKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpe1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjMxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xuX193ZWJwYWNrX3JlcXVpcmVfXyg1MCkoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSl7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIzMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xuX193ZWJwYWNrX3JlcXVpcmVfXyg1MCkoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIzMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDUwKSgnc3BsaXQnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBTUExJVCwgJHNwbGl0KXtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpXG4gICAgLCBfc3BsaXQgICAgID0gJHNwbGl0XG4gICAgLCAkcHVzaCAgICAgID0gW10ucHVzaFxuICAgICwgJFNQTElUICAgICA9ICdzcGxpdCdcbiAgICAsIExFTkdUSCAgICAgPSAnbGVuZ3RoJ1xuICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZihcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKXtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKXJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKWlmKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKW1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KXNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pe1xuICAgICAgICBpZihsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKW91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZignMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pe1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyMzQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMTE0KTtcbnZhciBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCAkZmxhZ3MgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTEpXG4gICwgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpXG4gICwgVE9fU1RSSU5HICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uKGZuKXtcbiAgX193ZWJwYWNrX3JlcXVpcmVfXygxMykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZihfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKGZ1bmN0aW9uKCl7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7c291cmNlOiAnYScsIGZsYWdzOiAnYid9KSAhPSAnL2EvYic7IH0pKXtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cblxuLyoqKi8gfSksXG4vKiAyMzUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdhbmNob3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIzNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnYmlnJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjM3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxuX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoJ2JsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIzOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxuX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoJ2JvbGQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDIzOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJGF0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG5cbnZhciAkZXhwb3J0ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9MZW5ndGggID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KVxuICAsIGNvbnRleHQgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpXG4gICwgRU5EU19XSVRIID0gJ2VuZHNXaXRoJ1xuICAsICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXyg2NCkoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKXtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpXG4gICAgICAsIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpXG4gICAgICAsIGVuZCAgICA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbilcbiAgICAgICwgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI0MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdmaXhlZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnZm9udGNvbG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3Ipe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxuX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoJ2ZvbnRzaXplJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI0NCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9JbmRleCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KVxuICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAsICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyAgPSBbXVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGFMZW4gPiBpKXtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZih0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSl0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuXG52YXIgJGV4cG9ydCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgY29udGV4dCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KVxuICAsIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdpdGFsaWNzJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkYXQgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbl9fd2VicGFja19yZXF1aXJlX18oNzApKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI0OCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI0OSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgJGV4cG9ydCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG4gICwgdG9MZW5ndGggID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKXtcbiAgICB2YXIgdHBsICA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpXG4gICAgICAsIGxlbiAgPSB0b0xlbmd0aCh0cGwubGVuZ3RoKVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXMgID0gW11cbiAgICAgICwgaSAgICA9IDA7XG4gICAgd2hpbGUobGVuID4gaSl7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmKGkgPCBhTGVuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI1MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogX193ZWJwYWNrX3JlcXVpcmVfXyg3OSlcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI1MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDE0KSgnc21hbGwnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjUyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcblxudmFyICRleHBvcnQgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIHRvTGVuZ3RoICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KVxuICAsIGNvbnRleHQgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3OClcbiAgLCBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJ1xuICAsICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oNjQpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgdmFyIHRoYXQgICA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSClcbiAgICAgICwgaW5kZXggID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSlcbiAgICAgICwgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzdHJpa2UnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzdWInLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1Yigpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbl9fd2VicGFja19yZXF1aXJlX18oMTQpKCdzdXAnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg0NCkoJ3RyaW0nLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjU3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKVxuICAsIERFU0NSSVBUT1JTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KVxuICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIHJlZGVmaW5lICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMylcbiAgLCBNRVRBICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpLktFWVxuICAsICRmYWlscyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKVxuICAsIHNoYXJlZCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpXG4gICwgdWlkICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KVxuICAsIHdrcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KVxuICAsIHdrc0V4dCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTIpXG4gICwgd2tzRGVmaW5lICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKVxuICAsIGtleU9mICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzMpXG4gICwgZW51bUtleXMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMilcbiAgLCBpc0FycmF5ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpXG4gICwgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgdG9JT2JqZWN0ICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuICAsIHRvUHJpbWl0aXZlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMylcbiAgLCBjcmVhdGVEZXNjICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpXG4gICwgX2NyZWF0ZSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKVxuICAsIGdPUE5FeHQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpXG4gICwgJEdPUEQgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuICAsICREUCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KVxuICAsICRrZXlzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSlcbiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcbiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mXG4gICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcbiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcbiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OXG4gICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKVxuICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG4gICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG4gICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXVxuICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICBpdCAgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG4gICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCFVU0VfTkFUSVZFKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIF9fd2VicGFja19yZXF1aXJlX18oMzQpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgX193ZWJwYWNrX3JlcXVpcmVfXyg0NykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIF9fd2VicGFja19yZXF1aXJlX18oNTYpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmKERFU0NSSVBUT1JTICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKSl7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH1cbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG4gICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XVxuICAgICAgLCBpICAgID0gMVxuICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgX193ZWJwYWNrX3JlcXVpcmVfXygxMikoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cbi8qKiovIH0pLFxuLyogMjU4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGV4cG9ydCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICR0eXBlZCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpXG4gICwgYnVmZmVyICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MilcbiAgLCBhbk9iamVjdCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgdG9JbmRleCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOClcbiAgLCB0b0xlbmd0aCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG4gICwgaXNPYmplY3QgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxuICAsIEFycmF5QnVmZmVyICA9IF9fd2VicGFja19yZXF1aXJlX18oMikuQXJyYXlCdWZmZXJcbiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KVxuICAsICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlclxuICAsICREYXRhVmlldyAgICA9IGJ1ZmZlci5EYXRhVmlld1xuICAsICRpc1ZpZXcgICAgICA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3XG4gICwgJHNsaWNlICAgICAgID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZVxuICAsIFZJRVcgICAgICAgICA9ICR0eXBlZC5WSUVXXG4gICwgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCl7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIF9fd2VicGFja19yZXF1aXJlX18oMykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICBpZigkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZClyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiAgICA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGhcbiAgICAgICwgZmlyc3QgID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICAgLCBmaW5hbCAgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pXG4gICAgICAsIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKVxuICAgICAgLCB2aWV3UyAgPSBuZXcgJERhdGFWaWV3KHRoaXMpXG4gICAgICAsIHZpZXdUICA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIHdoaWxlKGZpcnN0IDwgZmluYWwpe1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMzcpKEFSUkFZX0JVRkZFUik7XG5cbi8qKiovIH0pLFxuLyogMjU5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIV9fd2VicGFja19yZXF1aXJlX18oNTgpLkFCViwge1xuICBEYXRhVmlldzogX193ZWJwYWNrX3JlcXVpcmVfXyg4MikuRGF0YVZpZXdcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI2MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI2MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI2MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnSW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjYzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjcpKCdJbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ0ludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNjUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygyNykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjY2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjcpKCdVaW50MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI2NyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDI3KSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMjY4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjcpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG5cbi8qKiovIH0pLFxuLyogMjY5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgd2VhayA9IF9fd2VicGFja19yZXF1aXJlX18oOTYpO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xuX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkoJ1dlYWtTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuXG4vKioqLyB9KSxcbi8qIDI3MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsICRpbmNsdWRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18oNDApKCdpbmNsdWRlcycpO1xuXG4vKioqLyB9KSxcbi8qIDI3MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgbWljcm90YXNrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MykoKVxuICAsIHByb2Nlc3MgICA9IF9fd2VicGFja19yZXF1aXJlX18oMikucHJvY2Vzc1xuICAsIGlzTm9kZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbil7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNzIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgY29mICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KXtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjczICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywge3RvSlNPTjogX193ZWJwYWNrX3JlcXVpcmVfXyg5NSkoJ01hcCcpfSk7XG5cbi8qKiovIH0pLFxuLyogMjc0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKXtcbiAgICB2YXIgJHgwID0geDAgPj4+IDBcbiAgICAgICwgJHgxID0geDEgPj4+IDBcbiAgICAgICwgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjc1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgJHUgPSArdVxuICAgICAgLCAkdiA9ICt2XG4gICAgICAsIHUwID0gJHUgJiBVSU5UMTZcbiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNlxuICAgICAgLCB1MSA9ICR1ID4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI3NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSl7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwXG4gICAgICAsICR4MSA9IHgxID4+PiAwXG4gICAgICAsICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjc3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgJHUgPSArdVxuICAgICAgLCAkdiA9ICt2XG4gICAgICAsIHUwID0gJHUgJiBVSU5UMTZcbiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNlxuICAgICAgLCB1MSA9ICR1ID4+PiAxNlxuICAgICAgLCB2MSA9ICR2ID4+PiAxNlxuICAgICAgLCB0ICA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyNzggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZXhwb3J0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9PYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAsIGFGdW5jdGlvbiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpXG4gICwgJGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9fd2VicGFja19yZXF1aXJlX18oNTUpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjc5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGV4cG9ydCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIHRvT2JqZWN0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOSlcbiAgLCBhRnVuY3Rpb24gICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbl9fd2VicGFja19yZXF1aXJlX18oNikgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpe1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7c2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI4MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkZW50cmllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2KSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpe1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI4MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIG93bktleXMgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDcpXG4gICwgdG9JT2JqZWN0ICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuICAsIGdPUEQgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3Qpe1xuICAgIHZhciBPICAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAgICwgZ2V0RGVzYyA9IGdPUEQuZlxuICAgICAgLCBrZXlzICAgID0gb3duS2V5cyhPKVxuICAgICAgLCByZXN1bHQgID0ge31cbiAgICAgICwgaSAgICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGtleXMubGVuZ3RoID4gaSljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSA9IGtleXNbaSsrXSwgZ2V0RGVzYyhPLCBrZXkpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyODIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9fd2VicGFja19yZXF1aXJlX18oNTUpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyODMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxuX193ZWJwYWNrX3JlcXVpcmVfXyg2KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9fd2VicGFja19yZXF1aXJlX18oNTUpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyODQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkdmFsdWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KXtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDI4NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVxuICAsIGdsb2JhbCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuICAsIGNvcmUgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNClcbiAgLCBtaWNyb3Rhc2sgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpKClcbiAgLCBPQlNFUlZBQkxFICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkoJ29ic2VydmFibGUnKVxuICAsIGFGdW5jdGlvbiAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSlcbiAgLCBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBhbkluc3RhbmNlICA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpXG4gICwgcmVkZWZpbmVBbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KVxuICAsIGhpZGUgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMilcbiAgLCBmb3JPZiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpXG4gICwgUkVUVVJOICAgICAgPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihmbil7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmKGNsZWFudXApe1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihvYnNlcnZlciwgc3Vic2NyaWJlcil7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCAgICAgID0gc3Vic2NyaWJlcihvYnNlcnZlcilcbiAgICAgICwgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZihjbGVhbnVwICE9IG51bGwpe1xuICAgICAgaWYodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpY2xlYW51cCA9IGZ1bmN0aW9uKCl7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSljbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmKG0pcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYoIW0pdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcil7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpe1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbil7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0IDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCl7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZihtZXRob2Qpe1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIWRvbmUpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZihmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24oaXQpe1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTilyZXR1cm47XG4gICAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIGlmKGRvbmUpdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpe1xuICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IEFycmF5KGwpOyBpIDwgbDspaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICBpZighZG9uZSl7XG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pO1xuICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7T2JzZXJ2YWJsZTogJE9ic2VydmFibGV9KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygzNykoJ09ic2VydmFibGUnKTtcblxuLyoqKi8gfSksXG4vKiAyODYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn19KTtcblxuLyoqKi8gfSksXG4vKiAyODcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXBcbiAgLCBzdG9yZSAgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7ZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHZhciB0YXJnZXRLZXkgICA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSlcbiAgICAsIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSlyZXR1cm4gZmFsc2U7XG4gIGlmKG1ldGFkYXRhTWFwLnNpemUpcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn19KTtcblxuLyoqKi8gfSksXG4vKiAyODggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpXG4gICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKVxuICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpXG4gICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKE8sIFApe1xuICB2YXIgb0tleXMgID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAsIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZihwYXJlbnQgPT09IG51bGwpcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTtcblxuLyoqKi8gfSksXG4vKiAyODkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpXG4gICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhc1xuICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXRcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZihoYXNPd24pcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pO1xuXG4vKioqLyB9KSxcbi8qIDI5MCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pO1xuXG4vKioqLyB9KSxcbi8qIDI5MSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pO1xuXG4vKioqLyB9KSxcbi8qIDI5MiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSlcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoe2hhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7XG5cbi8qKiovIH0pLFxuLyogMjkzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2hhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7XG5cbi8qKiovIH0pLFxuLyogMjk0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0O1xuXG5tZXRhZGF0YS5leHAoe21ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSl7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpe1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufX0pO1xuXG4vKioqLyB9KSxcbi8qIDI5NSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHt0b0pTT046IF9fd2VicGFja19yZXF1aXJlX18oOTUpKCdTZXQnKX0pO1xuXG4vKioqLyB9KSxcbi8qIDI5NiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJGF0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyOTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBkZWZpbmVkICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpXG4gICwgdG9MZW5ndGggICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG4gICwgaXNSZWdFeHAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKVxuICAsIGdldEZsYWdzICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSlcbiAgLCBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbihyZWdleHAsIHN0cmluZyl7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDY5KSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpe1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7dmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApe1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYoIWlzUmVnRXhwKHJlZ2V4cCkpdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTICAgICA9IFN0cmluZyh0aGlzKVxuICAgICAgLCBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgLCByeCAgICA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7XG5cbi8qKiovIH0pLFxuLyogMjk4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHBhZCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTExKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcblxuLyoqKi8gfSksXG4vKiAyOTkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCAkcGFkICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuXG4vKioqLyB9KSxcbi8qIDMwMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxuX193ZWJwYWNrX3JlcXVpcmVfXyg0NCkoJ3RyaW1MZWZ0JywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKXtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG5cbi8qKiovIH0pLFxuLyogMzAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KSgndHJpbVJpZ2h0JywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcblxuLyoqKi8gfSksXG4vKiAzMDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyg4MykoJ2FzeW5jSXRlcmF0b3InKTtcblxuLyoqKi8gfSksXG4vKiAzMDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyg4MykoJ29ic2VydmFibGUnKTtcblxuLyoqKi8gfSksXG4vKiAzMDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7Z2xvYmFsOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpfSk7XG5cbi8qKiovIH0pLFxuLyogMzA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkaXRlcmF0b3JzICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSlcbiAgLCByZWRlZmluZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMylcbiAgLCBnbG9iYWwgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKVxuICAsIGhpZGUgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVxuICAsIEl0ZXJhdG9ycyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKVxuICAsIHdrcyAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpXG4gICwgSVRFUkFUT1IgICAgICA9IHdrcygnaXRlcmF0b3InKVxuICAsIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJylcbiAgLCBBcnJheVZhbHVlcyAgID0gSXRlcmF0b3JzLkFycmF5O1xuXG5mb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXtcbiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXVxuICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXVxuICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGVcbiAgICAsIGtleTtcbiAgaWYocHJvdG8pe1xuICAgIGlmKCFwcm90b1tJVEVSQVRPUl0paGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZighcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgZm9yKGtleSBpbiAkaXRlcmF0b3JzKWlmKCFwcm90b1trZXldKXJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cblxuLyoqKi8gfSksXG4vKiAzMDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApXG4gICwgJHRhc2sgICA9IF9fd2VicGFja19yZXF1aXJlX18oODEpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcblxuLyoqKi8gfSksXG4vKiAzMDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpXG4gICwgJGV4cG9ydCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMClcbiAgLCBpbnZva2UgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MilcbiAgLCBwYXJ0aWFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzQpXG4gICwgbmF2aWdhdG9yICA9IGdsb2JhbC5uYXZpZ2F0b3JcbiAgLCBNU0lFICAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbihzZXQpe1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gc2V0KGludm9rZShcbiAgICAgIHBhcnRpYWwsXG4gICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksXG4gICAgICB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pXG4gICAgKSwgdGltZSk7XG4gIH0gOiBzZXQ7XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6ICB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG5cbi8qKiovIH0pLFxuLyogMzA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oMjU3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjAwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjAyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjA3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjAxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjA5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjA4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjA0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjA1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjAzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjA2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjEwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjExKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTYzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTY1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTY0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjEzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjEyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTgzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTkzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTk0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTg0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTg1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTg2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTg3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTg4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTg5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTkwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTkxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTkyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTY2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTY3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTY4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTY5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTcwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTcxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTcyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTczKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTc0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTc1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTc2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTc3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTc4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTc5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTgwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTgxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTgyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQ0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQ5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjU2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQ3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjM5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQ1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjUwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjUyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjM1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjM2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjM3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjM4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQ2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjQ4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjUxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjUzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMjU0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMjU1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTU4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTYwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTU5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTYyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTYxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQ3KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQ1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTUxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQ4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTU0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTU2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQ0KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTUwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQxKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTU1KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTM5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTUzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTUyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQ2KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQ5KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTM4KTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQwKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQzKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTQyKTtcbl9fd2VicGFja19yZXF1aXJlX18oMTU3KTtcbl9fd2VicGFja19yZXF1aXJlX18oODUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxMTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMzMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygxMTYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNTgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNTkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNjEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMTkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyMjcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODkpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODgpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTApO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTMpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyOTQpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyNzEpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygyODUpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDYpO1xuX193ZWJwYWNrX3JlcXVpcmVfXygzMDUpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxuLyoqKi8gfSksXG4vKiAzMDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxMTcpKSlcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHFpbml1NGpzLm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTE4KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBhZTUyNmM1MzFiNWE3NTA5Yjg0ZCIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KVxuICAgICwga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmKHRhcmdldClyZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KWV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19mYWlscy5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3drcy5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19kZXNjcmlwdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFNSQyAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKVxuICAsIFRPX1NUUklORyA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddXG4gICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIGtleSwgdmFsLCBzYWZlKXtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZihPW2tleV0gPT09IHZhbClyZXR1cm47XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmKE8gPT09IGdsb2JhbCl7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGlmKCFzYWZlKXtcbiAgICAgIGRlbGV0ZSBPW2tleV07XG4gICAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoT1trZXldKU9ba2V5XSA9IHZhbDtcbiAgICAgIGVsc2UgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfVxuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHF1b3QgICAgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbihzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyAgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKVxuICAgICwgcDEgPSAnPCcgKyB0YWc7XG4gIGlmKGF0dHJpYnV0ZSAhPT0gJycpcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCBleGVjKXtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcElFICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19jb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgYXJnKXtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24oKXt9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXNjICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWFxuICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcylcbiAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19jdHguanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBNYXAgICAgID0gcmVxdWlyZSgnLi9lczYubWFwJylcbiAgLCAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaGFyZWQgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJylcbiAgLCBzdG9yZSAgID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKXtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmKCF0YXJnZXRNZXRhZGF0YSl7XG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmKCFrZXlNZXRhZGF0YSl7XG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCl7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKVxuICAgICwga2V5cyAgICAgICAgPSBbXTtcbiAgaWYobWV0YWRhdGFNYXApbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbihfLCBrZXkpeyBrZXlzLnB1c2goa2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24oTyl7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKXtcbiAgdmFyIExJQlJBUlkgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgICAsIGdsb2JhbCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAgICwgZmFpbHMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgICAsICRleHBvcnQgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAgICwgJHR5cGVkICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgICAsICRidWZmZXIgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKVxuICAgICwgY3R4ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICAgLCBhbkluc3RhbmNlICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAgICwgcHJvcGVydHlEZXNjICAgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAgICwgaGlkZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAgICwgcmVkZWZpbmVBbGwgICAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICAgLCB0b0ludGVnZXIgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICAgLCB0b0xlbmd0aCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgICAsIHRvSW5kZXggICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICAgLCB0b1ByaW1pdGl2ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgICAsIGhhcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAgICwgc2FtZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKVxuICAgICwgY2xhc3NvZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAgICwgaXNPYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICAgLCB0b09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgICAsIGlzQXJyYXlJdGVyICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgICAsIGNyZWF0ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgICAsIGdPUE4gICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgICAsIGdldEl0ZXJGbiAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICAgLCB1aWQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgICAsIHdrcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAgICwgY3JlYXRlQXJyYXlNZXRob2QgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAgICwgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJylcbiAgICAsIHNwZWNpZXNDb25zdHJ1Y3RvciAgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgICAsIEFycmF5SXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpXG4gICAgLCBJdGVyYXRvcnMgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgICAsICRpdGVyRGV0ZWN0ICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpXG4gICAgLCBzZXRTcGVjaWVzICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKVxuICAgICwgYXJyYXlGaWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKVxuICAgICwgYXJyYXlDb3B5V2l0aGluICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJylcbiAgICAsICREUCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAgICwgJEdPUEQgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgICAsIGRQICAgICAgICAgICAgICAgICAgPSAkRFAuZlxuICAgICwgZ09QRCAgICAgICAgICAgICAgICA9ICRHT1BELmZcbiAgICAsIFJhbmdlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAgICwgVHlwZUVycm9yICAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgICAsIFVpbnQ4QXJyYXkgICAgICAgICAgPSBnbG9iYWwuVWludDhBcnJheVxuICAgICwgQVJSQVlfQlVGRkVSICAgICAgICA9ICdBcnJheUJ1ZmZlcidcbiAgICAsIFNIQVJFRF9CVUZGRVIgICAgICAgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUlxuICAgICwgQllURVNfUEVSX0VMRU1FTlQgICA9ICdCWVRFU19QRVJfRUxFTUVOVCdcbiAgICAsIFBST1RPVFlQRSAgICAgICAgICAgPSAncHJvdG90eXBlJ1xuICAgICwgQXJyYXlQcm90byAgICAgICAgICA9IEFycmF5W1BST1RPVFlQRV1cbiAgICAsICRBcnJheUJ1ZmZlciAgICAgICAgPSAkYnVmZmVyLkFycmF5QnVmZmVyXG4gICAgLCAkRGF0YVZpZXcgICAgICAgICAgID0gJGJ1ZmZlci5EYXRhVmlld1xuICAgICwgYXJyYXlGb3JFYWNoICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDApXG4gICAgLCBhcnJheUZpbHRlciAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMilcbiAgICAsIGFycmF5U29tZSAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgzKVxuICAgICwgYXJyYXlFdmVyeSAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpXG4gICAgLCBhcnJheUZpbmQgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSlcbiAgICAsIGFycmF5RmluZEluZGV4ICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAgICwgYXJyYXlJbmNsdWRlcyAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSlcbiAgICAsIGFycmF5SW5kZXhPZiAgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKVxuICAgICwgYXJyYXlWYWx1ZXMgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLnZhbHVlc1xuICAgICwgYXJyYXlLZXlzICAgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmtleXNcbiAgICAsIGFycmF5RW50cmllcyAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzXG4gICAgLCBhcnJheUxhc3RJbmRleE9mICAgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZlxuICAgICwgYXJyYXlSZWR1Y2UgICAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlXG4gICAgLCBhcnJheVJlZHVjZVJpZ2h0ICAgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodFxuICAgICwgYXJyYXlKb2luICAgICAgICAgICA9IEFycmF5UHJvdG8uam9pblxuICAgICwgYXJyYXlTb3J0ICAgICAgICAgICA9IEFycmF5UHJvdG8uc29ydFxuICAgICwgYXJyYXlTbGljZSAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2VcbiAgICAsIGFycmF5VG9TdHJpbmcgICAgICAgPSBBcnJheVByb3RvLnRvU3RyaW5nXG4gICAgLCBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZ1xuICAgICwgSVRFUkFUT1IgICAgICAgICAgICA9IHdrcygnaXRlcmF0b3InKVxuICAgICwgVEFHICAgICAgICAgICAgICAgICA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAgICwgVFlQRURfQ09OU1RSVUNUT1IgICA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKVxuICAgICwgREVGX0NPTlNUUlVDVE9SICAgICA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJylcbiAgICAsIEFMTF9DT05TVFJVQ1RPUlMgICAgPSAkdHlwZWQuQ09OU1RSXG4gICAgLCBUWVBFRF9BUlJBWSAgICAgICAgID0gJHR5cGVkLlRZUEVEXG4gICAgLCBWSUVXICAgICAgICAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgICAsIFdST05HX0xFTkdUSCAgICAgICAgPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbihPLCBsZW5ndGgpe1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgc3RyaWN0VG9MZW5ndGggPSBmdW5jdGlvbihpdCwgU0FNRSl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB2YXIgbnVtYmVyID0gK2l0XG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0KTtcbiAgICBpZihTQU1FICYmICFzYW1lKG51bWJlciwgbGVuZ3RoKSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbihpdCwgQllURVMpe1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24oaXQpe1xuICAgIGlmKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdClyZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbihDLCBsZW5ndGgpe1xuICAgIGlmKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbihPLCBsaXN0KXtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uKEMsIGxpc3Qpe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oaXQsIGtleSwgaW50ZXJuYWwpe1xuICAgIGRQKGl0LCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfX0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qLCBtYXBmbiwgdGhpc0FyZyAqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChzb3VyY2UpXG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspe1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYobWFwcGluZyAmJiBhTGVuID4gMiltYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKXtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qLi4uaXRlbXMqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpe1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiwgZW5kICovKXtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0LCBlbmQgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpe1xuICAgICAgdmFyIHRoYXQgICA9IHRoaXNcbiAgICAgICAgLCBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGhcbiAgICAgICAgLCBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpXG4gICAgICAgICwgaW5kZXggID0gMFxuICAgICAgICAsIHZhbHVlO1xuICAgICAgd2hpbGUoaW5kZXggPCBtaWRkbGUpe1xuICAgICAgICB2YWx1ZSAgICAgICAgID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdICA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCl7XG4gICAgICB2YXIgTyAgICAgID0gdmFsaWRhdGUodGhpcylcbiAgICAgICAgLCBsZW5ndGggPSBPLmxlbmd0aFxuICAgICAgICAsICRiZWdpbiA9IHRvSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyosIG9mZnNldCAqLyl7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSlcbiAgICAgICwgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICAgICwgc3JjICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aChzcmMubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIGlmKGxlbiArIG9mZnNldCA+IGxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUoaW5kZXggPCBsZW4pdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpe1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKXtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpe1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24odGFyZ2V0LCBrZXkpe1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKXtcbiAgICBpZihpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKXtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSBlbHNlIHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYoIUFMTF9DT05TVFJVQ1RPUlMpe1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiAgID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICAgICAgICAgICAkc2V0RGVzY1xuICB9KTtcblxuICBpZihmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSl7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICAgICAgICAgICRzbGljZSxcbiAgICBzZXQ6ICAgICAgICAgICAgJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogICAgZnVuY3Rpb24oKXsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiAgICAgICBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKXtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FICAgICAgID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknXG4gICAgICAsIElTTlRfVUlOVDggPSBOQU1FICE9ICdVaW50OEFycmF5J1xuICAgICAgLCBHRVRURVIgICAgID0gJ2dldCcgKyBLRVlcbiAgICAgICwgU0VUVEVSICAgICA9ICdzZXQnICsgS0VZXG4gICAgICAsIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV1cbiAgICAgICwgQmFzZSAgICAgICA9IFR5cGVkQXJyYXkgfHwge31cbiAgICAgICwgVEFDICAgICAgICA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSlcbiAgICAgICwgRk9SQ0VEICAgICA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWXG4gICAgICAsIE8gICAgICAgICAgPSB7fVxuICAgICAgLCBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCwgdmFsdWUpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYoQ0xBTVBFRCl2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKXtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpe1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggID0gMFxuICAgICAgICAgICwgb2Zmc2V0ID0gMFxuICAgICAgICAgICwgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpe1xuICAgICAgICAgIGxlbmd0aCAgICAgPSBzdHJpY3RUb0xlbmd0aChkYXRhLCB0cnVlKVxuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgICAgID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmKCRsZW5ndGggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBpZigkbGVuICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoIDwgMCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlKGluZGV4IDwgbGVuZ3RoKWFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmKCEkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXtcbiAgICAgIC8vIFY4IHdvcmtzIHdpdGggaXRlcmF0b3JzLCBidXQgZmFpbHMgaW4gbWFueSBvdGhlciBjYXNlc1xuICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQ1NTJcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXJldHVybiBuZXcgQmFzZShzdHJpY3RUb0xlbmd0aChkYXRhLCBJU05UX1VJTlQ4KSk7XG4gICAgICAgIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSlyZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIShrZXkgaW4gVHlwZWRBcnJheSkpaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZighTElCUkFSWSlUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciAgID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICAgICwgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvciAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKVxuICAgICAgLCAkaXRlcmF0b3IgICAgICAgICA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKXtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFUyxcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwge3NldDogJHNldH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSwgTkFNRSwge3RvU3RyaW5nOiBhcnJheVRvU3RyaW5nfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7c2xpY2U6ICRzbGljZX0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKClcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwge3RvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmd9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpe1xuICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanNcbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKVxuICAsIEFycmF5UHJvdG8gID0gQXJyYXkucHJvdG90eXBlO1xuaWYoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKXJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanNcbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgJGl0ZXJEZXRlY3QgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspe1xuICB2YXIgQmFzZSAgPSBnbG9iYWxbTkFNRV1cbiAgICAsIEMgICAgID0gQmFzZVxuICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnXG4gICAgLCBwcm90byA9IEMgJiYgQy5wcm90b3R5cGVcbiAgICAsIE8gICAgID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpe1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpe1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQ1xuICAgICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgICAgLCBIQVNOVF9DSEFJTklORyAgICAgICA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2VcbiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgICAgLCBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uKCl7IGluc3RhbmNlLmhhcygxKTsgfSlcbiAgICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICAgICwgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKVxuICAgICAgICAgICwgaW5kZXggICAgID0gNTtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgICB9KTtcbiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IFxuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSl7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pe1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYoSVNfV0VBSyAmJiBwcm90by5jbGVhcilkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYoIUlTX1dFQUspY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBmYWlscyAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHdrcyAgICAgID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBsZW5ndGgsIGV4ZWMpe1xuICB2YXIgU1lNQk9MICAgPSB3a3MoS0VZKVxuICAgICwgZm5zICAgICAgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSlcbiAgICAsIHN0cmZuICAgID0gZm5zWzBdXG4gICAgLCByeGZuICAgICA9IGZuc1sxXTtcbiAgaWYoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKXtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uKHN0cmluZywgYXJnKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbihzdHJpbmcpeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanNcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgICA9IGFuT2JqZWN0KHRoaXMpXG4gICAgLCByZXN1bHQgPSAnJztcbiAgaWYodGhhdC5nbG9iYWwpICAgICByZXN1bHQgKz0gJ2cnO1xuICBpZih0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmKHRoYXQubXVsdGlsaW5lKSAgcmVzdWx0ICs9ICdtJztcbiAgaWYodGhhdC51bmljb2RlKSAgICByZXN1bHQgKz0gJ3UnO1xuICBpZih0aGF0LnN0aWNreSkgICAgIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpe1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgY29mICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIE1BVENIICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qc1xuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyl8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbigpeyAvKiBlbXB0eSAqL30pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qc1xuLy8gbW9kdWxlIGlkID0gNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgVFlQRUQgID0gdWlkKCd0eXBlZF9hcnJheScpXG4gICwgVklFVyAgID0gdWlkKCd2aWV3JylcbiAgLCBBQlYgICAgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KVxuICAsIENPTlNUUiA9IEFCVlxuICAsIGkgPSAwLCBsID0gOSwgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlKGkgPCBsKXtcbiAgaWYoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSl7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogICAgQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6ICBUWVBFRCxcbiAgVklFVzogICBWSUVXXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJjbGFzcyBMb2cge1xuICAgIHB1YmxpYyBzdGF0aWMgX2VuYWJsZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBzdGF0aWMgZ2V0IGVuYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGVuYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9lbmFibGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGQob2JqZWN0OiBhbnkpIHtcbiAgICAgICAgaWYgKCFMb2cuX2VuYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZGVidWcob2JqZWN0KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBsKG9iamVjdDogYW55KSB7XG4gICAgICAgIGlmICghTG9nLl9lbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZShvYmplY3Q6IGFueSkge1xuICAgICAgICBpZiAoIUxvZy5fZW5hYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihvYmplY3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdyhvYmplY3Q6IGFueSkge1xuICAgICAgICBpZiAoIUxvZy5fZW5hYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS53YXJuKG9iamVjdCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpKG9iamVjdDogYW55KSB7XG4gICAgICAgIGlmICghTG9nLl9lbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmluZm8ob2JqZWN0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbC9Mb2cudHMiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9JbmRleCAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IHRvSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aClcbiAgICAsIGVuZCAgICA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkXG4gICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZShlbmRQb3MgPiBpbmRleClPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpe1xuICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaChlKXtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2goZil7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19odG1sLmpzXG4vLyBtb2R1bGUgaWQgPSA2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCB0YXJnZXQsIEMpe1xuICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgaWYoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZil7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcbiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG4gICAgLCBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRhbnlOYXRpdmUpe1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKSk7XG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuICBpZihERUZBVUxUKXtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzXG4vLyBtb2R1bGUgaWQgPSA3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZShoZWFkKXtcbiAgICAgIGZuICAgPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICBpZihoZWFkKW5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmKGlzTm9kZSl7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYoT2JzZXJ2ZXIpe1xuICAgIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmKCFoZWFkKXtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7XG4gIGFuT2JqZWN0KE8pO1xuICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qc1xuLy8gbW9kdWxlIGlkID0gNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKXtcbiAgaWYoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSl0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanNcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KXtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKVxuICAgICwgcmVzID0gJydcbiAgICAsIG4gICA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSlpZihuICYgMSlyZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzXG4vLyBtb2R1bGUgaWQgPSA3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBpbnZva2UgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGh0bWwgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpe1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAgIHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fdGFzay5qc1xuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICR0eXBlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGZhaWxzICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGFuSW5zdGFuY2UgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIHRvSW50ZWdlciAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgdG9MZW5ndGggICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGdPUE4gICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgYXJyYXlGaWxsICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBBUlJBWV9CVUZGRVIgICA9ICdBcnJheUJ1ZmZlcidcbiAgLCBEQVRBX1ZJRVcgICAgICA9ICdEYXRhVmlldydcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgV1JPTkdfTEVOR1RIICAgPSAnV3JvbmcgbGVuZ3RoISdcbiAgLCBXUk9OR19JTkRFWCAgICA9ICdXcm9uZyBpbmRleCEnXG4gICwgJEFycmF5QnVmZmVyICAgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXVxuICAsICREYXRhVmlldyAgICAgID0gZ2xvYmFsW0RBVEFfVklFV11cbiAgLCBNYXRoICAgICAgICAgICA9IGdsb2JhbC5NYXRoXG4gICwgUmFuZ2VFcnJvciAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAsIEluZmluaXR5ICAgICAgID0gZ2xvYmFsLkluZmluaXR5XG4gICwgQmFzZUJ1ZmZlciAgICAgPSAkQXJyYXlCdWZmZXJcbiAgLCBhYnMgICAgICAgICAgICA9IE1hdGguYWJzXG4gICwgcG93ICAgICAgICAgICAgPSBNYXRoLnBvd1xuICAsIGZsb29yICAgICAgICAgID0gTWF0aC5mbG9vclxuICAsIGxvZyAgICAgICAgICAgID0gTWF0aC5sb2dcbiAgLCBMTjIgICAgICAgICAgICA9IE1hdGguTE4yXG4gICwgQlVGRkVSICAgICAgICAgPSAnYnVmZmVyJ1xuICAsIEJZVEVfTEVOR1RIICAgID0gJ2J5dGVMZW5ndGgnXG4gICwgQllURV9PRkZTRVQgICAgPSAnYnl0ZU9mZnNldCdcbiAgLCAkQlVGRkVSICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUlxuICAsICRMRU5HVEggICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEhcbiAgLCAkT0ZGU0VUICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24odmFsdWUsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBidWZmZXIgPSBBcnJheShuQnl0ZXMpXG4gICAgLCBlTGVuICAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgICAsIGVNYXggICA9ICgxIDw8IGVMZW4pIC0gMVxuICAgICwgZUJpYXMgID0gZU1heCA+PiAxXG4gICAgLCBydCAgICAgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBzICAgICAgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwXG4gICAgLCBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSlcbiAgaWYodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KXtcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSl7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmKGUgKyBlQmlhcyA+PSAxKXtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYodmFsdWUgKiBjID49IDIpe1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gZU1heCl7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG52YXIgdW5wYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKXtcbiAgdmFyIGVMZW4gID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICA9ICgxIDw8IGVMZW4pIC0gMVxuICAgICwgZUJpYXMgPSBlTWF4ID4+IDFcbiAgICAsIG5CaXRzID0gZUxlbiAtIDdcbiAgICAsIGkgICAgID0gbkJ5dGVzIC0gMVxuICAgICwgcyAgICAgPSBidWZmZXJbaS0tXVxuICAgICwgZSAgICAgPSBzICYgMTI3XG4gICAgLCBtO1xuICBzID4+PSA3O1xuICBmb3IoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvcig7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmKGUgPT09IDApe1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZihlID09PSBlTWF4KXtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn07XG5cbnZhciB1bnBhY2tJMzIgPSBmdW5jdGlvbihieXRlcyl7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufTtcbnZhciBwYWNrSTggPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn07XG52YXIgcGFja0kxNiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn07XG52YXIgcGFja0kzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59O1xudmFyIHBhY2tGNjQgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufTtcbnZhciBwYWNrRjMyID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihDLCBrZXksIGludGVybmFsKXtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfX0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pe1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXhcbiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTtcbiAgaWYobnVtSW5kZXggIT0gaW50SW5kZXggfHwgaW50SW5kZXggPCAwIHx8IGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iXG4gICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXVxuICAgICwgcGFjayAgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn07XG52YXIgc2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pe1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXhcbiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTtcbiAgaWYobnVtSW5kZXggIT0gaW50SW5kZXggfHwgaW50SW5kZXggPCAwIHx8IGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iXG4gICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXVxuICAgICwgcGFjayAgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKXN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufTtcblxudmFyIHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHMgPSBmdW5jdGlvbih0aGF0LCBsZW5ndGgpe1xuICBhbkluc3RhbmNlKHRoYXQsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgdmFyIG51bWJlckxlbmd0aCA9ICtsZW5ndGhcbiAgICAsIGJ5dGVMZW5ndGggICA9IHRvTGVuZ3RoKG51bWJlckxlbmd0aCk7XG4gIGlmKG51bWJlckxlbmd0aCAhPSBieXRlTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgcmV0dXJuIGJ5dGVMZW5ndGg7XG59O1xuXG5pZighJHR5cGVkLkFCVil7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCk7XG4gICAgdGhpcy5fYiAgICAgICA9IGFycmF5RmlsbC5jYWxsKEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXVxuICAgICAgLCBvZmZzZXQgICAgICAgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZihvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYoREVTQ1JJUFRPUlMpe1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCl7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZighZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgJEFycmF5QnVmZmVyOyAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlciguNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pKXtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgKXtcbiAgICAgIGlmKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSloaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH07XG4gICAgaWYoIUxJQlJBUlkpQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpXG4gICAgLCAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZih2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSlyZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanNcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSA4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgQmFzZVRhc2sgZnJvbSBcIi4vdGFzay9CYXNlVGFza1wiO1xuaW1wb3J0IERpcmVjdFRhc2sgZnJvbSBcIi4vdGFzay9EaXJlY3RUYXNrXCI7XG5pbXBvcnQge0NodW5rVGFza30gZnJvbSBcIi4vdGFzay9DaHVua1Rhc2tcIjtcbmltcG9ydCBUb2tlbkZ1bmMgZnJvbSBcIi4vVG9rZW5GdW5jXCI7XG5pbXBvcnQgVVVJRCBmcm9tIFwiLi91dWlkL1VVSURcIjtcbmltcG9ydCBVcGxvYWRlckJ1aWxkZXIgZnJvbSBcIi4vVXBsb2FkZXJCdWlsZGVyXCI7XG5pbXBvcnQgbG9nIGZyb20gXCIuLi91dGlsL0xvZ1wiO1xuaW1wb3J0IEludGVyY2VwdG9yIGZyb20gXCIuL2ludGVyY2VwdG9yL1VwbG9hZEludGVyY2VwdG9yXCI7XG5pbXBvcnQgVXBsb2FkTGlzdGVuZXIgZnJvbSBcIi4vaG9vay9VcGxvYWRMaXN0ZW5lclwiO1xuaW1wb3J0IFNpbXBsZVVwbG9hZExpc3RlbmVyIGZyb20gXCIuL2hvb2svU2ltcGxlVXBsb2FkTGlzdGVuZXJcIjtcbmltcG9ydCBEaXJlY3RVcGxvYWRQYXR0ZXJuIGZyb20gXCIuL3BhdHRyZW4vRGlyZWN0VXBsb2FkUGF0dGVyblwiO1xuaW1wb3J0IENodW5rVXBsb2FkUGF0dGVybiBmcm9tIFwiLi9wYXR0cmVuL0NodW5rVXBsb2FkUGF0dGVyblwiO1xuaW1wb3J0IFwiLi4vdXRpbC9Qb2x5ZmlsbFwiO1xuaW1wb3J0IFwiYmFiZWwtcG9seWZpbGxcIjtcblxuY2xhc3MgVXBsb2FkZXIge1xuICAgIHByaXZhdGUgRklMRV9JTlBVVF9FTF9JRDogc3RyaW5nID0gJ3Fpbml1NGpzLWlucHV0JztcbiAgICBwcml2YXRlIF9maWxlSW5wdXRJZDogc3RyaW5nO1xuICAgIHByaXZhdGUgX2ZpbGVJbnB1dDogSFRNTElucHV0RWxlbWVudDsvL2lucHV0IOWFg+e0oFxuICAgIHByaXZhdGUgX3Rva2VuOiBzdHJpbmc7Ly90b2tlblxuICAgIHByaXZhdGUgX3Rhc2tRdWV1ZTogQmFzZVRhc2tbXSA9IFtdOy8v5Lu75Yqh6Zif5YiXXG4gICAgcHJpdmF0ZSBfdGFza2luZzogYm9vbGVhbiA9IGZhbHNlOy8v5Lu75Yqh5omn6KGM5LitXG5cbiAgICBwcml2YXRlIF9yZXRyeTogbnVtYmVyOy8v5pyA5aSn6YeN6K+V5qyh5pWwXG4gICAgcHJpdmF0ZSBfc2l6ZTogbnVtYmVyOy8v5YiG54mH5aSn5bCPLOWNleS9jeWtl+iKgizmnIDlpKc0bWIs5LiN6IO95Li6MFxuICAgIHByaXZhdGUgX2NodW5rOiBib29sZWFuOy8v5YiG5Z2X5LiK5LygLOivpemAiemhueW8gOWQr+WQju+8jOWPquacieWcqOaWh+S7tuWkp+S6jjRtYueahOaXtuWAmeaJjeS8muWIhuWdl+S4iuS8oFxuICAgIHByaXZhdGUgX2F1dG86IGJvb2xlYW47Ly/oh6rliqjkuIrkvKAs5q+P5qyh6YCJ5oup5paH5Lu25ZCOXG4gICAgcHJpdmF0ZSBfbXVsdGlwbGU6IGJvb2xlYW47Ly/mmK/lkKbmlK/mjIHlpJrmlofku7ZcbiAgICBwcml2YXRlIF9hY2NlcHQ6IHN0cmluZ1tdOy8v5o6l5Y+X55qE5paH5Lu257G75Z6LXG4gICAgcHJpdmF0ZSBfYnV0dG9uOiBzdHJpbmc7Ly/kuIrkvKDmjInpkq5cbiAgICBwcml2YXRlIF9idXR0b25FdmVudE5hbWU6IHN0cmluZzsvL+S4iuS8oOaMiemSrueahOebkeWQrOS6i+S7tuWQjeensFxuICAgIHByaXZhdGUgX2NvbXByZXNzOiBudW1iZXI7Ly/lm77niYfljovnvKnotKjph49cbiAgICBwcml2YXRlIF9zY2FsZTogbnVtYmVyW10gPSBbXTsvL+e8qeaUvuWkp+WwjyzpmZDlrprpq5jluqbnrYnmr5TnvKnmlL5baDoyMDAsdzowXSzpmZDlrprlrr3luqbnrYnmr5TnvKnmlL5baDowLHc6MTAwXSzpmZDlrprplb/lrr1baDoyMDAsdzoxMDBdXG4gICAgcHJpdmF0ZSBfbGlzdGVuZXI6IFVwbG9hZExpc3RlbmVyOy8v55uR5ZCs5ZmoXG4gICAgcHJpdmF0ZSBfc2F2ZUtleTogYm9vbGVhbiB8IHN0cmluZyA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3Rva2VuRnVuYzogVG9rZW5GdW5jOy8vdG9rZW7ojrflj5blh73mlbBcbiAgICBwcml2YXRlIF90b2tlblNoYXJlOiBib29sZWFuOy8v5YiG5LqrdG9rZW4s5aaC5p6c5Li6ZmFsc2Us5q+P5LiA5qyhSFRUUOivt+axgumDvemcgOimgeaWsOiOt+WPllRva2VuXG4gICAgcHJpdmF0ZSBfaW50ZXJjZXB0b3JzOiBJbnRlcmNlcHRvcltdOy8v5Lu75Yqh5oum5oiq5ZmoXG4gICAgcHJpdmF0ZSBfZG9tYWluOiBzdHJpbmc7Ly/kuIrkvKDln5/lkI1cblxuICAgIGNvbnN0cnVjdG9yKGJ1aWxkZXI6IFVwbG9hZGVyQnVpbGRlcikge1xuICAgICAgICB0aGlzLl9yZXRyeSA9IGJ1aWxkZXIuZ2V0UmV0cnk7XG4gICAgICAgIHRoaXMuX3NpemUgPSBidWlsZGVyLmdldFNpemU7XG4gICAgICAgIHRoaXMuX2NodW5rID0gYnVpbGRlci5nZXRDaHVuaztcbiAgICAgICAgdGhpcy5fYXV0byA9IGJ1aWxkZXIuZ2V0QXV0bztcbiAgICAgICAgdGhpcy5fbXVsdGlwbGUgPSBidWlsZGVyLmdldE11bHRpcGxlO1xuICAgICAgICB0aGlzLl9hY2NlcHQgPSBidWlsZGVyLmdldEFjY2VwdDtcbiAgICAgICAgdGhpcy5fYnV0dG9uID0gYnVpbGRlci5nZXRCdXR0b247XG4gICAgICAgIHRoaXMuX2J1dHRvbkV2ZW50TmFtZSA9IGJ1aWxkZXIuZ2V0QnV0dG9uRXZlbnROYW1lO1xuICAgICAgICB0aGlzLl9jb21wcmVzcyA9IGJ1aWxkZXIuZ2V0Q29tcHJlc3M7XG4gICAgICAgIHRoaXMuX3NjYWxlID0gYnVpbGRlci5nZXRTY2FsZTtcbiAgICAgICAgdGhpcy5fc2F2ZUtleSA9IGJ1aWxkZXIuZ2V0U2F2ZUtleTtcbiAgICAgICAgdGhpcy5fdG9rZW5GdW5jID0gYnVpbGRlci5nZXRUb2tlbkZ1bmM7XG4gICAgICAgIHRoaXMuX3Rva2VuU2hhcmUgPSBidWlsZGVyLmdldFRva2VuU2hhcmU7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0gT2JqZWN0LmFzc2lnbihuZXcgU2ltcGxlVXBsb2FkTGlzdGVuZXIoKSwgYnVpbGRlci5nZXRMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX2ludGVyY2VwdG9ycyA9IGJ1aWxkZXIuZ2V0SW50ZXJjZXB0b3JzO1xuICAgICAgICB0aGlzLl9kb21haW4gPSBidWlsZGVyLmdldERvbWFpbjtcbiAgICAgICAgdGhpcy5fZmlsZUlucHV0SWQgPSBgJHt0aGlzLkZJTEVfSU5QVVRfRUxfSUR9XyR7bmV3IERhdGUoKS5nZXRUaW1lKCl9YDtcbiAgICAgICAgbG9nLmVuYWJsZSA9IGJ1aWxkZXIuZ2V0SXNEZWJ1ZztcblxuICAgICAgICB0aGlzLnZhbGlkYXRlT3B0aW9ucygpO1xuXG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWIneWni+WMluaTjeS9nFxuICAgICAqL1xuICAgIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbml0RmlsZUlucHV0RWwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliJ3lp4vljJZmaWxlIGlucHV0IGVsZW1lbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRGaWxlSW5wdXRFbCgpOiB2b2lkIHtcblxuICAgICAgICAvL+afpeivouW3sue7j+WtmOWcqOeahGZpbGUgaW5wdXRcbiAgICAgICAgbGV0IGV4aXN0OiBIVE1MSW5wdXRFbGVtZW50ID0gPEhUTUxJbnB1dEVsZW1lbnQ+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuX2ZpbGVJbnB1dElkKTtcblxuICAgICAgICAvL+WIm+W7umlucHV05YWD57SgXG4gICAgICAgIHRoaXMuX2ZpbGVJbnB1dCA9IGV4aXN0ID8gZXhpc3QgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB0aGlzLmZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnOy8vdHlwZSBmaWxlXG4gICAgICAgIHRoaXMuZmlsZUlucHV0LmlkID0gdGhpcy5fZmlsZUlucHV0SWQ7Ly9pZCDmlrnkvr/lkI7pnaLmn6Xmib5cbiAgICAgICAgdGhpcy5maWxlSW5wdXQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsvL+makOiXj2ZpbGUgaW5wdXRcblxuICAgICAgICAvL+WkmuaWh+S7tlxuICAgICAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xuICAgICAgICAgICAgLy/lpJrmlofku7ZcbiAgICAgICAgICAgIHRoaXMuZmlsZUlucHV0Lm11bHRpcGxlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8v5paH5Lu257G75Z6LXG4gICAgICAgIGlmICh0aGlzLmFjY2VwdCAmJiB0aGlzLmFjY2VwdC5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgbGV0IGFjY2VwdFZhbHVlOiBzdHJpbmcgPSAnJztcbiAgICAgICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHRoaXMuYWNjZXB0KSB7XG4gICAgICAgICAgICAgICAgYWNjZXB0VmFsdWUgKz0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYWNjZXB0VmFsdWUgKz0gJywnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWNjZXB0VmFsdWUuZW5kc1dpdGgoJywnKSkge1xuICAgICAgICAgICAgICAgIGFjY2VwdFZhbHVlID0gYWNjZXB0VmFsdWUuc3Vic3RyaW5nKDAsIGFjY2VwdFZhbHVlLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maWxlSW5wdXQuYWNjZXB0ID0gYWNjZXB0VmFsdWU7XG4gICAgICAgICAgICBsb2cuZChgYWNjZXB057G75Z6LICR7YWNjZXB0VmFsdWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL+WwhmlucHV05YWD57Sg5re75Yqg5YiwYm9keeWtkOiKgueCueeahOacq+WwvlxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZmlsZUlucHV0KTtcblxuICAgICAgICAvL+mAieaLqeaWh+S7tuebkeWQrOWZqFxuICAgICAgICB0aGlzLmZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUZpbGVzLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2J1dHRvbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBidXR0b246IGFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuX2J1dHRvbik7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9idXR0b25FdmVudE5hbWUsIHRoaXMuY2hvb3NlRmlsZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog5LiK5Lyg5a6M5oiQ5oiW6ICF5aSx6LSl5ZCOLOWvueacrOasoeS4iuS8oOS7u+WKoei/m+ihjOa4heaJq1xuICAgICAqL1xuICAgIHByaXZhdGUgcmVzZXRVcGxvYWRlcigpOiB2b2lkIHtcbiAgICAgICAgbG9nLmQoXCLlvIDlp4vph43nva4gdXBsb2FkZXJcIik7XG4gICAgICAgIHRoaXMudGFza1F1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICAgIGxvZy5kKFwi5Lu75Yqh6Zif5YiX5bey5riF56m6XCIpO1xuICAgICAgICB0aGlzLl90b2tlbiA9IG51bGw7XG4gICAgICAgIGxvZy5kKFwidG9rZW7lt7LmuIXnqbpcIik7XG4gICAgICAgIGxvZy5kKFwidXBsb2FkZXIg6YeN572u5a6M5q+VXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWkhOeQhuaWh+S7tlxuICAgICAqL1xuICAgIHByaXZhdGUgaGFuZGxlRmlsZXMgPSAoKSA9PiB7XG4gICAgICAgIC8v5aaC5p6c5rKh5pyJ6YCJ5Lit5paH5Lu25bCx6L+U5ZueXG4gICAgICAgIGlmICh0aGlzLmZpbGVJbnB1dC5maWxlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy/nlJ/miJB0YXNrXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVUYXNrKCk7XG5cbiAgICAgICAgLy/mmK/lkKbkuK3mlq3ku7vliqFcbiAgICAgICAgbGV0IGlzSW50ZXJydXB0OiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgIGxldCBpbnRlcmNlcHRlZFRhc2tzOiBCYXNlVGFza1tdID0gW107XG5cbiAgICAgICAgLy/ku7vliqHmi6bmiKrlmajov4fmu6RcbiAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0aGlzLnRhc2tRdWV1ZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaW50ZXJjZXB0b3Igb2YgdGhpcy5pbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICAgICAgICAvL+aLpuaIqueUn+aViFxuICAgICAgICAgICAgICAgIGlmIChpbnRlcmNlcHRvci5vbkludGVyY2VwdCh0YXNrKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRlZFRhc2tzLnB1c2godGFzayk7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5kKFwi5Lu75Yqh5oum5oiq5Zmo5oum5oiq5LqG5Lu75YqhOlwiKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nLmQodGFzayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8v5omT5pat55Sf5pWIXG4gICAgICAgICAgICAgICAgaWYgKGludGVyY2VwdG9yLm9uSW50ZXJydXB0KHRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgIC8v5bCG5omT5pat5qCH5b+X5L2N6K6+5Li6dHJ1ZVxuICAgICAgICAgICAgICAgICAgICBpc0ludGVycnVwdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ludGVycnVwdCkge1xuICAgICAgICAgICAgbG9nLncoXCLku7vliqHmi6bmiKrlmajkuK3mlq3kuobku7vliqHpmJ/liJdcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvL+S7juS7u+WKoemYn+WIl+S4reWOu+mZpOS7u+WKoVxuICAgICAgICBmb3IgKGxldCB0YXNrIG9mIGludGVyY2VwdGVkVGFza3MpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMudGFza1F1ZXVlLmluZGV4T2YodGFzayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhc2tRdWV1ZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy/lm57osIPlh73mlbDlh73mlbBcbiAgICAgICAgdGhpcy5saXN0ZW5lci5vblJlYWR5KHRoaXMudGFza1F1ZXVlKTtcblxuXG4gICAgICAgIC8v5aSE55CG5Zu+54mHXG4gICAgICAgIHRoaXMuaGFuZGxlSW1hZ2VzKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvL+iHquWKqOS4iuS8oFxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0bykge1xuICAgICAgICAgICAgICAgIGxvZy5kKFwi5byA5aeL6Ieq5Yqo5LiK5LygXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICog5piv5ZCm5piv5YiG5Z2X5Lu75YqhXG4gICAgICogQHBhcmFtIHRhc2tcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpc0NodW5rVGFzayh0YXNrOiBCYXNlVGFzayk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGFzay5jb25zdHJ1Y3Rvci5uYW1lID09PSBDaHVua1Rhc2submFtZSAmJiB0YXNrIGluc3RhbmNlb2YgQ2h1bmtUYXNrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuaYr+ebtOS8oOS7u+WKoVxuICAgICAqIEBwYXJhbSB0YXNrXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNEaXJlY3RUYXNrKHRhc2s6IEJhc2VUYXNrKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0YXNrLmNvbnN0cnVjdG9yLm5hbWUgPT09IERpcmVjdFRhc2submFtZSAmJiB0YXNrIGluc3RhbmNlb2YgRGlyZWN0VGFzaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnlJ/miJB0YXNrXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVRhc2soKSB7XG4gICAgICAgIHRoaXMucmVzZXRVcGxvYWRlcigpO1xuXG4gICAgICAgIGxldCBmaWxlczogRmlsZUxpc3QgPSB0aGlzLmZpbGVJbnB1dC5maWxlcztcblxuICAgICAgICAvL+mBjeWOhmZpbGVzIOWIm+W7uuS4iuS8oOS7u+WKoVxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5maWxlSW5wdXQuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBmaWxlOiBGaWxlID0gZmlsZXNbaV07XG5cbiAgICAgICAgICAgIGxldCB0YXNrOiBCYXNlVGFzaztcbiAgICAgICAgICAgIC8v5Y+q5pyJ5Zyo5byA5ZCv5YiG5Z2X5LiK5Lyg77yM5bm25LiU5paH5Lu25aSn5bCP5aSn5LqONG1i55qE5pe25YCZ5omN6L+b6KGM5YiG5Z2X5LiK5LygXG4gICAgICAgICAgICBpZiAodGhpcy5jaHVuayAmJiBmaWxlLnNpemUgPiBVcGxvYWRlckJ1aWxkZXIuQkxPQ0tfU0laRSkge1xuICAgICAgICAgICAgICAgIHRhc2sgPSBuZXcgQ2h1bmtUYXNrKGZpbGUsIFVwbG9hZGVyQnVpbGRlci5CTE9DS19TSVpFLCB0aGlzLnNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFzayA9IG5ldyBEaXJlY3RUYXNrKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3NhdmVLZXkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXNrLmtleSA9IHRoaXMubGlzdGVuZXIub25UYXNrR2V0S2V5KHRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50YXNrUXVldWUucHVzaCh0YXNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWkhOeQhuWbvueJhy3nvKnmlL4t6LSo6YeP5Y6L57ypXG4gICAgICovXG4gICAgcHJpdmF0ZSBoYW5kbGVJbWFnZXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgbGV0IHByb21pc2VzOiBQcm9taXNlPGFueT5bXSA9IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbXByZXNzICE9IDEgfHwgdGhpcy5zY2FsZVswXSAhPSAwIHx8IHRoaXMuc2NhbGVbMV0gIT0gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0aGlzLnRhc2tRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghdGFzay5maWxlLnR5cGUubWF0Y2goJ2ltYWdlLionKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9nLmQoYCR7dGFzay5maWxlLm5hbWV9IOWkhOeQhuWJjeeahOWbvueJh+Wkp+Wwjzoke3Rhc2suZmlsZS5zaXplIC8gMTAyNH0ga2JgKTtcblxuICAgICAgICAgICAgICAgIGxldCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50ID0gPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgICAgICAgICAgICAgIGxldCBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBsZXQgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSA8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRhc2suZmlsZSk7XG5cblxuICAgICAgICAgICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlPEJsb2I+KChyZXNvbHZlKSA9PlxuICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1nVyA9IGltZy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWdIID0gaW1nLmhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlVyA9IF90aGlzLnNjYWxlWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlSCA9IF90aGlzLnNjYWxlWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NhbGVXID09IDAgJiYgc2NhbGVIID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltZ1cgLyBpbWdIICogc2NhbGVIO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzY2FsZUg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzY2FsZUggPT0gMCAmJiBzY2FsZVcgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gc2NhbGVXO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWdIIC8gaW1nVyAqIHNjYWxlVztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjYWxlVyA+IDAgJiYgc2NhbGVIID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHNjYWxlVztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2NhbGVIO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+i/memHjOeahOmVv+WuveaYr+e7mOWItuWIsOeUu+W4g+S4iueahOWbvueJh+eahOmVv+WuvVxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjYW52YXMudG9CbG9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vMC45NeaYr+acgOaOpei/keWOn+WbvuWkp+Wwj++8jOWmguaenOi0qOmHj+S4ujHnmoTor53kvJrlr7zoh7Tmr5Tljp/lm77lpKflh6DlgI3jgIJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IoKGJsb2I6IEJsb2IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGJsb2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5kKGAke3Rhc2suZmlsZS5uYW1lfSDlpITnkIblkI7nmoTlm77niYflpKflsI86JHtibG9iLnNpemUgLyAxMDI0fSBrYmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgXCJpbWFnZS9qcGVnXCIsIF90aGlzLmNvbXByZXNzICogMC45NSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApLnRoZW4oKGJsb2I6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBibG9iLm5hbWUgPSB0YXNrLmZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5maWxlID0gYmxvYjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFVwbG9hZGVyLmlzQ2h1bmtUYXNrKHRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoPENodW5rVGFzaz50YXNrKS5zcGxpY2VGaWxlMkJsb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmo4DpqozpgInpobnlkIjms5XmgKdcbiAgICAgKi9cbiAgICBwcml2YXRlICB2YWxpZGF0ZU9wdGlvbnMoKTogdm9pZCB7XG4gICAgICAgIGxvZy5kKFwi5byA5aeL5qOA5p+l5p6E5bu65Y+C5pWw5ZCI5rOV5oCnXCIpO1xuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuRnVuYykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfkvaDlv4Xpobvmj5DkvpvkuIDkuKrojrflj5ZUb2tlbueahOWbnuiwg+WHveaVsCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zY2FsZSB8fCAhKHRoaXMuc2NhbGUgaW5zdGFuY2VvZiBBcnJheSkgfHwgdGhpcy5zY2FsZS5sZW5ndGggIT0gMiB8fCB0aGlzLnNjYWxlWzBdIDwgMCB8fCB0aGlzLnNjYWxlWzFdIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzY2FsZeW/hemhu+aYr+mVv+W6puS4ujLnmoRudW1iZXLnsbvlnovnmoTmlbDnu4Qsc2NhbGVbMF3kuLrlrr3luqbvvIxzY2FsZVsxXeS4uumVv+W6pizlv4XpobvlpKfkuo7nrYnkuo4wJyk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLmQoXCLmnoTlu7rlj4LmlbDmo4Dmn6Xlrozmr5VcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5byA5aeL5LiK5LygXG4gICAgICovXG4gICAgcHVibGljIHN0YXJ0KCk6IHZvaWQge1xuICAgICAgICBsb2cuZChg5LiK5Lyg5Lu75Yqh6YGN5Y6G5byA5aeLYCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZmlsZUlucHV0LmZpbGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ayoeaciemAieS4reeahOaWh+S7tu+8jOaXoOazleW8gOWni+S4iuS8oCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGFza2luZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfku7vliqHmiafooYzkuK3vvIzor7fkuI3opoHph43lpI3kuIrkvKAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXIub25TdGFydCh0aGlzLnRhc2tRdWV1ZSk7XG5cbiAgICAgICAgLy/pgY3ljobku7vliqHpmJ/liJdcbiAgICAgICAgZm9yIChsZXQgdGFzayBvZiB0aGlzLnRhc2tRdWV1ZSkge1xuICAgICAgICAgICAgbG9nLmQoYOS4iuS8oOaWh+S7tuWQje+8miR7dGFzay5maWxlLm5hbWV9YCk7XG4gICAgICAgICAgICBsb2cuZChg5LiK5Lyg5paH5Lu25aSn5bCP77yaJHt0YXNrLmZpbGUuc2l6ZX3lrZfoioLvvIwke3Rhc2suZmlsZS5zaXplIC8gMTAyNH0ga2LvvIwke3Rhc2suZmlsZS5zaXplIC8gMTAyNCAvIDEwMjR9IG1iYCk7XG4gICAgICAgICAgICAvL+agueaNruS7u+WKoeeahOexu+Wei+iwg+eUqOS4jeWQjOeahOS4iuS8oOaooeW8j+i/m+ihjOS4iuS8oFxuICAgICAgICAgICAgaWYgKFVwbG9hZGVyLmlzRGlyZWN0VGFzayh0YXNrKSkge1xuICAgICAgICAgICAgICAgIGxvZy5kKCfor6XkuIrkvKDku7vliqHkuLrnm7TkvKDku7vliqEnKTtcbiAgICAgICAgICAgICAgICAvL+ebtOS8oFxuICAgICAgICAgICAgICAgIG5ldyBEaXJlY3RVcGxvYWRQYXR0ZXJuKHRoaXMpLnVwbG9hZCg8RGlyZWN0VGFzaz50YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKFVwbG9hZGVyLmlzQ2h1bmtUYXNrKHRhc2spKSB7XG4gICAgICAgICAgICAgICAgbG9nLmQoJ+ivpeS4iuS8oOS7u+WKoeS4uuWIhueJh+S7u+WKoScpO1xuICAgICAgICAgICAgICAgIC8v5YiG5Z2X5LiK5LygXG4gICAgICAgICAgICAgICAgbmV3IENodW5rVXBsb2FkUGF0dGVybih0aGlzKS51cGxvYWQoPENodW5rVGFzaz50YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6Z2e5rOV55qEdGFza+exu+WeiycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5omA5pyJ5Lu75Yqh5piv5ZCm5a6M5oiQXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgcHVibGljIGlzVGFza1F1ZXVlRmluaXNoKCkge1xuICAgICAgICBmb3IgKGxldCB0YXNrIG9mIHRoaXMudGFza1F1ZXVlKSB7XG4gICAgICAgICAgICBpZiAoIXRhc2suaXNGaW5pc2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YCJ5oup5paH5Lu2XG4gICAgICovXG4gICAgcHVibGljIGNob29zZUZpbGUoKSB7XG4gICAgICAgIHRoaXMuZmlsZUlucHV0LmNsaWNrKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRva2VuKHRhc2s6IEJhc2VUYXNrKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKHRoaXMuX3Rva2VuU2hhcmUgJiYgdGhpcy5fdG9rZW4gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3Rva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBsb2cuZChg5byA5aeL6I635Y+W5LiK5LygdG9rZW5gKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl90b2tlbkZ1bmModGhpcywgdGFzaykpLnRoZW4oKHRva2VuOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgICAgICAgbG9nLmQoYOS4iuS8oHRva2Vu6I635Y+W5oiQ5YqfOiAke3Rva2VufWApO1xuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlcXVlc3RUYXNrVG9rZW4odGFzazogQmFzZVRhc2ssIHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVNhdmVLZXkodGFzaykudGhlbigoc2F2ZUtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0VG9rZW4odXJsLCBzYXZlS2V5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXF1ZXN0VG9rZW4odXJsOiBzdHJpbmcsIHNhdmVLZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNhdmVLZXkgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHVybCArPSAoKC9cXD8vKS50ZXN0KHVybCkgPyBcIiZcIiA6IFwiP1wiKSArIFwic2F2ZUtleT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzYXZlS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybCArPSAoKC9cXD8vKS50ZXN0KHVybCkgPyBcIiZcIiA6IFwiP1wiKSArIChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgIGxldCB4aHI6IFhNTEh0dHBSZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UudXB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9uYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdhYm9ydGVkJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzb2x2ZVNhdmVLZXkodGFzazogQmFzZVRhc2spOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBsZXQgc2F2ZUtleSA9IHRoaXMuX3NhdmVLZXk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2F2ZUtleSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzYXZlS2V5KVxuICAgICAgICAgICAgLnRoZW4odGhpcy5yZXNvbHZlVVVJRClcbiAgICAgICAgICAgIC50aGVuKHNhdmVLZXkgPT4gdGhpcy5yZXNvbHZlSW1hZ2VJbmZvKHRhc2suZmlsZSwgc2F2ZUtleSkpXG4gICAgICAgICAgICAudGhlbih0aGlzLm9uU2F2ZUtleVJlc29sdmVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc29sdmVVVUlEID0gKHM6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgICAgIGxldCByZSA9IC9cXCRcXCh1dWlkXFwpLztcbiAgICAgICAgaWYgKHJlLnRlc3QocykpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UocmUsIFVVSUQudXVpZCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcztcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSByZXNvbHZlSW1hZ2VJbmZvID0gKGJsb2I6IEJsb2IsIHM6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICAgIGxldCB3aWR0aFJlID0gL1xcJFxcKGltYWdlSW5mb1xcLndpZHRoXFwpLztcbiAgICAgICAgbGV0IGhlaWdodFJlID0gL1xcJFxcKGltYWdlSW5mb1xcLmhlaWdodFxcKS87XG4gICAgICAgIGlmICghd2lkdGhSZS50ZXN0KHMpICYmICFoZWlnaHRSZS50ZXN0KHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSh3aWR0aFJlLCBpbWcud2lkdGgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZShoZWlnaHRSZSwgaW1nLmhlaWdodC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgb25TYXZlS2V5UmVzb2x2ZWQgPSAoc2F2ZUtleTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgICAgdGhpcy5fdG9rZW5TaGFyZSA9IHRoaXMuX3Rva2VuU2hhcmUgJiYgdGhpcy5fc2F2ZUtleSA9PSBzYXZlS2V5O1xuICAgICAgICByZXR1cm4gc2F2ZUtleTtcbiAgICB9O1xuXG4gICAgZ2V0IHJldHJ5KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXRyeTtcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG5cbiAgICBnZXQgYXV0bygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG87XG4gICAgfVxuXG4gICAgZ2V0IG11bHRpcGxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fbXVsdGlwbGU7XG4gICAgfVxuXG4gICAgZ2V0IGFjY2VwdCgpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY2NlcHQ7XG4gICAgfVxuXG4gICAgZ2V0IGNvbXByZXNzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wcmVzcztcbiAgICB9XG5cbiAgICBnZXQgc2NhbGUoKTogbnVtYmVyW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gICAgfVxuXG4gICAgZ2V0IGxpc3RlbmVyKCk6IFVwbG9hZExpc3RlbmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVyO1xuICAgIH1cblxuICAgIGdldCBmaWxlSW5wdXQoKTogSFRNTElucHV0RWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlSW5wdXQ7XG4gICAgfVxuXG4gICAgZ2V0IGNodW5rKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2h1bms7XG4gICAgfVxuXG4gICAgZ2V0IHRhc2tRdWV1ZSgpOiBCYXNlVGFza1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rhc2tRdWV1ZTtcbiAgICB9XG5cblxuICAgIGdldCB0YXNraW5nKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFza2luZztcbiAgICB9XG5cbiAgICBzZXQgdGFza2luZyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl90YXNraW5nID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGludGVyY2VwdG9ycygpOiBJbnRlcmNlcHRvcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVyY2VwdG9ycztcbiAgICB9XG5cbiAgICBnZXQgZG9tYWluKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kb21haW47XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVcGxvYWRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXBsb2FkL1VwbG9hZGVyLnRzIiwiaW1wb3J0IFVwbG9hZGVyIGZyb20gXCIuL1VwbG9hZGVyXCI7XG5pbXBvcnQgQmFzZVRhc2sgZnJvbSBcIi4vdGFzay9CYXNlVGFza1wiO1xuaW1wb3J0IFRva2VuRnVuYyBmcm9tIFwiLi9Ub2tlbkZ1bmNcIjtcbmltcG9ydCBJbnRlcmNlcHRvciBmcm9tIFwiLi9pbnRlcmNlcHRvci9VcGxvYWRJbnRlcmNlcHRvclwiO1xuaW1wb3J0IFNpbXBsZVVwbG9hZEludGVyY2VwdG9yIGZyb20gXCIuL2ludGVyY2VwdG9yL1NpbXBsZVVwbG9hZEludGVyY2VwdG9yXCI7XG5pbXBvcnQgVXBsb2FkTGlzdGVuZXIgZnJvbSBcIi4vaG9vay9VcGxvYWRMaXN0ZW5lclwiO1xuaW1wb3J0IHtTY2hlbWUsIERvbWFpbn0gZnJvbSBcIi4vdXJsL0RvbWFpblwiO1xuXG4vKipcbiAqIFVwbG9hZGVyQnVpbGRlclxuICpcbiAqL1xuY2xhc3MgVXBsb2FkZXJCdWlsZGVyIHtcbiAgICBwdWJsaWMgc3RhdGljIE1BWF9DSFVOS19TSVpFID0gNCAqIDEwMjQgKiAxMDI0Oy8v5YiG54mH5pyA5aSn5YC8XG4gICAgcHVibGljIHN0YXRpYyBCTE9DS19TSVpFID0gVXBsb2FkZXJCdWlsZGVyLk1BWF9DSFVOS19TSVpFOy8v5YiG5Z2X5aSn5bCP77yM5Y+q5pyJ5aSn5LqO6L+Z5Liq5pWw5omN6ZyA6KaB5YiG5Z2XXG4gICAgcHVibGljIHN0YXRpYyBVUExPQURfRE9NQUlOID0ge2h0dHA6ICdodHRwOi8vdXBsb2FkLnFpbml1LmNvbScsIGh0dHBzOiAnaHR0cHM6Ly91cC5xYm94Lm1lJ307XG5cbiAgICBwcml2YXRlIF9yZXRyeTogbnVtYmVyID0gMDsvL+acgOWkp+mHjeivleasoeaVsFxuICAgIHByaXZhdGUgX2RvbWFpbjogRG9tYWluID0gVXBsb2FkZXJCdWlsZGVyLlVQTE9BRF9ET01BSU47Ly/kuIrkvKDln5/lkI1cbiAgICBwcml2YXRlIF9zY2hlbWU6IFNjaGVtZSA9IG51bGw7Ly/kuIrkvKDln5/lkI3nmoQgc2NoZW1lXG4gICAgcHJpdmF0ZSBfc2l6ZTogbnVtYmVyID0gMTAyNCAqIDEwMjQ7Ly/liIbniYflpKflsI8s5Y2V5L2N5a2X6IqCLOS4iumZkDRtLOS4jeiDveS4ujBcbiAgICBwcml2YXRlIF9jaHVuazogYm9vbGVhbiA9IHRydWU7Ly/liIblnZfkuIrkvKBcbiAgICBwcml2YXRlIF9hdXRvOiBib29sZWFuID0gdHJ1ZTsvL+iHquWKqOS4iuS8oCzmr4/mrKHpgInmi6nmlofku7blkI5cbiAgICBwcml2YXRlIF9tdWx0aXBsZTogYm9vbGVhbiA9IHRydWU7Ly/mmK/lkKbmlK/mjIHlpJrmlofku7ZcbiAgICBwcml2YXRlIF9hY2NlcHQ6IHN0cmluZ1tdID0gW107Ly/mjqXlj5fnmoTmlofku7bnsbvlnotcbiAgICBwcml2YXRlIF9idXR0b246IHN0cmluZzsvL+S4iuS8oOaMiemSrlxuICAgIHByaXZhdGUgX2J1dHRvbkV2ZW50TmFtZTogc3RyaW5nOy8v5LiK5Lyg5oyJ6ZKu55qE55uR5ZCs5LqL5Lu25ZCN56ewXG4gICAgcHJpdmF0ZSBfY29tcHJlc3M6IG51bWJlciA9IDE7Ly/lm77niYfljovnvKnotKjph49cbiAgICBwcml2YXRlIF9zY2FsZTogbnVtYmVyW10gPSBbMCwgMF07Ly/nvKnmlL7lpKflsI8s6ZmQ5a6a6auY5bqm562J5q+UW2g6MjAwLHc6MF0s6ZmQ5a6a5a695bqm562J5q+UW2g6MCx3OjEwMF0s6ZmQ5a6a6ZW/5a69W2g6MjAwLHc6MTAwXVxuICAgIHByaXZhdGUgX2xpc3RlbmVyOiBVcGxvYWRMaXN0ZW5lcjsvL+ebkeWQrOWZqFxuICAgIHByaXZhdGUgX3NhdmVLZXk6IGJvb2xlYW4gfCBzdHJpbmcgPSBmYWxzZTtcbiAgICBwcml2YXRlIF90b2tlbkZ1bmM6IFRva2VuRnVuYzsvL3Rva2Vu6I635Y+W5Ye95pWwXG4gICAgcHJpdmF0ZSBfdG9rZW5TaGFyZTogYm9vbGVhbiA9IHRydWU7Ly/liIbkuqt0b2tlbizlpoLmnpzkuLpmYWxzZSzmr4/kuIDmrKFIVFRQ6K+35rGC6YO96ZyA6KaB5paw6I635Y+WVG9rZW5cbiAgICBwcml2YXRlIF9pbnRlcmNlcHRvcnM6IEludGVyY2VwdG9yW10gPSBbXTsvL+S7u+WKoeaLpuaIquWZqFxuICAgIHByaXZhdGUgX2lzRGVidWc6IGJvb2xlYW4gPSBmYWxzZTsvL1xuXG5cbiAgICAvKipcbiAgICAgKiDorr7nva7kuIrkvKDnmoTln5/lkI0s6buY6K6k5pivIHtodHRwOiAnaHR0cDovL3VwbG9hZC5xaW5pdS5jb20nLCBodHRwczogJ2h0dHBzOi8vdXAucWJveC5tZSd9XG4gICAgICogQHBhcmFtIGRvbWFpblxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICovXG4gICAgcHVibGljIGRvbWFpbihkb21haW46IERvbWFpbik6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX2RvbWFpbiA9IGRvbWFpbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6K6+572u5LiK5Lyg5Z+f5ZCN55qE5Y2P6K6u57G75Z6L77yM6buY6K6k5LuOIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCDor7vlj5ZcbiAgICAgKiBAcGFyYW0gc2NoZW1lXG4gICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgc2NoZW1lKHNjaGVtZTogU2NoZW1lKTogVXBsb2FkZXJCdWlsZGVyIHtcbiAgICAgICAgdGhpcy5fc2NoZW1lID0gc2NoZW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmt7vliqDkuIDkuKrmi6bmiKrlmahcbiAgICAgKiBAcGFyYW0gaW50ZXJjZXB0b3JcbiAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBpbnRlcmNlcHRvcihpbnRlcmNlcHRvcjogSW50ZXJjZXB0b3IpOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl9pbnRlcmNlcHRvcnMucHVzaChPYmplY3QuYXNzaWduKG5ldyBTaW1wbGVVcGxvYWRJbnRlcmNlcHRvcigpLCBpbnRlcmNlcHRvcikpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDkuIrkvKDlpLHotKXlkI7nmoTph43kvKDlsJ3or5XmrKHmlbBcbiAgICAgKiBAcGFyYW0gcmV0cnkg6buY6K6kMOasoe+8jOS4jeWwneivleasoemHjeS8oFxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICovXG4gICAgcHVibGljIHJldHJ5KHJldHJ5OiBudW1iZXIpOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl9yZXRyeSA9IHJldHJ5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyAvKipcbiAgICAvLyAgKiDorr7nva7liIbniYflpKflsI9cbiAgICAvLyAgKiBAcGFyYW0gc2l6ZSDliIblnZflpKflsI8s5Y2V5L2N5a2X6IqCLOm7mOiupDQqMTAyNCoxMDI05a2X6IqCKDRtYilcbiAgICAvLyAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgIC8vICAqL1xuICAgIC8vIHByaXZhdGUgc2l6ZShzaXplOiBudW1iZXIpOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgIC8vICAgICB0aGlzLl9zaXplID0gTWF0aC5taW4oTWF0aC5tYXgoc2l6ZSwgMSksIFVwbG9hZGVyQnVpbGRlci5NQVhfQ0hVTktfU0laRSk7XG4gICAgLy8gICAgIHJldHVybiB0aGlzO1xuICAgIC8vIH1cblxuICAgIC8qKlxuICAgICAqIOmAieaLqeaWh+S7tuWQjizmmK/lkKboh6rliqjkuIrkvKBcbiAgICAgKiBAcGFyYW0gYXV0byDpu5jorqR0cnVlXG4gICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgYXV0byhhdXRvOiBib29sZWFuKTogVXBsb2FkZXJCdWlsZGVyIHtcbiAgICAgICAgdGhpcy5fYXV0byA9IGF1dG87XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuaUr+aMgeWkmuaWh+S7tumAieaLqVxuICAgICAqIEBwYXJhbSBtdWx0aXBsZSDpu5jorqR0cnVlXG4gICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgbXVsdGlwbGUobXVsdGlwbGU6IGJvb2xlYW4pOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl9tdWx0aXBsZSA9IG11bHRpcGxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmjqXlj5fkuIrkvKDnmoTmlofku7bnsbvlnotcbiAgICAgKiBAcGFyYW0gYWNjZXB0IOaVsOe7hOW9ouW8j+S+i+WmgjpbJy5wbmcnLCd2aWRlby8qJ11cbiAgICAgKlxuICAgICAqIOivpue7humFjee9ruingWh0dHA6Ly93d3cudzNzY2hvb2xzLmNvbS90YWdzL2F0dF9pbnB1dF9hY2NlcHQuYXNwXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBhY2NlcHQoYWNjZXB0OiBzdHJpbmdbXSk6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX2FjY2VwdCA9IGFjY2VwdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6K6+572u5LiK5Lyg5oyJ6ZKuXG4gICAgICogQHBhcmFtIGJ1dHRvbiDkuIrkvKDmjInpkq5JRFxuICAgICAqIEBwYXJhbSBldmVudE5hbWUg5LiK5Lyg5oyJ6ZKu55qE55uR5ZCs5LqL5Lu25ZCN56ew77yM6buY6K6k5Li6IFwiY2xpY2tcIiDjgIJcbiAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBidXR0b24oYnV0dG9uOiBzdHJpbmcsIGV2ZW50TmFtZSA9IFwiY2xpY2tcIik6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX2J1dHRvbiA9IGJ1dHRvbjtcbiAgICAgICAgdGhpcy5fYnV0dG9uRXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlm77niYfotKjph4/ljovnvKks5Y+q5Zyo5LiK5Lyg55qE5paH5Lu25piv5Zu+54mH55qE5pe25YCZ5pyJ5pWIXG4gICAgICogQHBhcmFtIGNvbXByZXNzIDAtMSzpu5jorqQxLOS4jeWOi+e8qVxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICovXG4gICAgcHVibGljIGNvbXByZXNzKGNvbXByZXNzOiBudW1iZXIpOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl9jb21wcmVzcyA9IE1hdGgubWF4KE1hdGgubWluKGNvbXByZXNzLCAxKSwgMCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWbvueJh+e8qeaUvlxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICogQHBhcmFtIHNjYWxlXG4gICAgICovXG4gICAgcHVibGljIHNjYWxlKHNjYWxlOiBudW1iZXJbXSk6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX3NjYWxlID0gc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuvue9riBzYXZlS2V5XG4gICAgICogQHBhcmFtIHNhdmVLZXlcbiAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBzYXZlS2V5KHNhdmVLZXk6IGJvb2xlYW4gfCBzdHJpbmcpOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl9zYXZlS2V5ID0gc2F2ZUtleTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6I635Y+WVG9rZW7nmoTlnLDlnYBcbiAgICAgKiBAcGFyYW0gdG9rZW5VcmxcbiAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyB0b2tlblVybCh0b2tlblVybDogc3RyaW5nKTogVXBsb2FkZXJCdWlsZGVyIHtcbiAgICAgICAgdGhpcy5fdG9rZW5GdW5jID0gKHVwbG9hZGVyOiBVcGxvYWRlciwgdGFzazogQmFzZVRhc2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1cGxvYWRlci5yZXF1ZXN0VGFza1Rva2VuKHRhc2ssIHRva2VuVXJsKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6I635Y+WVG9rZW7nmoTlh73mlbBcbiAgICAgKiBAcGFyYW0gdG9rZW5GdW5jXG4gICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9rZW5GdW5jKHRva2VuRnVuYzogRnVuY3Rpb24pOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl90b2tlbkZ1bmMgPSAodXBsb2FkZXI6IFVwbG9hZGVyLCB0YXNrOiBCYXNlVGFzaykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgdG9rZW5GdW5jKHJlc29sdmUsIHRhc2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS4iuS8oOeUn+WRveWRqOacn+mSqeWtkFxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICovXG4gICAgcHVibGljIGxpc3RlbmVyKGxpc3RlbmVyOiBVcGxvYWRMaXN0ZW5lcik6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuWIhuS6q3Rva2VuLOWmguaenOS4umZhbHNl5q+P5LiK5Lyg5LiA5Liq5paH5Lu26YO96ZyA6KaB6K+35rGC5LiA5qyhVG9rZW7jgIJcbiAgICAgKiBAcGFyYW0gdG9rZW5TaGFyZVxuICAgICAqIEByZXR1cm5zIHtVcGxvYWRlckJ1aWxkZXJ9XG4gICAgICovXG4gICAgcHVibGljIHRva2VuU2hhcmUodG9rZW5TaGFyZTogYm9vbGVhbik6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX3Rva2VuU2hhcmUgPSB0b2tlblNoYXJlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmmK/lkKbliIblnZfkuIrkvKBcbiAgICAgKiBAcGFyYW0gY2h1bmsg6buY6K6kZmFsc2VcbiAgICAgKiBAcmV0dXJucyB7VXBsb2FkZXJCdWlsZGVyfVxuICAgICAqL1xuICAgIHB1YmxpYyBjaHVuayhjaHVuazogYm9vbGVhbik6IFVwbG9hZGVyQnVpbGRlciB7XG4gICAgICAgIHRoaXMuX2NodW5rID0gY2h1bms7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuW8gOWQr2RlYnVn5qih5byPXG4gICAgICogQHBhcmFtIGRlYnVnIOm7mOiupGZhbHNlXG4gICAgICogQHJldHVybnMge1VwbG9hZGVyQnVpbGRlcn1cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVidWcoZGVidWc6IGJvb2xlYW4pOiBVcGxvYWRlckJ1aWxkZXIge1xuICAgICAgICB0aGlzLl9pc0RlYnVnID0gZGVidWc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCBnZXRSZXRyeSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmV0cnk7XG4gICAgfVxuXG4gICAgZ2V0IGdldFNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuXG4gICAgZ2V0IGdldEF1dG8oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvO1xuICAgIH1cblxuICAgIGdldCBnZXRNdWx0aXBsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211bHRpcGxlO1xuICAgIH1cblxuICAgIGdldCBnZXRBY2NlcHQoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWNjZXB0O1xuICAgIH1cblxuICAgIGdldCBnZXRCdXR0b24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2J1dHRvbjtcbiAgICB9XG5cbiAgICBnZXQgZ2V0QnV0dG9uRXZlbnROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idXR0b25FdmVudE5hbWU7XG4gICAgfVxuXG4gICAgZ2V0IGdldENvbXByZXNzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wcmVzcztcbiAgICB9XG5cbiAgICBnZXQgZ2V0U2NhbGUoKTogbnVtYmVyW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGU7XG4gICAgfVxuXG4gICAgZ2V0IGdldExpc3RlbmVyKCk6IFVwbG9hZExpc3RlbmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVyO1xuICAgIH1cblxuICAgIGdldCBnZXRTYXZlS2V5KCk6IGJvb2xlYW4gfCBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2F2ZUtleTtcbiAgICB9XG5cbiAgICBnZXQgZ2V0VG9rZW5GdW5jKCk6IFRva2VuRnVuYyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbkZ1bmM7XG4gICAgfVxuXG4gICAgZ2V0IGdldFRva2VuU2hhcmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlblNoYXJlO1xuICAgIH1cblxuICAgIGdldCBnZXRDaHVuaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NodW5rO1xuICAgIH1cblxuICAgIGdldCBnZXRJc0RlYnVnKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNEZWJ1ZztcbiAgICB9XG5cbiAgICBnZXQgZ2V0SW50ZXJjZXB0b3JzKCk6IEludGVyY2VwdG9yW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5faW50ZXJjZXB0b3JzO1xuICAgIH1cblxuICAgIGdldCBnZXREb21haW4oKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGRvbWFpbjogYW55ID0gdGhpcy5fZG9tYWluO1xuICAgICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICAgICAgZG9tYWluID0gVXBsb2FkZXJCdWlsZGVyLlVQTE9BRF9ET01BSU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkb21haW4gIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbGV0IHNjaGVtZSA9IHRoaXMuX3NjaGVtZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1lICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICAgICAgc2NoZW1lID0gcHJvdG9jb2wuc3Vic3RyaW5nKDAsIHByb3RvY29sLmxlbmd0aCAtIDEpIGFzIFNjaGVtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tYWluID0gZG9tYWluW3NjaGVtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvbWFpbi5lbmRzV2l0aCgnLycpID8gZG9tYWluLnN1YnN0cmluZygwLCBkb21haW4ubGVuZ3RoIC0gMSkgOiBkb21haW47XG4gICAgfVxuXG4gICAgcHVibGljIGJ1aWxkKCk6IFVwbG9hZGVyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVcGxvYWRlcih0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVwbG9hZGVyQnVpbGRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXBsb2FkL1VwbG9hZGVyQnVpbGRlci50cyIsIi8qKlxuICog5LiK5Lyg5Lu75YqhXG4gKi9cbmFic3RyYWN0IGNsYXNzIEJhc2VUYXNrIHtcbiAgICBwcm90ZWN0ZWQgX2ZpbGU6IEZpbGU7XG4gICAgcHJvdGVjdGVkIF9yZXRyeTogbnVtYmVyID0gMDsvL+W3sumHjeivleasoeaVsFxuICAgIHByb3RlY3RlZCBfY3JlYXRlRGF0ZTogRGF0ZTsvL+WIm+W7uuaXtumXtFxuICAgIHByb3RlY3RlZCBfc3RhcnREYXRlOiBEYXRlOy8v5byA5aeL5pe26Ze0XG4gICAgcHJvdGVjdGVkIF9lbmREYXRlOiBEYXRlOy8v57uT5p2f5pe26Ze0XG4gICAgcHJvdGVjdGVkIF9rZXk6IHN0cmluZzsvL2tleeaWh+S7tuWQjVxuICAgIHByb3RlY3RlZCBfcHJvZ3Jlc3M6IG51bWJlciA9IDA7Ly/ku7vliqHov5vluqYs5pyA5aSnMTAwXG4gICAgcHJvdGVjdGVkIF9pc1N1Y2Nlc3M6IGJvb2xlYW4gPSBmYWxzZTsvL+aYr+WQpuS4iuS8oOaIkOWKn1xuICAgIHByb3RlY3RlZCBfaXNGaW5pc2g6IGJvb2xlYW4gPSBmYWxzZTsvL+aYr+WQpue7k+adn1xuICAgIHByb3RlY3RlZCBfcmVzdWx0OiBPYmplY3Q7XG4gICAgcHJvdGVjdGVkIF9lcnJvcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IoZmlsZTogRmlsZSkge1xuICAgICAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5fY3JlYXRlRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBmaWxlKCk6IEZpbGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGZpbGUoZmlsZTogRmlsZSkge1xuICAgICAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICB9XG5cbiAgICBnZXQgcmV0cnkoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JldHJ5O1xuICAgIH1cblxuICAgIHNldCByZXRyeSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3JldHJ5ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGNyZWF0ZURhdGUoKTogRGF0ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVEYXRlO1xuICAgIH1cblxuICAgIHNldCBjcmVhdGVEYXRlKHZhbHVlOiBEYXRlKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZURhdGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgc3RhcnREYXRlKCk6IERhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnREYXRlO1xuICAgIH1cblxuICAgIHNldCBzdGFydERhdGUodmFsdWU6IERhdGUpIHtcbiAgICAgICAgdGhpcy5fc3RhcnREYXRlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGVuZERhdGUoKTogRGF0ZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmREYXRlO1xuICAgIH1cblxuICAgIHNldCBlbmREYXRlKHZhbHVlOiBEYXRlKSB7XG4gICAgICAgIHRoaXMuX2VuZERhdGUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgaXNTdWNjZXNzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTdWNjZXNzO1xuICAgIH1cblxuICAgIHNldCBpc1N1Y2Nlc3ModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNTdWNjZXNzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IHByb2dyZXNzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9ncmVzcztcbiAgICB9XG5cbiAgICBzZXQgcHJvZ3Jlc3ModmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KDAsIHZhbHVlKSwgMTAwKTtcbiAgICB9XG5cblxuICAgIGdldCByZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHQ7XG4gICAgfVxuXG4gICAgc2V0IHJlc3VsdCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9yZXN1bHQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICB9XG5cbiAgICBzZXQgZXJyb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZXJyb3IgPSB2YWx1ZTtcbiAgICB9XG5cblxuICAgIGdldCBrZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgICB9XG5cbiAgICBzZXQga2V5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fa2V5ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGlzRmluaXNoKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGaW5pc2g7XG4gICAgfVxuXG4gICAgc2V0IGlzRmluaXNoKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2lzRmluaXNoID0gdmFsdWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlVGFzaztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXBsb2FkL3Rhc2svQmFzZVRhc2sudHMiLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBtc2cpe1xuICBpZih0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJyl0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQvKj0gMCovLCBzdGFydC8qPSAwLCBlbmQgPSBAbGVuZ3RoKi8pe1xuICB2YXIgTyAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIHRvICAgID0gdG9JbmRleCh0YXJnZXQsIGxlbilcbiAgICAsIGZyb20gID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0luZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0bylcbiAgICAsIGluYyAgID0gMTtcbiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXtcbiAgICBpbmMgID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gICArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUoY291bnQtLSA+IDApe1xuICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gICArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KXtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhhdClcbiAgICAsIHNlbGYgICA9IElPYmplY3QoTylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgaW5kZXggID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwXG4gICAgLCBpICAgICAgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZihhTGVuIDwgMilmb3IoOzspe1xuICAgIGlmKGluZGV4IGluIHNlbGYpe1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvcig7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSlpZihpbmRleCBpbiBzZWxmKXtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanNcbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlXG4gICwgZmFjdG9yaWVzICA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24oRiwgbGVuLCBhcmdzKXtcbiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7XG4gICAgZm9yKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXtcbiAgdmFyIGZuICAgICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYoaXNPYmplY3QoZm4ucHJvdG90eXBlKSlib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fYmluZC5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJylcbiAgLCBzdGVwICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgZmFzdEtleSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleVxuICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpLCBlbnRyeTtcbiAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0Ll9mID09IGVudHJ5KXRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgLCBraW5kICA9IHRoYXQuX2tcbiAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpe1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUpe1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7XG4gICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBnZXRXZWFrICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrXG4gICwgYW5PYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJylcbiAgLCAkaGFzICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAsIGFycmF5RmluZEluZGV4ICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNilcbiAgLCBpZCAgICAgICAgICAgICAgICA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbih0aGF0KXtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbigpe1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24oc3RvcmUsIGtleSl7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KXJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KWVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZihkYXRhID09PSB0cnVlKXVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG4gIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpe1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCAkYXNzaWduICA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHZhciBBID0ge31cbiAgICAsIEIgPSB7fVxuICAgICwgUyA9IFN5bWJvbCgpXG4gICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KVxuICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCA9IDFcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmZcbiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjtcbiAgd2hpbGUoYUxlbiA+IGluZGV4KXtcbiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pXG4gICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaiAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDEwMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZFAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzICAgPSBnZXRLZXlzKFByb3BlcnRpZXMpXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaSA9IDBcbiAgICAsIFA7XG4gIHdoaWxlKGxlbmd0aCA+IGkpZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanNcbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwgaSAgICAgID0gMFxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBpc0VudW0gICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNFbnRyaWVzKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KGl0KVxuICAgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGkgICAgICA9IDBcbiAgICAgICwgcmVzdWx0ID0gW11cbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSl7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgUmVmbGVjdCAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXtcbiAgdmFyIGtleXMgICAgICAgPSBnT1BOLmYoYW5PYmplY3QoaXQpKVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXRcbiAgLCAkdHJpbSAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpXG4gICAgLCByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanNcbi8vIG1vZHVsZSBpZCA9IDEwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnRcbiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCB3cyAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIGhleCAgICAgICA9IC9eW1xcLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXtcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCByZXBlYXQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxuICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCl7XG4gIHZhciBTICAgICAgICAgICAgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAsIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoXG4gICAgLCBmaWxsU3RyICAgICAgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZylcbiAgICAsIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJylyZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGhcbiAgICAsIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanNcbi8vIG1vZHVsZSBpZCA9IDExMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdNYXAnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDExNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgcmVkZWZpbmUgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIG1ldGEgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGFzc2lnbiAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKVxuICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBnZXRXZWFrICAgICAgPSBtZXRhLmdldFdlYWtcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlXG4gICwgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZVxuICAsIHRtcCAgICAgICAgICA9IHt9XG4gICwgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIGlmKGlzT2JqZWN0KGtleSkpe1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrTWFwJywgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpe1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlcik7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIHByb3RvICA9ICRXZWFrTWFwLnByb3RvdHlwZVxuICAgICAgLCBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZihpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKXtcbiAgICAgICAgaWYoIXRoaXMuX2YpdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBVcGxvYWRlciBmcm9tIFwiLi91cGxvYWQvVXBsb2FkZXJcIjtcbmltcG9ydCBVcGxvYWRlckJ1aWxkZXIgZnJvbSBcIi4vdXBsb2FkL1VwbG9hZGVyQnVpbGRlclwiO1xuZXhwb3J0ICB7VXBsb2FkZXIsIFVwbG9hZGVyQnVpbGRlcn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL01haW4udHMiLCJpbXBvcnQgVGFzayBmcm9tIFwiLi4vdGFzay9EaXJlY3RUYXNrXCI7XG5pbXBvcnQgVXBsb2FkTGlzdGVuZXIgZnJvbSBcIi4vVXBsb2FkTGlzdGVuZXJcIjtcbmNsYXNzIFNpbXBsZVVwbG9hZExpc3RlbmVyIGltcGxlbWVudHMgVXBsb2FkTGlzdGVuZXIge1xuXG4gICAgb25SZWFkeSh0YXNrUXVldWU6IFRhc2tbXSk6IHZvaWQge1xuICAgIH1cblxuICAgIG9uU3RhcnQodGFza1F1ZXVlOiBUYXNrW10pOiB2b2lkIHtcbiAgICB9XG5cbiAgICBvblRhc2tQcm9ncmVzcyh0YXNrOiBUYXNrKTogdm9pZCB7XG4gICAgfVxuXG4gICAgb25UYXNrR2V0S2V5KHRhc2s6IFRhc2spOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBvblRhc2tGYWlsKHRhc2s6IFRhc2spOiB2b2lkIHtcbiAgICB9XG5cbiAgICBvblRhc2tTdWNjZXNzKHRhc2s6IFRhc2spOiB2b2lkIHtcbiAgICB9XG5cbiAgICBvblRhc2tSZXRyeSh0YXNrOiBUYXNrKTogdm9pZCB7XG4gICAgfVxuXG4gICAgb25GaW5pc2godGFza1F1ZXVlOiBUYXNrW10pOiB2b2lkIHtcbiAgICB9XG59XG5cbmV4cG9ydCAgZGVmYXVsdCBTaW1wbGVVcGxvYWRMaXN0ZW5lcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXBsb2FkL2hvb2svU2ltcGxlVXBsb2FkTGlzdGVuZXIudHMiLCJpbXBvcnQgQmFzZVRhc2sgZnJvbSBcIi4uL3Rhc2svQmFzZVRhc2tcIjtcbmltcG9ydCBVcGxvYWRJbnRlcmNlcHRvciBmcm9tIFwiLi9VcGxvYWRJbnRlcmNlcHRvclwiO1xuXG5jbGFzcyBTaW1wbGVVcGxvYWRJbnRlcmNlcHRvciBpbXBsZW1lbnRzIFVwbG9hZEludGVyY2VwdG9yIHtcblxuICAgIG9uSW50ZXJjZXB0KHRhc2s6IEJhc2VUYXNrKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBvbkludGVycnVwdCh0YXNrOiBCYXNlVGFzayk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXBsZVVwbG9hZEludGVyY2VwdG9yO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3VwbG9hZC9pbnRlcmNlcHRvci9TaW1wbGVVcGxvYWRJbnRlcmNlcHRvci50cyIsImltcG9ydCBJVXBsb2FkUGF0dGVybiBmcm9tIFwiLi9JVXBsb2FkUGF0dGVyblwiO1xuaW1wb3J0IFVwbG9hZGVyIGZyb20gXCIuLi9VcGxvYWRlclwiO1xuaW1wb3J0IHtDaHVua1Rhc2ssIENodW5rfSBmcm9tIFwiLi4vdGFzay9DaHVua1Rhc2tcIjtcbmltcG9ydCBsb2cgZnJvbSBcIi4uLy4uL3V0aWwvTG9nXCI7XG5cbi8qKlxuICog5YiG5Z2X5LiK5LygXG4gKi9cbmNsYXNzIENodW5rVXBsb2FkUGF0dGVybiBpbXBsZW1lbnRzIElVcGxvYWRQYXR0ZXJuIHtcbiAgICBwcml2YXRlIHVwbG9hZGVyOiBVcGxvYWRlcjtcbiAgICBwcml2YXRlIHRhc2s6IENodW5rVGFzaztcblxuICAgIGNvbnN0cnVjdG9yKHVwbG9hZGVyOiBVcGxvYWRlcikge1xuICAgICAgICB0aGlzLnVwbG9hZGVyID0gdXBsb2FkZXI7XG4gICAgfVxuXG4gICAgaW5pdCh1cGxvYWRlcjogVXBsb2FkZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGxvYWRlciA9IHVwbG9hZGVyO1xuICAgIH1cblxuICAgIHVwbG9hZCh0YXNrOiBDaHVua1Rhc2spOiB2b2lkIHtcbiAgICAgICAgdGhpcy50YXNrID0gdGFzaztcblxuICAgICAgICB0aGlzLnVwbG9hZGVyLmdldFRva2VuKHRhc2spLnRoZW4oKHRva2VuOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHRhc2suc3RhcnREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudXBsb2FkQmxvY2sodG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwbG9hZEJsb2NrKHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgbG9nLmQoYOWHhuWkh+W8gOWni+S4iuS8oOWdl2ApO1xuICAgICAgICBsZXQgY2hhaW46IFByb21pc2U8YW55PiA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBsb2cuZChg5YWxJHt0aGlzLnRhc2suYmxvY2tzLmxlbmd0aH3lnZfnrYnlvoXkuIrkvKBgKTtcbiAgICAgICAgbG9nLmQoYOWFsSR7dGhpcy50YXNrLnRvdGFsQ2h1bmtDb3VudH3liIbniYfnrYnlvoXkuIrkvKBgKTtcblxuICAgICAgICB0aGlzLnRhc2suYmxvY2tzLmZvckVhY2goKGJsb2NrLCBibG9ja0luZGV4KSA9PiB7XG4gICAgICAgICAgICBibG9jay5jaHVua3MuZm9yRWFjaCgoY2h1bmssIGNodW5rSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjaGFpbiA9IGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2cuZChg5byA5aeL5LiK5Lyg56ysJHsoYmxvY2tJbmRleCArIDEpfeWdlyznrKwkeyhjaHVua0luZGV4ICsgMSl954mHYCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZENodW5rKGNodW5rLCB0b2tlbilcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uY2F0Q2h1bmtzKHRva2VuKTtcbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvL+aJgOacieS7u+WKoemDvee7k+adn+S6hlxuICAgICAgICAgICAgaWYgKHRoaXMudXBsb2FkZXIuaXNUYXNrUXVldWVGaW5pc2goKSkge1xuICAgICAgICAgICAgICAgIGxvZy5kKGDkuIrkvKDku7vliqHpmJ/liJflt7Lnu5PmnZ9gKTtcblxuICAgICAgICAgICAgICAgIC8v5pu05pS55Lu75Yqh5omn6KGM5Lit5qCH5b+XXG4gICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci50YXNraW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvL+ebkeWQrOWZqOiwg+eUqFxuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIubGlzdGVuZXIub25GaW5pc2godGhpcy51cGxvYWRlci50YXNrUXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaCgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGxvZy53KGAke3RoaXMudGFzay5maWxlLm5hbWV95YiG5Z2X5LiK5Lyg5aSx6LSlYCk7XG4gICAgICAgICAgICB0aGlzLnRhc2suZXJyb3IgPSByZXNwb25zZTtcbiAgICAgICAgICAgIHRoaXMudGFzay5pc1N1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudGFzay5pc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnRhc2suZW5kRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza0ZhaWwodGhpcy50YXNrKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGxvYWRDaHVuayhjaHVuazogQ2h1bmssIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBpc0ZpcnN0Q2h1bmtJbkJsb2NrID0gY2h1bmsuYmxvY2suY2h1bmtzLmluZGV4T2YoY2h1bmspID09IDA7XG4gICAgICAgICAgICBsZXQgY2h1bmtJbmRleCA9IGNodW5rLmJsb2NrLmNodW5rcy5pbmRleE9mKGNodW5rKTtcbiAgICAgICAgICAgIC8v5YmN5LiA5LiqY2h1bmss5aaC5p6c5a2Y5Zyo55qE6K+dXG4gICAgICAgICAgICBsZXQgcHJldkNodW5rOiBhbnkgPSBpc0ZpcnN0Q2h1bmtJbkJsb2NrID8gbnVsbCA6IGNodW5rLmJsb2NrLmNodW5rc1tjaHVua0luZGV4IC0gMV07XG5cbiAgICAgICAgICAgIGxldCB1cmw6IHN0cmluZyA9IGlzRmlyc3RDaHVua0luQmxvY2sgPyB0aGlzLmdldFVwbG9hZEJsb2NrVXJsKGNodW5rLmJsb2NrLmRhdGEuc2l6ZSkgOiB0aGlzLmdldFVwbG9hZENodW5rVXJsKGNodW5rLnN0YXJ0LCBwcmV2Q2h1bmsgPyBwcmV2Q2h1bmsuY3R4IDogbnVsbCwgcHJldkNodW5rID8gcHJldkNodW5rLmhvc3QgOiBudWxsKTtcblxuICAgICAgICAgICAgbGV0IHhocjogWE1MSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdQT1NUJywgdXJsICs9ICgoL1xcPy8pLnRlc3QodXJsKSA/IFwiJlwiIDogXCI/XCIpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKSwgdHJ1ZSk7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpOy8v6K6+572uY29udGVudFR5cGVcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgYFVwVG9rZW4gJHt0b2tlbn1gKTsvL+a3u+WKoHRva2Vu6aqM6K+B5aS0XG5cbiAgICAgICAgICAgIC8v5YiG54mH5LiK5Lyg5LitXG4gICAgICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZTogUHJvZ3Jlc3NFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gTWF0aC5yb3VuZCgoKHRoaXMudGFzay5maW5pc2hlZEJsb2Nrc1NpemUgKyBjaHVuay5zdGFydCArIGUubG9hZGVkKSAvIHRoaXMudGFzay5maWxlLnNpemUpICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFzay5wcm9ncmVzcyA8IHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2sucHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIubGlzdGVuZXIub25UYXNrUHJvZ3Jlc3ModGhpcy50YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8v5YiG54mH5LiK5Lyg5a6M5oiQXG4gICAgICAgICAgICB4aHIudXBsb2FkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBNYXRoLnJvdW5kKCgodGhpcy50YXNrLmZpbmlzaGVkQmxvY2tzU2l6ZSArIGNodW5rLnN0YXJ0ICsgY2h1bmsuZGF0YS5zaXplKSAvIHRoaXMudGFzay5maWxlLnNpemUpICogMTAwKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXNrLnByb2dyZXNzIDwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXNrLnByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIubGlzdGVuZXIub25UYXNrUHJvZ3Jlc3ModGhpcy50YXNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvL+WTjeW6lOi/lOWbnlxuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDAgJiYgeGhyLnJlc3BvbnNlVGV4dCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogYW55ID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmN0eCA9IHJlc3VsdC5jdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVuay5ob3N0ID0gcmVzdWx0Lmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2h1bmtJbmRleDogbnVtYmVyID0gY2h1bmsuYmxvY2suY2h1bmtzLmluZGV4T2YoY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhc05leHRDaHVua0luVGhpc0Jsb2NrOiBib29sZWFuID0gY2h1bmtJbmRleCAhPSBjaHVuay5ibG9jay5jaHVua3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzTmV4dENodW5rSW5UaGlzQmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuay5ibG9jay5pc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsuYmxvY2sucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB4aHIuc2VuZChjaHVuay5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGNvbmNhdENodW5rcyh0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgZW5jb2RlZEtleTogYW55ID0gdGhpcy50YXNrLmtleSA/IGJ0b2EodGhpcy50YXNrLmtleSkgOiBudWxsO1xuICAgICAgICAgICAgLy8g5a6J5YWo5a2X56ym5LiyIOWPguiAg++8mmh0dHBzOi8vZGV2ZWxvcGVyLnFpbml1LmNvbS9rb2RvL2FwaS9ta2ZpbGVcbiAgICAgICAgICAgIGlmIChlbmNvZGVkS2V5KSB7XG4gICAgICAgICAgICAgICAgZW5jb2RlZEtleSA9IGVuY29kZWRLZXkucmVwbGFjZSgvXFwrL2csICctJyk7XG4gICAgICAgICAgICAgICAgZW5jb2RlZEtleSA9IGVuY29kZWRLZXkucmVwbGFjZSgvXFwvL2csICdfJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy5nZXRNYWtlRmlsZVVybCh0aGlzLnRhc2suZmlsZS5zaXplLCBlbmNvZGVkS2V5KTtcbiAgICAgICAgICAgIC8v5p6E5bu65omA5pyJ5pWw5o2u5Z2X5pyA5ZCO5LiA5Liq5pWw5o2u54mH5LiK5Lyg5ZCO5b6X5Yiw55qEPGN0eD7nmoTnu4TlkIjmiJDnmoTliJfooajlrZfnrKbkuLJcbiAgICAgICAgICAgIGxldCBjdHhMaXN0U3RyaW5nID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGJsb2NrIG9mIHRoaXMudGFzay5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGFzdENodW5rID0gYmxvY2suY2h1bmtzW2Jsb2NrLmNodW5rcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBjdHhMaXN0U3RyaW5nICs9IGxhc3RDaHVuay5jdHggKyAnLCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdHhMaXN0U3RyaW5nLmVuZHNXaXRoKCcsJykpIHtcbiAgICAgICAgICAgICAgICBjdHhMaXN0U3RyaW5nID0gY3R4TGlzdFN0cmluZy5zdWJzdHJpbmcoMCwgY3R4TGlzdFN0cmluZy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHhocjogWE1MSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdQT1NUJywgdXJsICs9ICgoL1xcPy8pLnRlc3QodXJsKSA/IFwiJlwiIDogXCI/XCIpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKSwgdHJ1ZSk7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTsvL+iuvue9rmNvbnRlbnRUeXBlXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIGBVcFRva2VuICR7dG9rZW59YCk7Ly/mt7vliqB0b2tlbumqjOivgeWktFxuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2suaXNGaW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDAgJiYgeGhyLnJlc3BvbnNlVGV4dCAhPSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogYW55ID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFzay5pc1N1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXNrLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFzay5lbmREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIubGlzdGVuZXIub25UYXNrU3VjY2Vzcyh0aGlzLnRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmV0cnlUYXNrKHRoaXMudGFzaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy53KGAke3RoaXMudGFzay5maWxlLm5hbWV95YiG5Z2X5LiK5Lyg5aSx6LSlLOWHhuWkh+W8gOWni+mHjeS8oGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5saXN0ZW5lci5vblRhc2tSZXRyeSh0aGlzLnRhc2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoY3R4TGlzdFN0cmluZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluWdl+S4iuS8oOeahHVybFxuICAgICAqIEBwYXJhbSBibG9ja1NpemVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHByaXZhdGUgIGdldFVwbG9hZEJsb2NrVXJsKGJsb2NrU2l6ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMudXBsb2FkZXIuZG9tYWlufS9ta2Jsay8ke2Jsb2NrU2l6ZX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPlueJh+S4iuS8oOeahHVybFxuICAgICAqIEBwYXJhbSBzdGFydCDniYfnmoTlnKjlnZfkuK3nmoTotbflp4vkvY3nva5cbiAgICAgKiBAcGFyYW0gY3R4IOWJjeS4gOasoeS4iuS8oOi/lOWbnueahOWdl+e6p+S4iuS8oOaOp+WItuS/oeaBr+OAglxuICAgICAqIEBwYXJhbSBob3N0IOaMh+Wummhvc3RcbiAgICAgKi9cbiAgICBwcml2YXRlICBnZXRVcGxvYWRDaHVua1VybChzdGFydDogbnVtYmVyLCBjdHg6IHN0cmluZywgaG9zdD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHtob3N0ID8gaG9zdCA6IHRoaXMudXBsb2FkZXIuZG9tYWlufS9icHV0LyR7Y3R4fS8ke3N0YXJ0fS9gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluWQiOW5tuWdl+S4uuaWh+S7tueahHVybFxuICAgICAqIEBwYXJhbSBmaWxlU2l6ZSDmlofku7blpKflsI9cbiAgICAgKiBAcGFyYW0gZW5jb2RlZEtleSBiYXNlNjRVcmxFbmNvZGXlkI7nmoTotYTmupDlkI3np7As6Iul5pyq5oyH5a6a77yM5YiZ5L2/55Soc2F2ZUtlee+8m+iLpeacquaMh+WumnNhdmVLZXnvvIzliJnkvb/nlKjotYTmupDlhoXlrrnnmoRTSEEx5YC85L2c5Li66LWE5rqQ5ZCN44CCXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlICBnZXRNYWtlRmlsZVVybChmaWxlU2l6ZTogbnVtYmVyLCBlbmNvZGVkS2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoZW5jb2RlZEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMudXBsb2FkZXIuZG9tYWlufS9ta2ZpbGUvJHtmaWxlU2l6ZX0va2V5LyR7ZW5jb2RlZEtleX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMudXBsb2FkZXIuZG9tYWlufS9ta2ZpbGUvJHtmaWxlU2l6ZX1gO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIHJldHJ5VGFzayh0YXNrOiBDaHVua1Rhc2spOiBib29sZWFuIHtcbiAgICAgICAgLy/ovr7liLDph43or5XmrKHmlbBcbiAgICAgICAgaWYgKHRhc2sucmV0cnkgPj0gdGhpcy51cGxvYWRlci5yZXRyeSkge1xuICAgICAgICAgICAgbG9nLncoYCR7dGFzay5maWxlLm5hbWV96L6+5Yiw6YeN5Lyg5qyh5pWw5LiK6ZmQJHt0aGlzLnVwbG9hZGVyLnJldHJ5fSzlgZzmraLph43kvKBgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0YXNrLnJldHJ5Kys7XG4gICAgICAgIGxvZy53KGAke3Rhc2suZmlsZS5uYW1lfeW8gOWni+mHjeS8oCzlvZPliY3ph43kvKDmrKHmlbAke3Rhc2sucmV0cnl9YCk7XG4gICAgICAgIC8vIHRoaXMudXBsb2FkKHRhc2spO1xuXG4gICAgICAgIC8vdG9kb1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbn1cblxuXG5leHBvcnQgIGRlZmF1bHQgQ2h1bmtVcGxvYWRQYXR0ZXJuO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91cGxvYWQvcGF0dHJlbi9DaHVua1VwbG9hZFBhdHRlcm4udHMiLCJpbXBvcnQgSVVwbG9hZFBhdHRlcm4gZnJvbSBcIi4vSVVwbG9hZFBhdHRlcm5cIjtcbmltcG9ydCBVcGxvYWRlciBmcm9tIFwiLi4vVXBsb2FkZXJcIjtcbmltcG9ydCBEaXJlY3RUYXNrIGZyb20gXCIuLi90YXNrL0RpcmVjdFRhc2tcIjtcbmltcG9ydCBsb2cgZnJvbSBcIi4uLy4uL3V0aWwvTG9nXCI7XG4vKipcbiAqIOebtOaOpeS4iuS8oFxuICovXG5jbGFzcyBEaXJlY3RVcGxvYWRQYXR0ZXJuIGltcGxlbWVudHMgSVVwbG9hZFBhdHRlcm4ge1xuICAgIHByaXZhdGUgdXBsb2FkZXI6IFVwbG9hZGVyO1xuICAgIHByaXZhdGUgdGFzazogRGlyZWN0VGFzaztcblxuICAgIGNvbnN0cnVjdG9yKHVwbG9hZGVyOiBVcGxvYWRlcikge1xuICAgICAgICB0aGlzLnVwbG9hZGVyID0gdXBsb2FkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5a6e546w5o6l5Y+j55qE5LiK5Lyg5pa55rOVXG4gICAgICogQHBhcmFtIHRhc2tcbiAgICAgKi9cbiAgICB1cGxvYWQodGFzazogRGlyZWN0VGFzayk6IHZvaWQge1xuICAgICAgICB0aGlzLnRhc2sgPSB0YXNrO1xuXG4gICAgICAgIHRoaXMudXBsb2FkZXIuZ2V0VG9rZW4odGFzaykudGhlbigodG9rZW46IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGFzay5zdGFydERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy51cGxvYWRGaWxlKHRva2VuKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIOWIm+W7uuihqOWNlVxuICAgICAqIEBwYXJhbSB0b2tlblxuICAgICAqIEByZXR1cm5zIHtGb3JtRGF0YX1cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZUZvcm1EYXRhKHRva2VuOiBzdHJpbmcpOiBGb3JtRGF0YSB7XG4gICAgICAgIGxldCB0YXNrOiBEaXJlY3RUYXNrID0gdGhpcy50YXNrO1xuICAgICAgICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICAgICAgLy9rZXnlrZjlnKjvvIzmt7vliqDliLBmb3JtRGF0YeS4re+8jOiLpeS4jeiuvue9ru+8jOS4g+eJm+acjeWKoeWZqOS8muiHquWKqOeUn+aIkGhhc2gga2V5XG4gICAgICAgIGlmICh0YXNrLmtleSAhPT0gbnVsbCAmJiB0YXNrLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2tleScsIHRhc2sua2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndG9rZW4nLCB0b2tlbik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIHRhc2suZmlsZSk7XG5cbiAgICAgICAgbG9nLmQoYOWIm+W7umZvcm1EYXRh5a+56LGhYCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1EYXRhO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog5LiK5Lyg5paH5Lu2XG4gICAgICogQHBhcmFtIHRva2VuXG4gICAgICovXG4gICAgcHJpdmF0ZSB1cGxvYWRGaWxlKHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHRhc2s6IERpcmVjdFRhc2sgPSB0aGlzLnRhc2s7XG5cbiAgICAgICAgbGV0IHhocjogWE1MSHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAvL+S4iuS8oOS4rVxuICAgICAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZTogUHJvZ3Jlc3NFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGUubGVuZ3RoQ29tcHV0YWJsZSkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9ncmVzcyA9IE1hdGgucm91bmQoKGUubG9hZGVkICogMTAwKSAvIGUudG90YWwpO1xuICAgICAgICAgICAgICAgIGlmICh0YXNrLnByb2dyZXNzIDwgcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza1Byb2dyZXNzKHRhc2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvL+S4iuS8oOWujOaIkFxuICAgICAgICB4aHIudXBsb2FkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0YXNrLnByb2dyZXNzIDwgMTAwKSB7XG4gICAgICAgICAgICAgICAgdGFzay5wcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza1Byb2dyZXNzKHRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXBsb2FkZXIuZG9tYWluO1xuICAgICAgICAvL+mBv+WFjea1j+iniOWZqOe8k+WtmGh0dHDor7fmsYJcbiAgICAgICAgdXJsICs9ICgoL1xcPy8pLnRlc3QodGhpcy51cGxvYWRlci5kb21haW4pID8gXCImXCIgOiBcIj9cIikgKyAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICB4aHIub3BlbignUE9TVCcsIHVybCwgdHJ1ZSk7XG5cbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwICYmIHhoci5yZXNwb25zZVRleHQgIT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5yZXN1bHQgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmlzU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRhc2suaXNGaW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmVuZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLmxpc3RlbmVyLm9uVGFza1N1Y2Nlc3ModGFzayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmV0cnlUYXNrKHRhc2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53KGAke3Rhc2suZmlsZS5uYW1lfeS4iuS8oOWksei0pSzlh4blpIflvIDlp4vph43kvKBgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5saXN0ZW5lci5vblRhc2tSZXRyeSh0YXNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53KGAke3Rhc2suZmlsZS5uYW1lfeS4iuS8oOWksei0pWApO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmVycm9yID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmlzU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0YXNrLmlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5lbmREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlci5saXN0ZW5lci5vblRhc2tGYWlsKHRhc2spO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8v5omA5pyJ5Lu75Yqh6YO957uT5p2f5LqGXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBsb2FkZXIuaXNUYXNrUXVldWVGaW5pc2goKSkge1xuICAgICAgICAgICAgICAgICAgICAvL+abtOaUueS7u+WKoeaJp+ihjOS4reagh+W/l1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZGVyLnRhc2tpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAvL29uRmluaXNoIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkZXIubGlzdGVuZXIub25GaW5pc2godGhpcy51cGxvYWRlci50YXNrUXVldWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhID0gdGhpcy5jcmVhdGVGb3JtRGF0YSh0b2tlbik7XG4gICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKTtcbiAgICAgICAgbG9nLmQoXCLlj5HpgIFhamF4IHBvc3Qg6K+35rGCXCIpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog6YeN5LygXG4gICAgICogQHBhcmFtIHRhc2tcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJldHJ5VGFzayh0YXNrOiBEaXJlY3RUYXNrKTogYm9vbGVhbiB7XG4gICAgICAgIGxvZy5kKFwi5byA5aeL5bCd6K+V6YeN5LygXCIpO1xuICAgICAgICAvL+i+vuWIsOmHjeivleasoeaVsFxuICAgICAgICBpZiAodGFzay5yZXRyeSA+PSB0aGlzLnVwbG9hZGVyLnJldHJ5KSB7XG4gICAgICAgICAgICBsb2cudyhgJHt0YXNrLmZpbGUubmFtZX3ovr7liLDph43kvKDmrKHmlbDkuIrpmZAke3RoaXMudXBsb2FkZXIucmV0cnl9LOWBnOatoumHjeS8oGApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRhc2sucmV0cnkrKztcbiAgICAgICAgbG9nLncoYCR7dGFzay5maWxlLm5hbWV95byA5aeL6YeN5LygLOW9k+WJjemHjeS8oOasoeaVsCR7dGFzay5yZXRyeX1gKTtcbiAgICAgICAgdGhpcy51cGxvYWQodGFzayk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuXG5leHBvcnQgIGRlZmF1bHQgRGlyZWN0VXBsb2FkUGF0dGVybjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXBsb2FkL3BhdHRyZW4vRGlyZWN0VXBsb2FkUGF0dGVybi50cyIsImltcG9ydCBCYXNlVGFzayBmcm9tIFwiLi9CYXNlVGFza1wiO1xuLyoqXG4gKiDliIblnZfku7vliqFcbiAqL1xuY2xhc3MgQ2h1bmtUYXNrIGV4dGVuZHMgQmFzZVRhc2sge1xuICAgIC8v5YiG5Z2XXG4gICAgcHJpdmF0ZSBfYmxvY2tzOiBCbG9ja1tdID0gW107XG4gICAgcHJpdmF0ZSBfYmxvY2tTaXplOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX2NodW5rU2l6ZTogbnVtYmVyID0gMDtcblxuICAgIC8qKlxuICAgICAqIOaehOmAoOWHveaVsFxuICAgICAqIEBwYXJhbSBmaWxlXG4gICAgICogQHBhcmFtIGJsb2NrU2l6ZSDlnZflpKflsI9cbiAgICAgKiBAcGFyYW0gY2h1bmtTaXplIOeJh+Wkp+Wwj1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZpbGU6IEZpbGUsIGJsb2NrU2l6ZTogbnVtYmVyLCBjaHVua1NpemU6IG51bWJlcikge1xuICAgICAgICBzdXBlcihmaWxlKTtcbiAgICAgICAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplO1xuICAgICAgICB0aGlzLl9jaHVua1NpemUgPSBjaHVua1NpemU7XG4gICAgICAgIHRoaXMuc3BsaWNlRmlsZTJCbG9jaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWwhuaWh+S7tuWIhuWdl1xuICAgICAqL1xuICAgIHB1YmxpYyBzcGxpY2VGaWxlMkJsb2NrKCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9ibG9ja3MgPSBbXTtcbiAgICAgICAgbGV0IGZpbGVTaXplOiBudW1iZXIgPSB0aGlzLl9maWxlLnNpemU7XG4gICAgICAgIGxldCBmaWxlOiBGaWxlID0gdGhpcy5fZmlsZTtcbiAgICAgICAgLy/mgLvlnZfmlbBcbiAgICAgICAgbGV0IGJsb2NrQ291bnQgPSBNYXRoLmNlaWwoZmlsZVNpemUgLyB0aGlzLl9ibG9ja1NpemUpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQ6IG51bWJlciA9IGkgKiB0aGlzLl9ibG9ja1NpemU7Ly/otbflp4vkvY3nva5cbiAgICAgICAgICAgIGxldCBlbmQ6IG51bWJlciA9IHN0YXJ0ICsgdGhpcy5fYmxvY2tTaXplOy8v57uT5p2f5L2N572uXG4gICAgICAgICAgICAvL+aehOmAoOS4gOS4quWdl+WunuS+i1xuICAgICAgICAgICAgbGV0IGJsb2NrOiBCbG9jayA9IG5ldyBCbG9jayhzdGFydCwgZW5kLCBmaWxlLnNsaWNlKHN0YXJ0LCBlbmQpLCB0aGlzLl9jaHVua1NpemUsIGZpbGUpO1xuICAgICAgICAgICAgLy/mt7vliqDliLDmlbDnu4TkuK1cbiAgICAgICAgICAgIHRoaXMuX2Jsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluaJgOacieeahGJsb2NrXG4gICAgICogQHJldHVybnMge0Jsb2NrW119XG4gICAgICovXG4gICAgZ2V0IGJsb2NrcygpOiBCbG9ja1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDojrflj5bmraPlnKjlpITnkIbnmoRibG9ja1xuICAgICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICAgKi9cbiAgICBnZXQgcHJvY2Vzc2luZ0Jsb2NrKCk6IEJsb2NrIHtcbiAgICAgICAgZm9yIChsZXQgYmxvY2sgb2YgdGhpcy5fYmxvY2tzKSB7XG4gICAgICAgICAgICBpZiAoIWJsb2NrLnByb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBibG9jaztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBFcnJvcihcIuaJvuS4jeWIsOato+WcqOWkhOeQhueahEJsb2NrXCIpXG4gICAgfVxuXG4gICAgZ2V0IGZpbmlzaGVkQmxvY2tzU2l6ZSgpOiBudW1iZXIge1xuICAgICAgICBsZXQgc2l6ZTogbnVtYmVyID0gMDtcbiAgICAgICAgZm9yIChsZXQgYmxvY2sgb2YgdGhpcy5fYmxvY2tzKSB7XG4gICAgICAgICAgICBzaXplICs9IChibG9jay5pc0ZpbmlzaCA/IGJsb2NrLmRhdGEuc2l6ZSA6IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cblxuICAgIGdldCBjaHVua3MoKTogQ2h1bmtbXSB7XG4gICAgICAgIGxldCBhcnJheTogQ2h1bmtbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBibG9jayBvZiB0aGlzLl9ibG9ja3MpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNodW5rIG9mIGJsb2NrLmNodW5rcykge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2goY2h1bmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDojrflj5bmraPlnKjlpITnkIbnmoRjaHVua1xuICAgICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICAgKi9cbiAgICBnZXQgcHJvY2Vzc2luZ0NodW5rKCk6IENodW5rIHtcbiAgICAgICAgZm9yIChsZXQgYmxvY2sgb2YgdGhpcy5fYmxvY2tzKSB7XG4gICAgICAgICAgICBpZiAoIWJsb2NrLnByb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGNodW5rIG9mIGJsb2NrLmNodW5rcykge1xuICAgICAgICAgICAgICAgIGlmICghY2h1bmsucHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNodW5rO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IEVycm9yKFwi5om+5LiN5Yiw5q2j5Zyo5aSE55CG55qEQ2h1bmtcIilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmgLvlhbHliIbniYfmlbDph48o5omA5pyJ5YiG5Z2X55qE5YiG54mH5pWw6YeP5oC75ZKMKVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IHRvdGFsQ2h1bmtDb3VudCgpOiBudW1iZXIge1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBmb3IgKGxldCBibG9jayBvZiB0aGlzLl9ibG9ja3MpIHtcbiAgICAgICAgICAgIGNvdW50ICs9IGJsb2NrLmNodW5rcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbn1cblxuLyoqXG4gKiDliIblnZfvvIzliIblnZflpKflsI/kuIPniZvlm7rlrprmmK80TVxuICovXG5jbGFzcyBCbG9jayB7XG4gICAgcHJpdmF0ZSBfZGF0YTogQmxvYjsvL+Wdl+aVsOaNrlxuICAgIHByaXZhdGUgX3N0YXJ0OiBudW1iZXI7Ly/otbflp4vkvY3nva5cbiAgICBwcml2YXRlIF9lbmQ6IG51bWJlcjsvL+e7k+adn+S9jee9rlxuICAgIHByaXZhdGUgX2NodW5rczogQ2h1bmtbXSA9IFtdO1xuICAgIHByaXZhdGUgX2lzRmluaXNoOiBib29sZWFuID0gZmFsc2U7Ly/mmK/lkKbkuIrkvKDlrozmiJBcbiAgICBwcml2YXRlIF9wcm9jZXNzaW5nOiBib29sZWFuID0gZmFsc2U7Ly/mmK/lkKbmraPlnKjkuIrkvKBcbiAgICBwcml2YXRlIF9maWxlOiBGaWxlO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhcnQg6LW35aeL5L2N572uXG4gICAgICogQHBhcmFtIGVuZCDnu5PmnZ/kvY3nva5cbiAgICAgKiBAcGFyYW0gZGF0YSDlnZfmlbDmja5cbiAgICAgKiBAcGFyYW0gY2h1bmtTaXplIOWIhueJh+aVsOaNrueahOacgOWkp+Wkp+Wwj1xuICAgICAqIEBwYXJhbSBmaWxlIOWIhuWdl+aJgOWxnuaWh+S7tlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBkYXRhOiBCbG9iLCBjaHVua1NpemU6IG51bWJlciwgZmlsZTogRmlsZSkge1xuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZW5kID0gZW5kO1xuICAgICAgICB0aGlzLl9maWxlID0gZmlsZTtcbiAgICAgICAgdGhpcy5zcGxpY2VCbG9jazJDaHVuayhjaHVua1NpemUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWwhuWdl+WIhueJh1xuICAgICAqL1xuICAgIHByaXZhdGUgc3BsaWNlQmxvY2syQ2h1bmsoY2h1bmtTaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgbGV0IGJsb2NrU2l6ZTogbnVtYmVyID0gdGhpcy5fZGF0YS5zaXplO1xuICAgICAgICBsZXQgZGF0YTogQmxvYiA9IHRoaXMuX2RhdGE7XG4gICAgICAgIC8v5oC754mH5pWwXG4gICAgICAgIGxldCBjaHVua0NvdW50ID0gTWF0aC5jZWlsKGJsb2NrU2l6ZSAvIGNodW5rU2l6ZSk7XG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBjaHVua0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzdGFydDogbnVtYmVyID0gaSAqIGNodW5rU2l6ZTsvL+i1t+Wni+S9jee9rlxuICAgICAgICAgICAgbGV0IGVuZDogbnVtYmVyID0gc3RhcnQgKyBjaHVua1NpemU7Ly/nu5PmnZ/kvY3nva5cbiAgICAgICAgICAgIC8v5p6E6YCg5LiA5Liq54mH5a6e5L6LXG4gICAgICAgICAgICBsZXQgY2h1bms6IENodW5rID0gbmV3IENodW5rKHN0YXJ0LCBlbmQsIGRhdGEuc2xpY2Uoc3RhcnQsIGVuZCksIHRoaXMpO1xuICAgICAgICAgICAgLy/mt7vliqDliLDmlbDnu4TkuK1cbiAgICAgICAgICAgIHRoaXMuX2NodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuS4iuS8oOS4rVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGdldCBwcm9jZXNzaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc2luZztcbiAgICB9XG5cbiAgICBzZXQgcHJvY2Vzc2luZyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YiG5Z2X5omA5bGe55qE5paH5Lu2XG4gICAgICogQHJldHVybnMge0ZpbGV9XG4gICAgICovXG4gICAgZ2V0IGZpbGUoKTogRmlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaYr+WQpuW3sue7j+e7k+adn1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGdldCBpc0ZpbmlzaCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRmluaXNoO1xuICAgIH1cblxuICAgIHNldCBpc0ZpbmlzaCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9pc0ZpbmlzaCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOi/lOWbnuWIhuWdl+aVsOaNrlxuICAgICAqIEByZXR1cm5zIHtCbG9ifVxuICAgICAqL1xuICAgIGdldCBkYXRhKCk6IEJsb2Ige1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDov5Tlm57lrZfoioLotbflp4vkvY3nva5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBzdGFydCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6L+U5Zue5a2X6IqC57uT5p2f5L2N572uXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgZW5kKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmQ7XG4gICAgfVxuXG4gICAgZ2V0IGNodW5rcygpOiBDaHVua1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NodW5rcztcbiAgICB9XG59XG5cbi8qKlxuICog5YiG54mH77yM5YiG54mH5aSn5bCP5Y+v5Lul6Ieq5a6a5LmJ77yM6Iez5bCRMeWtl+iKglxuICovXG5jbGFzcyBDaHVuayB7XG4gICAgcHJpdmF0ZSBfc3RhcnQ6IG51bWJlcjsvL+i1t+Wni+S9jee9rlxuICAgIHByaXZhdGUgX2VuZDogbnVtYmVyOy8v57uT5p2f5L2N572uXG4gICAgcHJpdmF0ZSBfZGF0YTogQmxvYjsvL+eJh+aVsOaNrlxuICAgIHByaXZhdGUgX3Byb2Nlc3Npbmc6IGJvb2xlYW4gPSBmYWxzZTsvL+aYr+WQpuato+WcqOS4iuS8oFxuICAgIHByaXZhdGUgX2lzRmluaXNoOiBib29sZWFuID0gZmFsc2U7Ly/mmK/lkKbkuIrkvKDlrozmiJBcbiAgICBwcml2YXRlIF9jdHg6IHN0cmluZzsvL+WJjeS4gOasoeS4iuS8oOi/lOWbnueahOWdl+e6p+S4iuS8oOaOp+WItuS/oeaBryznrKzkuIDkuKpjaHVua+atpOWAvOS4uuepulxuICAgIHByaXZhdGUgX2Jsb2NrOiBCbG9jazsvL+WIhueJh+aJgOWxnueahOWdl+WvueixoVxuICAgIHByaXZhdGUgX2hvc3Q6IHN0cmluZzsvL+WJjeS4gOasoeS4iuS8oOi/lOWbnueahOaMh+WumuS4iuS8oOWcsOWdgFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhcnQg5a2X6IqC6LW35aeL5L2N572uXG4gICAgICogQHBhcmFtIGVuZCDlrZfoioLnu5PmnZ/kvY3nva5cbiAgICAgKiBAcGFyYW0gZGF0YSDliIbniYfmlbDmja5cbiAgICAgKiBAcGFyYW0gYmxvY2sg5YiG5Z2X5a+56LGhXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIsIGRhdGE6IEJsb2IsIGJsb2NrOiBCbG9jaykge1xuICAgICAgICB0aGlzLl9zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9lbmQgPSBlbmQ7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLl9ibG9jayA9IGJsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOi/lOWbnmNodW5r5omA5bGe55qEQmxvY2vlr7nosaFcbiAgICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAgICovXG4gICAgZ2V0IGJsb2NrKCk6IEJsb2NrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOi/lOWbnuWtl+iKgui1t+Wni+S9jee9rlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IHN0YXJ0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDov5Tlm57lrZfoioLnu5PmnZ/kvY3nva5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBlbmQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDov5Tlm57liIbniYfmlbDmja5cbiAgICAgKiBAcmV0dXJucyB7QmxvYn1cbiAgICAgKi9cbiAgICBnZXQgZGF0YSgpOiBCbG9iIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5piv5ZCm5bey57uP57uT5p2fXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGlzRmluaXNoKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGaW5pc2g7XG4gICAgfVxuXG5cbiAgICBzZXQgaXNGaW5pc2godmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5faXNGaW5pc2ggPSB2YWx1ZTtcbiAgICB9XG5cblxuICAgIGdldCBob3N0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ob3N0O1xuICAgIH1cblxuICAgIHNldCBob3N0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5faG9zdCA9IHZhbHVlO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog5piv5ZCm5LiK5Lyg5LitXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IHByb2Nlc3NpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzaW5nO1xuICAgIH1cblxuICAgIHNldCBwcm9jZXNzaW5nKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NpbmcgPSB2YWx1ZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIOi/lOWbnuS4iuS8oOaOp+WItuS/oeaBryjkuIPniZvmnI3liqHlmajov5Tlm57liY3kuIDmrKHkuIrkvKDov5Tlm57nmoTliIbniYfkuIrkvKDmjqfliLbkv6Hmga8s55So5LqO5LiL5LiA5qyh5LiK5LygLOesrOS4gOS4qmNodW5r5q2k5YC85Li656m6KVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IGN0eCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3R4O1xuICAgIH1cblxuICAgIHNldCBjdHgodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jdHggPSB2YWx1ZTtcbiAgICB9XG59XG5cblxuZXhwb3J0IHtDaHVua1Rhc2ssIEJsb2NrLCBDaHVua307XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3VwbG9hZC90YXNrL0NodW5rVGFzay50cyIsImltcG9ydCBCYXNlVGFzayBmcm9tIFwiLi9CYXNlVGFza1wiO1xuLyoqXG4gKiDnm7TkvKDku7vliqFcbiAqL1xuY2xhc3MgRGlyZWN0VGFzayBleHRlbmRzIEJhc2VUYXNrIHtcblxufVxuXG5leHBvcnQgZGVmYXVsdCBEaXJlY3RUYXNrO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91cGxvYWQvdGFzay9EaXJlY3RUYXNrLnRzIiwiY2xhc3MgVVVJRCB7XG4gICAgcHVibGljIHN0YXRpYyB1dWlkKCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBsZXQgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICAgICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgICAgICByZXR1cm4gKGMgPT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVVSUQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXBsb2FkL3V1aWQvVVVJRC50cyIsIi8qKlxuICogY2FudmFzLnRvQmxvYiBwb2x5ZmlsbFxuICovXG5pZiAoIUhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS50b0Jsb2IpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlLCAndG9CbG9iJywge1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGNhbGxiYWNrLCB0eXBlLCBxdWFsaXR5KSB7XG5cbiAgICAgICAgICAgIGxldCBiaW5TdHIgPSBhdG9iKHRoaXMudG9EYXRhVVJMKHR5cGUsIHF1YWxpdHkpLnNwbGl0KCcsJylbMV0pLFxuICAgICAgICAgICAgICAgIGxlbiA9IGJpblN0ci5sZW5ndGgsXG4gICAgICAgICAgICAgICAgYXJyID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGJpblN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgQmxvYihbYXJyXSwge3R5cGU6IHR5cGUgfHwgJ2ltYWdlL3BuZyd9KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbC9Qb2x5ZmlsbC50cyIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGlzQXJyYXkgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBsZW5ndGgpe1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIE5VTUJFUiAgICAgID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGludCl7XG4gIGlmKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDEzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9fa2V5b2YuanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgcGF0aCAgICAgID0gcmVxdWlyZSgnLi9fcGF0aCcpXG4gICwgaW52b2tlICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXtcbiAgdmFyIGZuICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKVxuICAgICwgaSAgICAgID0gMFxuICAgICwgXyAgICAgID0gcGF0aC5fXG4gICAgLCBob2xkZXIgPSBmYWxzZTtcbiAgd2hpbGUobGVuZ3RoID4gaSlpZigocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8paG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7XG4gICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7XG4gICAgcmV0dXJuIGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3BhcnRpYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvX3BhdGguanNcbi8vIG1vZHVsZSBpZCA9IDEzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlZ0V4cCwgcmVwbGFjZSl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qc1xuLy8gbW9kdWxlIGlkID0gMTM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmUgICAgID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7ZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpeyByZXR1cm4gJHJlKGl0KTsgfX0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7Y29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRldmVyeSAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qc1xuLy8gbW9kdWxlIGlkID0gMTM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJyl9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNilcbiAgLCBLRVkgICAgID0gJ2ZpbmRJbmRleCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSlcbiAgLCBLRVkgICAgID0gJ2ZpbmQnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxuICAsIFNUUklDVCAgID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGluZGV4T2YgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHtpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSU9iamVjdCAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0ludGVnZXIgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgdG9MZW5ndGggICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgJG5hdGl2ZSAgICAgICA9IFtdLmxhc3RJbmRleE9mXG4gICwgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pe1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZihORUdBVElWRV9aRVJPKXJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSBsZW5ndGggLSAxO1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKWluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZihpbmRleCA8IDApaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IoO2luZGV4ID49IDA7IGluZGV4LS0paWYoaW5kZXggaW4gTylpZihPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudClyZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJG1hcCAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qc1xuLy8gbW9kdWxlIGlkID0gMTUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUoYUxlbiA+IGluZGV4KWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanNcbi8vIG1vZHVsZSBpZCA9IDE1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGh0bWwgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjb2YgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIGlmKGh0bWwpYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpe1xuICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKVxuICAgICAgLCBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ICA9IHRvSW5kZXgoYmVnaW4sIGxlbilcbiAgICAgICwgdXBUbyAgID0gdG9JbmRleChlbmQsIGxlbilcbiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KVxuICAgICAgLCBjbG9uZWQgPSBBcnJheShzaXplKVxuICAgICAgLCBpICAgICAgPSAwO1xuICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanNcbi8vIG1vZHVsZSBpZCA9IDE1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHNvbWUgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qc1xuLy8gbW9kdWxlIGlkID0gMTU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgZmFpbHMgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsICRzb3J0ICAgICA9IFtdLnNvcnRcbiAgLCB0ZXN0ICAgICAgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qc1xuLy8gbW9kdWxlIGlkID0gMTU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcblxudmFyIGx6ID0gZnVuY3Rpb24obnVtKXtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZSgtNWUxMyAtIDEpLnRvSVNPU3RyaW5nKCkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgbmV3IERhdGUoTmFOKS50b0lTT1N0cmluZygpO1xufSkpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7XG4gICAgaWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gICAgdmFyIGQgPSB0aGlzXG4gICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAgICwgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgICAgICwgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGwgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoe3RvSVNPU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gMTsgfX0pICE9PSAxO1xufSksICdEYXRlJywge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpe1xuICAgIHZhciBPICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpXG4gICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSlyZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgRGF0ZVByb3RvICAgID0gRGF0ZS5wcm90b3R5cGVcbiAgLCBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJ1xuICAsIFRPX1NUUklORyAgICA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgICAgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXVxuICAsIGdldFRpbWUgICAgICA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSl7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDE2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSEFTX0lOU1RBTkNFICAgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKVxuICAsIEZ1bmN0aW9uUHJvdG8gID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZighKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSlyZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwge3ZhbHVlOiBmdW5jdGlvbihPKXtcbiAgaWYodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpcmV0dXJuIGZhbHNlO1xuICBpZighaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKXJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKWlmKHRoaXMucHJvdG90eXBlID09PSBPKXJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIGhhcyAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEZQcm90byAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGVcbiAgLCBuYW1lUkUgICAgID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvXG4gICwgTkFNRSAgICAgICA9ICduYW1lJztcblxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKXtcbiAgICB0cnkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAgICwgbmFtZSA9ICgnJyArIHRoYXQpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICBoYXModGhhdCwgTkFNRSkgfHwgIWlzRXh0ZW5zaWJsZSh0aGF0KSB8fCBkUCh0aGF0LCBOQU1FLCBjcmVhdGVEZXNjKDUsIG5hbWUpKTtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJylcbiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0XG4gICwgJGFjb3NoICA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOIFxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhc2luaCAgPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KXtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTAgXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7YXNpbmg6IGFzaW5ofSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qc1xuLy8gbW9kdWxlIGlkID0gMTY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXRhbmggID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpe1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qc1xuLy8gbW9kdWxlIGlkID0gMTcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KXtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanNcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRleHBtMSAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7ZXhwbTE6ICRleHBtMX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanNcbi8vIG1vZHVsZSBpZCA9IDE3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNpZ24gICAgICA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpXG4gICwgcG93ICAgICAgID0gTWF0aC5wb3dcbiAgLCBFUFNJTE9OICAgPSBwb3coMiwgLTUyKVxuICAsIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpXG4gICwgTUFYMzIgICAgID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMilcbiAgLCBNSU4zMiAgICAgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbihuKXtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZyb3VuZDogZnVuY3Rpb24gZnJvdW5kKHgpe1xuICAgIHZhciAkYWJzICA9IE1hdGguYWJzKHgpXG4gICAgICAsICRzaWduID0gc2lnbih4KVxuICAgICAgLCBhLCByZXN1bHQ7XG4gICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gICAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICAgIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gICAgcmV0dXJuICRzaWduICogcmVzdWx0O1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qc1xuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFicyAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSAgPSAwXG4gICAgICAsIGkgICAgPSAwXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGxhcmcgPSAwXG4gICAgICAsIGFyZywgZGl2O1xuICAgIHdoaWxlKGkgPCBhTGVuKXtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZihsYXJnIDwgYXJnKXtcbiAgICAgICAgZGl2ICA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSAgPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmKGFyZyA+IDApe1xuICAgICAgICBkaXYgID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qc1xuLy8gbW9kdWxlIGlkID0gMTc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW11bCAgID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsIHhuID0gK3hcbiAgICAgICwgeW4gPSAreVxuICAgICAgLCB4bCA9IFVJTlQxNiAmIHhuXG4gICAgICAsIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpe1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4xMDtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qc1xuLy8gbW9kdWxlIGlkID0gMTc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7bG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCl7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qc1xuLy8gbW9kdWxlIGlkID0gMTc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBleHBtMSAgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KXtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBleHBtMSAgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCl7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpXG4gICAgICAsIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzXG4vLyBtb2R1bGUgaWQgPSAxODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KXtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qc1xuLy8gbW9kdWxlIGlkID0gMTgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIGNvZiAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGdPUEQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgJHRyaW0gICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCBOVU1CRVIgICAgICAgICAgICA9ICdOdW1iZXInXG4gICwgJE51bWJlciAgICAgICAgICAgPSBnbG9iYWxbTlVNQkVSXVxuICAsIEJhc2UgICAgICAgICAgICAgID0gJE51bWJlclxuICAsIHByb3RvICAgICAgICAgICAgID0gJE51bWJlci5wcm90b3R5cGVcbiAgLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG4gICwgQlJPS0VOX0NPRiAgICAgICAgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSXG4gICwgVFJJTSAgICAgICAgICAgICAgPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbihhcmd1bWVudCl7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKXtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKVxuICAgICAgLCB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSl7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZih0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMClyZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmKGZpcnN0ID09PSA0OCl7XG4gICAgICBzd2l0Y2goaXQuY2hhckNvZGVBdCgxKSl7XG4gICAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OSA6IGNhc2UgMTExIDogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdCA6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspe1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZihjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKXtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSl7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWVcbiAgICAgICwgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24oKXsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKyl7XG4gICAgaWYoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSl7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxODNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge0VQU0lMT046IE1hdGgucG93KDIsIC01Mil9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCl7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXtcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qc1xuLy8gbW9kdWxlIGlkID0gMTg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKVxuICAsIGFicyAgICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpe1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmZ9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpXG4gICwgcmVwZWF0ICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZFxuICAsIGZsb29yICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBkYXRhICAgICAgICAgPSBbMCwgMCwgMCwgMCwgMCwgMF1cbiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISdcbiAgLCBaRVJPICAgICAgICAgPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpe1xuICB2YXIgaSAgPSAtMVxuICAgICwgYzIgPSBjO1xuICB3aGlsZSgrK2kgPCA2KXtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24obil7XG4gIHZhciBpID0gNlxuICAgICwgYyA9IDA7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpID0gNlxuICAgICwgcyA9ICcnO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgaWYocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKXtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uKHgsIG4sIGFjYyl7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24oeCl7XG4gIHZhciBuICA9IDBcbiAgICAsIHgyID0geDtcbiAgd2hpbGUoeDIgPj0gNDA5Nil7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlKHgyID49IDIpe1xuICAgIG4gICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUilcbiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cylcbiAgICAgICwgcyA9ICcnXG4gICAgICAsIG0gPSBaRVJPXG4gICAgICAsIGUsIHosIGosIGs7XG4gICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7XG4gICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZih4IDwgMCl7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZih4ID4gMWUtMjEpe1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZihlID4gMCl7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUoaiA+PSA3KXtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZShqID49IDIzKXtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGYgPiAwKXtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDE5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmFpbHMgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxuICAsICR0b1ByZWNpc2lvbiA9IDEuLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pe1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTsgXG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDE5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyl9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJyl9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZ9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanNcbi8vIG1vZHVsZSBpZCA9IDE5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanNcbi8vIG1vZHVsZSBpZCA9IDIwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbigkaXNTZWFsZWQpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qc1xuLy8gbW9kdWxlIGlkID0gMjA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7aXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qc1xuLy8gbW9kdWxlIGlkID0gMjA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAka2V5cyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uKCRwcmV2ZW50RXh0ZW5zaW9ucyl7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbigkc2VhbCl7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KXtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIHRlc3QgICAgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJyl7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDIxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qc1xuLy8gbW9kdWxlIGlkID0gMjEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qc1xuLy8gbW9kdWxlIGlkID0gMjEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2xhc3NvZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuSW5zdGFuY2UgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsIHRhc2sgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnXG4gICwgVHlwZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBJbnRlcm5hbCwgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAsIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbihleGVjKXsgZXhlYyhlbXB0eSwgZW1wdHkpOyB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKVxuICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgOiBuZXcgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXtcbiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ICA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG52YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIGV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4ge2Vycm9yOiBlfTtcbiAgfVxufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7XG4gIGlmKHByb21pc2UuX24pcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMVxuICAgICAgLCBpICAgICA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWxcbiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZVxuICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3RcbiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluXG4gICAgICAgICwgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoaGFuZGxlcil7XG4gICAgICAgICAgaWYoIW9rKXtcbiAgICAgICAgICAgIGlmKHByb21pc2UuX2ggPT0gMilvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihoYW5kbGVyID09PSB0cnVlKXJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKXtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpe1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXtcbiAgICAgIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoaXNOb2RlKXtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pe1xuICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3Ipe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZihhYnJ1cHQpdGhyb3cgYWJydXB0LmVycm9yO1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jXG4gICAgLCBpICAgICA9IDBcbiAgICAsIHJlYWN0aW9uO1xuICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXtcbiAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmKGlzTm9kZSl7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpe1xuICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZighcHJvbWlzZS5fYSlwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXNcbiAgICAsIHRoZW47XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICB2YXIgd3JhcHBlciA9IHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZighVVNFX05BVElWRSl7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpe1xuICAgICAgdmFyIHJlYWN0aW9uICAgID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX3Mpbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHByb21pc2UgID0gbmV3IEludGVybmFsO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCAgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpe1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgdmFyIHZhbHVlcyAgICA9IFtdXG4gICAgICAgICwgaW5kZXggICAgID0gMFxuICAgICAgICAsIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upe1xuICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KytcbiAgICAgICAgICAsIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyAgICAgICAgICA9IHRoaXNcbiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanNcbi8vIG1vZHVsZSBpZCA9IDIxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgckFwcGx5ICAgID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5XG4gICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCl7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KVxuICAgICAgLCBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qc1xuLy8gbW9kdWxlIGlkID0gMjE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjcmVhdGUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZhaWxzICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYmluZCAgICAgICA9IHJlcXVpcmUoJy4vX2JpbmQnKVxuICAsIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyosIG5ld1RhcmdldCovKXtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZihBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmKFRhcmdldCA9PSBuZXdUYXJnZXQpe1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQ7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvICAgID0gbmV3VGFyZ2V0LnByb3RvdHlwZVxuICAgICAgLCBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpXG4gICAgICAsIHJlc3VsdCAgID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwge3ZhbHVlOiAxfSksIDEsIHt2YWx1ZTogMn0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMjE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXSAgICAgICAvLyBrZXlzXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gaXRlcmF0ZWQpa2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbigpe1xuICB2YXIgdGhhdCA9IHRoaXNcbiAgICAsIGtleXMgPSB0aGF0Ll9rXG4gICAgLCBrZXk7XG4gIGRvIHtcbiAgICBpZih0aGF0Ll9pID49IGtleXMubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIH0gd2hpbGUoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7dmFsdWU6IGtleSwgZG9uZTogZmFsc2V9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KXtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpe1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkvKiwgcmVjZWl2ZXIqLyl7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdXG4gICAgLCBkZXNjLCBwcm90bztcbiAgaWYoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge2dldDogZ2V0fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanNcbi8vIG1vZHVsZSBpZCA9IDIyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanNcbi8vIG1vZHVsZSBpZCA9IDIyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYoJHByZXZlbnRFeHRlbnNpb25zKSRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmKHNldFByb3RvKSRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpXG4gICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZighb3duRGVzYyl7XG4gICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDIyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBpc1JlZ0V4cCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgJGZsYWdzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgJFJlZ0V4cCAgICAgICAgICAgPSBnbG9iYWwuUmVnRXhwXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkUmVnRXhwXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkUmVnRXhwLnByb3RvdHlwZVxuICAsIHJlMSAgICAgICAgICAgICAgID0gL2EvZ1xuICAsIHJlMiAgICAgICAgICAgICAgID0gL2EvZ1xuICAvLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbiAgLCBDT1JSRUNUX05FVyAgICAgICA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSl7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZil7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cFxuICAgICAgLCBwaVJFID0gaXNSZWdFeHAocClcbiAgICAgICwgZmlVICA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpe1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7IClwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qc1xuLy8gbW9kdWxlIGlkID0gMjI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbihkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKXtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qc1xuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2Upe1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICB9LCAkcmVwbGFjZV07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qc1xuLy8gbW9kdWxlIGlkID0gMjMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanNcbi8vIG1vZHVsZSBpZCA9IDIzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgU1BMSVQsICRzcGxpdCl7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAgICwgX3NwbGl0ICAgICA9ICRzcGxpdFxuICAgICwgJHB1c2ggICAgICA9IFtdLnB1c2hcbiAgICAsICRTUExJVCAgICAgPSAnc3BsaXQnXG4gICAgLCBMRU5HVEggICAgID0gJ2xlbmd0aCdcbiAgICAsIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICl7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZihzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMClyZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYoIWlzUmVnRXhwKHNlcGFyYXRvcikpcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYoIU5QQ0cpc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpe1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCl7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICBpZighTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSltYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKylpZihhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCltYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZihtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdClicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZihzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleClzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKXtcbiAgICAgICAgaWYobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSlvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKXtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpe1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRmbGFncyAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZihyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7c291cmNlOiAnYScsIGZsYWdzOiAnYid9KSAhPSAnL2EvYic7IH0pKXtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qc1xuLy8gbW9kdWxlIGlkID0gMjM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhdCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanNcbi8vIG1vZHVsZSBpZCA9IDIzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnXG4gICwgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSClcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qc1xuLy8gbW9kdWxlIGlkID0gMjQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDI0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3Ipe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanNcbi8vIG1vZHVsZSBpZCA9IDI0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSW5kZXggICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAsICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyAgPSBbXVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGFMZW4gPiBpKXtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZih0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSl0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29udGV4dCAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDI0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qc1xuLy8gbW9kdWxlIGlkID0gMjQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpe1xuICAgIHZhciB0cGwgID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdylcbiAgICAgICwgbGVuICA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlcyAgPSBbXVxuICAgICAgLCBpICAgID0gMDtcbiAgICB3aGlsZShsZW4gPiBpKXtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYoaSA8IGFMZW4pcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qc1xuLy8gbW9kdWxlIGlkID0gMjQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanNcbi8vIG1vZHVsZSBpZCA9IDI1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCdcbiAgLCAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpXG4gICAgICAsIGluZGV4ICA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qc1xuLy8gbW9kdWxlIGlkID0gMjUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanNcbi8vIG1vZHVsZSBpZCA9IDI1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWVxuICAsICRmYWlscyAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCB1aWQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgd2tzICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgd2tzRGVmaW5lICAgICAgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJylcbiAgLCBrZXlPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2tleW9mJylcbiAgLCBlbnVtS2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpXG4gICwgaXNBcnJheSAgICAgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgX2NyZWF0ZSAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBnT1BORXh0ICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpXG4gICwgJEdPUEQgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgJERQICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRrZXlzICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZlxuICAsIGRQICAgICAgICAgICAgID0gJERQLmZcbiAgLCBnT1BOICAgICAgICAgICA9IGdPUE5FeHQuZlxuICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbFxuICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT05cbiAgLCBfc3RyaW5naWZ5ICAgICA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeVxuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG4gICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJylcbiAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlXG4gICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG4gICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJylcbiAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdXG4gICwgVVNFX05BVElWRSAgICAgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nXG4gICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvKSRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcbiAgICBpZighRC5lbnVtZXJhYmxlKXtcbiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSlcbiAgICAsIGkgICAgPSAwXG4gICAgLCBsID0ga2V5cy5sZW5ndGhcbiAgICAsIGtleTtcbiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIGl0ICA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBJU19PUCAgPSBpdCA9PT0gT2JqZWN0UHJvdG9cbiAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKXJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYoIVVTRV9OQVRJVkUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZihoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKXRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKXNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0fSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKXtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24obmFtZSl7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfVxufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cbmZvcih2YXIgc3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzKHN5bWJvbHNbaSsrXSk7XG5cbmZvcih2YXIgc3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3NEZWZpbmUoc3ltYm9sc1tpKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXtcbiAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbigpe1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7YTogU30pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgdmFyIGFyZ3MgPSBbaXRdXG4gICAgICAsIGkgICAgPSAxXG4gICAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHR5cGVkICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAsIGJ1ZmZlciAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpXG4gICwgYW5PYmplY3QgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0luZGV4ICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICwgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyXG4gICwgJERhdGFWaWV3ICAgID0gYnVmZmVyLkRhdGFWaWV3XG4gICwgJGlzVmlldyAgICAgID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXdcbiAgLCAkc2xpY2UgICAgICAgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlXG4gICwgVklFVyAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgLCBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwge0FycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXJ9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KXtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIGlmKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKXJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aFxuICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGZpbmFsICA9IHRvSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbilcbiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpXG4gICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcylcbiAgICAgICwgdmlld1QgID0gbmV3ICREYXRhVmlldyhyZXN1bHQpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qc1xuLy8gbW9kdWxlIGlkID0gMjU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qc1xuLy8gbW9kdWxlIGlkID0gMjU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAyNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAyNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAyNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMjY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgcHJvY2VzcyAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2Vzc1xuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbil7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvZiAgICAgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCl7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanNcbi8vIG1vZHVsZSBpZCA9IDI3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgJHUgPSArdVxuICAgICAgLCAkdiA9ICt2XG4gICAgICAsIHUwID0gJHUgJiBVSU5UMTZcbiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNlxuICAgICAgLCB1MSA9ICR1ID4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanNcbi8vIG1vZHVsZSBpZCA9IDI3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanNcbi8vIG1vZHVsZSBpZCA9IDI3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanNcbi8vIG1vZHVsZSBpZCA9IDI3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpe1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7Z2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKXtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge3NldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCl7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDI4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBvd25LZXlzICAgICAgICA9IHJlcXVpcmUoJy4vX293bi1rZXlzJylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCl7XG4gICAgdmFyIE8gICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICAgLCBnZXREZXNjID0gZ09QRC5mXG4gICAgICAsIGtleXMgICAgPSBvd25LZXlzKE8pXG4gICAgICAsIHJlc3VsdCAgPSB7fVxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoa2V5cy5sZW5ndGggPiBpKWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5ID0ga2V5c1tpKytdLCBnZXREZXNjKE8sIGtleSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAyODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMjgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKVxuICAgICAgLCBEO1xuICAgIGRvIHtcbiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpe1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgbWljcm90YXNrICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgT0JTRVJWQUJMRSAgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpXG4gICwgYUZ1bmN0aW9uICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGhpZGUgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIFJFVFVSTiAgICAgID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oZm4pe1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZihjbGVhbnVwKXtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24ob2JzZXJ2ZXIsIHN1YnNjcmliZXIpe1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgICAgICA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpXG4gICAgICAsIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYoY2xlYW51cCAhPSBudWxsKXtcbiAgICAgIGlmKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKWNsZWFudXAgPSBmdW5jdGlvbigpeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZihzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKXsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZihtKXJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmKCFtKXRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpe1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKXtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pe1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dCA6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpe1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYobWV0aG9kKXtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCFkb25lKXtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICBpZihkb25lKXRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKXtcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBBcnJheShsKTsgaSA8IGw7KWl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIWRvbmUpe1xuICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge09ic2VydmFibGU6ICRPYnNlcnZhYmxlfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn19KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwXG4gICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pXG4gICAgLCBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlO1xuICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDI4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgU2V0ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2VzNi5zZXQnKVxuICAsIGZyb20gICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpXG4gICwgbWV0YWRhdGEgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKE8sIFApe1xuICB2YXIgb0tleXMgID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAsIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZihwYXJlbnQgPT09IG51bGwpcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDI5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoe2hhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDI5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHttZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpe1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn19KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAyOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanNcbi8vIG1vZHVsZSBpZCA9IDI5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanNcbi8vIG1vZHVsZSBpZCA9IDI5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGlzUmVnRXhwICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBnZXRGbGFncyAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbihyZWdleHAsIHN0cmluZyl7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHt2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZighaXNSZWdFeHAocmVnZXhwKSl0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpXG4gICAgICAsIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApXG4gICAgICAsIHJ4ICAgID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAyOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAyOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanNcbi8vIG1vZHVsZSBpZCA9IDI5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanNcbi8vIG1vZHVsZSBpZCA9IDMwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKXtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDMwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7Z2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDMwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgLCByZWRlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB3a3MgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICwga2V5O1xuICBpZihwcm90byl7XG4gICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdGFzayAgID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDMwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgcGFydGlhbCAgICA9IHJlcXVpcmUoJy4vX3BhcnRpYWwnKVxuICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXtcbiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIHNldChpbnZva2UoXG4gICAgICBwYXJ0aWFsLFxuICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLFxuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qc1xuLy8gbW9kdWxlIGlkID0gMzA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvc2hpbS5qc1xuLy8gbW9kdWxlIGlkID0gMzA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qc1xuLy8gbW9kdWxlIGlkID0gMzA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=