!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Qiniu=t():e.Qiniu=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){r(this,e)}return i(e,null,[{key:"d",value:function(t){e._enable&&console.debug(t)}},{key:"l",value:function(t){e._enable&&console.log(t)}},{key:"e",value:function(t){e._enable&&console.error(t)}},{key:"w",value:function(t){e._enable&&console.warn(t)}},{key:"i",value:function(t){e._enable&&console.info(t)}},{key:"enable",get:function(){return this._enable},set:function(e){this._enable=e}}]),e}();o._enable=!0,t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(10),s=n(9),u=n(11),a=n(2),l=n(0),c=n(5),f=n(8),h=n(7);n(12);var k=function(){function e(t){var n=this;r(this,e),this.FILE_INPUT_EL_ID="qiniu4js-input",this._taskQueue=[],this._tasking=!1,this._scale=[],this._saveKey=!1,this.handleFiles=function(){if(0!=n.fileInput.files.length){n.generateTask();var e=!1,t=[],r=!0,i=!1,o=void 0;try{for(var s,u=n.taskQueue[Symbol.iterator]();!(r=(s=u.next()).done);r=!0){var a=s.value,c=!0,f=!1,h=void 0;try{for(var k,y=n.interceptors[Symbol.iterator]();!(c=(k=y.next()).done);c=!0){var d=k.value;if(d.onIntercept(a)&&(t.push(a),l.default.d("任务拦截器拦截了任务:"),l.default.d(a)),d.onInterrupt(a)){e=!0;break}}}catch(e){f=!0,h=e}finally{try{!c&&y.return&&y.return()}finally{if(f)throw h}}}}catch(e){i=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw o}}if(e)return void l.default.w("任务拦截器中断了任务队列");var p=!0,v=!1,_=void 0;try{for(var g,b=t[Symbol.iterator]();!(p=(g=b.next()).done);p=!0){var m=g.value,w=n.taskQueue.indexOf(m);-1!=w&&n.taskQueue.splice(w,1)}}catch(e){v=!0,_=e}finally{try{!p&&b.return&&b.return()}finally{if(v)throw _}}n.listener.onReady(n.taskQueue),n.handleImages().then(function(){n.auto&&(l.default.d("开始自动上传"),n.start())})}},this.resolveUUID=function(e){var t=/\$\(uuid\)/;return t.test(e)?e.replace(t,u.default.uuid()):e},this.resolveImageInfo=function(e,t){var n=/\$\(imageInfo\.width\)/,r=/\$\(imageInfo\.height\)/;return n.test(t)||r.test(t)?new Promise(function(i){var o=new Image;o.src=URL.createObjectURL(e),o.onload=function(){t=t.replace(n,o.width.toString()),t=t.replace(r,o.height.toString()),i(t)}}):Promise.resolve(t)},this.onSaveKeyResolved=function(e){return n._tokenShare=n._tokenShare&&n._saveKey==e,e},this._retry=t.getRetry,this._size=t.getSize,this._chunk=t.getChunk,this._auto=t.getAuto,this._multiple=t.getMultiple,this._accept=t.getAccept,this._button=t.getButton,this._buttonEventName=t.getButtonEventName,this._compress=t.getCompress,this._scale=t.getScale,this._saveKey=t.getSaveKey,this._tokenFunc=t.getTokenFunc,this._tokenShare=t.getTokenShare,this._listener=Object.assign(new c.default,t.getListener),this._interceptors=t.getInterceptors,this._domain=t.getDomain,this._fileInputId=this.FILE_INPUT_EL_ID+"_"+(new Date).getTime(),l.default.enable=t.getIsDebug,this.validateOptions(),this.init()}return i(e,[{key:"init",value:function(){this.initFileInputEl()}},{key:"initFileInputEl",value:function(){var e=document.getElementById(this._fileInputId);if(this._fileInput=e||document.createElement("input"),this.fileInput.type="file",this.fileInput.id=this._fileInputId,this.fileInput.style.display="none",this.multiple&&(this.fileInput.multiple=!0),this.accept&&0!=this.accept.length){var t="",n=!0,r=!1,i=void 0;try{for(var o,s=this.accept[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){t+=o.value,t+=","}}catch(e){r=!0,i=e}finally{try{!n&&s.return&&s.return()}finally{if(r)throw i}}t.endsWith(",")&&(t=t.substring(0,t.length-1)),this.fileInput.accept=t,l.default.d("accept类型 "+t)}if(document.body.appendChild(this.fileInput),this.fileInput.addEventListener("change",this.handleFiles,!1),void 0!=this._button){document.getElementById(this._button).addEventListener(this._buttonEventName,this.chooseFile.bind(this))}}},{key:"resetUploader",value:function(){l.default.d("开始重置 uploader"),this.taskQueue.length=0,l.default.d("任务队列已清空"),this._token=null,l.default.d("token已清空"),l.default.d("uploader 重置完毕")}},{key:"generateTask",value:function(){this.resetUploader();for(var e=this.fileInput.files,t=0;t<this.fileInput.files.length;t++){var n=e[t],r=void 0;r=this.chunk&&n.size>a.default.BLOCK_SIZE?new s.ChunkTask(n,a.default.BLOCK_SIZE,this.size):new o.default(n),0==this._saveKey&&(r.key=this.listener.onTaskGetKey(r)),this.taskQueue.push(r)}}},{key:"handleImages",value:function(){var t=this,n=[];if(1!=this.compress||0!=this.scale[0]||0!=this.scale[1]){var r=!0,i=!1,o=void 0;try{for(var s,u=this.taskQueue[Symbol.iterator]();!(r=(s=u.next()).done);r=!0){(function(){var r=s.value;if(!r.file.type.match("image.*"))return"continue";l.default.d(r.file.name+" 处理前的图片大小:"+r.file.size/1024+" kb");var i=document.createElement("canvas"),o=new Image,u=i.getContext("2d");o.src=URL.createObjectURL(r.file);var a=t;n.push(new Promise(function(e){return o.onload=function(){var t=o.width,n=o.height,s=a.scale[0],c=a.scale[1];0==s&&c>0?(i.width=t/n*c,i.height=c):0==c&&s>0?(i.width=s,i.height=n/t*s):s>0&&c>0?(i.width=s,i.height=c):(i.width=o.width,i.height=o.height),u.drawImage(o,0,0,i.width,i.height),console.log(i),console.log(i.toBlob),i.toBlob(function(t){e(t),l.default.d(r.file.name+" 处理后的图片大小:"+t.size/1024+" kb")},"image/jpeg",.95*a.compress)}}).then(function(t){t.name=r.file.name,r.file=t,e.isChunkTask(r)&&r.spliceFile2Block()}))})()}}catch(e){i=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw o}}}return Promise.all(n)}},{key:"validateOptions",value:function(){if(l.default.d("开始检查构建参数合法性"),!this._tokenFunc)throw new Error("你必须提供一个获取Token的回调函数");if(!this.scale||!(this.scale instanceof Array)||2!=this.scale.length||this.scale[0]<0||this.scale[1]<0)throw new Error("scale必须是长度为2的number类型的数组,scale[0]为宽度，scale[1]为长度,必须大于等于0");l.default.d("构建参数检查完毕")}},{key:"start",value:function(){if(l.default.d("上传任务遍历开始"),0==this.fileInput.files.length)throw new Error("没有选中的文件，无法开始上传");if(this.tasking)throw new Error("任务执行中，请不要重复上传");this.listener.onStart(this.taskQueue);var t=!0,n=!1,r=void 0;try{for(var i,o=this.taskQueue[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var s=i.value;if(l.default.d("上传文件名："+s.file.name),l.default.d("上传文件大小："+s.file.size+"字节，"+s.file.size/1024+" kb，"+s.file.size/1024/1024+" mb"),e.isDirectTask(s))l.default.d("该上传任务为直传任务"),new f.default(this).upload(s);else{if(!e.isChunkTask(s))throw new Error("非法的task类型");l.default.d("该上传任务为分片任务"),new h.default(this).upload(s)}}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}}},{key:"isTaskQueueFinish",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,i=this.taskQueue[Symbol.iterator]();!(e=(r=i.next()).done);e=!0){if(!r.value.isFinish)return!1}}catch(e){t=!0,n=e}finally{try{!e&&i.return&&i.return()}finally{if(t)throw n}}return!0}},{key:"chooseFile",value:function(){this.fileInput.click()}},{key:"getToken",value:function(e){var t=this;return this._tokenShare&&void 0!=this._token?Promise.resolve(this._token):(l.default.d("开始获取上传token"),Promise.resolve(this._tokenFunc(this,e)).then(function(e){return l.default.d("上传token获取成功: "+e),t._token=e,e}))}},{key:"requestTaskToken",value:function(e,t){var n=this;return this.resolveSaveKey(e).then(function(e){return n.requestToken(t,e)})}},{key:"requestToken",value:function(e,t){return new Promise(function(n,r){"string"==typeof t&&(e+=(/\?/.test(e)?"&":"?")+"saveKey="+encodeURIComponent(t)),e+=(/\?/.test(e)?"&":"?")+(new Date).getTime();var i=new XMLHttpRequest;i.open("GET",e,!0),i.onreadystatechange=function(){if(i.readyState==XMLHttpRequest.DONE)return 200==i.status?void n(i.response.uptoken):void r(i.response)},i.onabort=function(){r("aborted")},i.responseType="json",i.send()})}},{key:"resolveSaveKey",value:function(e){var t=this,n=this._saveKey;return"string"!=typeof n?Promise.resolve(void 0):Promise.resolve(n).then(this.resolveUUID).then(function(n){return t.resolveImageInfo(e.file,n)}).then(this.onSaveKeyResolved)}},{key:"retry",get:function(){return this._retry}},{key:"size",get:function(){return this._size}},{key:"auto",get:function(){return this._auto}},{key:"multiple",get:function(){return this._multiple}},{key:"accept",get:function(){return this._accept}},{key:"compress",get:function(){return this._compress}},{key:"scale",get:function(){return this._scale}},{key:"listener",get:function(){return this._listener}},{key:"fileInput",get:function(){return this._fileInput}},{key:"chunk",get:function(){return this._chunk}},{key:"taskQueue",get:function(){return this._taskQueue}},{key:"tasking",get:function(){return this._tasking},set:function(e){this._tasking=e}},{key:"interceptors",get:function(){return this._interceptors}},{key:"domain",get:function(){return this._domain}}],[{key:"isChunkTask",value:function(e){return e.constructor.name===s.ChunkTask.name&&e instanceof s.ChunkTask}},{key:"isDirectTask",value:function(e){return e.constructor.name===o.default.name&&e instanceof o.default}}]),e}();t.default=k},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),s=n(6),u=function(){function e(){r(this,e),this._retry=0,this._domain=e.UPLOAD_DOMAIN,this._scheme=window.location.protocol,this._size=1048576,this._chunk=!0,this._auto=!0,this._multiple=!0,this._accept=[],this._compress=1,this._scale=[0,0],this._saveKey=!1,this._tokenShare=!0,this._interceptors=[],this._isDebug=!1}return i(e,[{key:"domain",value:function(e){return this._domain=e,this}},{key:"scheme",value:function(e){return this._scheme=e,this}},{key:"interceptor",value:function(e){return this._interceptors.push(Object.assign(new s.default,e)),this}},{key:"retry",value:function(e){return this._retry=e,this}},{key:"auto",value:function(e){return this._auto=e,this}},{key:"multiple",value:function(e){return this._multiple=e,this}},{key:"accept",value:function(e){return this._accept=e,this}},{key:"button",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"click";return this._button=e,this._buttonEventName=t,this}},{key:"compress",value:function(e){return this._compress=Math.max(Math.min(e,1),0),this}},{key:"scale",value:function(e){return this._scale=e,this}},{key:"saveKey",value:function(e){return this._saveKey=e,this}},{key:"tokenUrl",value:function(e){return this._tokenFunc=function(t,n){return t.requestTaskToken(n,e)},this}},{key:"tokenFunc",value:function(e){return this._tokenFunc=function(t,n){return new Promise(function(t){e(t,n)})},this}},{key:"listener",value:function(e){return this._listener=e,this}},{key:"tokenShare",value:function(e){return this._tokenShare=e,this}},{key:"chunk",value:function(e){return this._chunk=e,this}},{key:"debug",value:function(e){return this._isDebug=e,this}},{key:"build",value:function(){return new o.default(this)}},{key:"getRetry",get:function(){return this._retry}},{key:"getSize",get:function(){return this._size}},{key:"getAuto",get:function(){return this._auto}},{key:"getMultiple",get:function(){return this._multiple}},{key:"getAccept",get:function(){return this._accept}},{key:"getButton",get:function(){return this._button}},{key:"getButtonEventName",get:function(){return this._buttonEventName}},{key:"getCompress",get:function(){return this._compress}},{key:"getScale",get:function(){return this._scale}},{key:"getListener",get:function(){return this._listener}},{key:"getSaveKey",get:function(){return this._saveKey}},{key:"getTokenFunc",get:function(){return this._tokenFunc}},{key:"getTokenShare",get:function(){return this._tokenShare}},{key:"getChunk",get:function(){return this._chunk}},{key:"getIsDebug",get:function(){return this._isDebug}},{key:"getInterceptors",get:function(){return this._interceptors}},{key:"getDomain",get:function(){var t=this._domain;if(null==t&&(t=e.UPLOAD_DOMAIN),"string"!=typeof t){var n=this._scheme;if("string"!=typeof n){var r=window.location.protocol;n=r.substring(0,r.length-1)}t=t[n]}return t.endsWith("/")?t.substring(0,t.length-1):t}}]),e}();u.MAX_CHUNK_SIZE=4194304,u.BLOCK_SIZE=u.MAX_CHUNK_SIZE,u.UPLOAD_DOMAIN={http:"http://upload.qiniu.com",https:"https://up.qbox.me"},t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(t){r(this,e),this._retry=0,this._progress=0,this._isSuccess=!1,this._isFinish=!1,this._file=t,this._createDate=new Date}return i(e,[{key:"file",get:function(){return this._file},set:function(e){this._file=e}},{key:"retry",get:function(){return this._retry},set:function(e){this._retry=e}},{key:"createDate",get:function(){return this._createDate},set:function(e){this._createDate=e}},{key:"startDate",get:function(){return this._startDate},set:function(e){this._startDate=e}},{key:"endDate",get:function(){return this._endDate},set:function(e){this._endDate=e}},{key:"isSuccess",get:function(){return this._isSuccess},set:function(e){this._isSuccess=e}},{key:"progress",get:function(){return this._progress},set:function(e){this._progress=Math.min(Math.max(0,e),100)}},{key:"result",get:function(){return this._result},set:function(e){this._result=e}},{key:"error",get:function(){return this._error},set:function(e){this._error=e}},{key:"key",get:function(){return this._key},set:function(e){this._key=e}},{key:"isFinish",get:function(){return this._isFinish},set:function(e){this._isFinish=e}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.Uploader=r.default;var i=n(2);t.UploaderBuilder=i.default},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){r(this,e)}return i(e,[{key:"onReady",value:function(e){}},{key:"onStart",value:function(e){}},{key:"onTaskProgress",value:function(e){}},{key:"onTaskGetKey",value:function(e){return null}},{key:"onTaskFail",value:function(e){}},{key:"onTaskSuccess",value:function(e){}},{key:"onTaskRetry",value:function(e){}},{key:"onFinish",value:function(e){}}]),e}();t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){r(this,e)}return i(e,[{key:"onIntercept",value:function(e){return!1}},{key:"onInterrupt",value:function(e){return!1}}]),e}();t.default=o},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),s=function(){function e(t){r(this,e),this.uploader=t}return i(e,[{key:"init",value:function(e){this.uploader=e}},{key:"upload",value:function(e){var t=this;this.task=e,this.uploader.getToken(e).then(function(n){e.startDate=new Date,t.uploadBlock(n)})}},{key:"uploadBlock",value:function(e){var t=this;o.default.d("准备开始上传块");var n=Promise.resolve();o.default.d("共"+this.task.blocks.length+"块等待上传"),o.default.d("共"+this.task.totalChunkCount+"分片等待上传"),this.task.blocks.forEach(function(r,i){r.chunks.forEach(function(r,s){n=n.then(function(){return o.default.d("开始上传第"+(i+1)+"块,第"+(s+1)+"片"),t.uploadChunk(r,e)})})}),n.then(function(){return t.concatChunks(e)}).then(function(){t.uploader.isTaskQueueFinish()&&(o.default.d("上传任务队列已结束"),t.uploader.tasking=!1,t.uploader.listener.onFinish(t.uploader.taskQueue))}).catch(function(e){o.default.w(t.task.file.name+"分块上传失败"),t.task.error=e,t.task.isSuccess=!1,t.task.isFinish=!0,t.task.endDate=new Date,t.uploader.listener.onTaskFail(t.task)})}},{key:"uploadChunk",value:function(e,t){var n=this;return new Promise(function(r,i){var o=0==e.block.chunks.indexOf(e),s=e.block.chunks.indexOf(e),u=o?null:e.block.chunks[s-1],a=o?n.getUploadBlockUrl(e.block.data.size):n.getUploadChunkUrl(e.start,u?u.ctx:null,u?u.host:null),l=new XMLHttpRequest;l.open("POST",a+=(/\?/.test(a)?"&":"?")+(new Date).getTime(),!0),l.setRequestHeader("Content-Type","application/octet-stream"),l.setRequestHeader("Authorization","UpToken "+t),l.upload.onprogress=function(t){if(t.lengthComputable){var r=Math.round((n.task.finishedBlocksSize+e.start+t.loaded)/n.task.file.size*100);n.task.progress<r&&(n.task.progress=r,n.uploader.listener.onTaskProgress(n.task))}},l.upload.onload=function(){var t=Math.round((n.task.finishedBlocksSize+e.start+e.data.size)/n.task.file.size*100);n.task.progress<t&&(n.task.progress=t,n.uploader.listener.onTaskProgress(n.task))},l.onreadystatechange=function(){if(l.readyState==XMLHttpRequest.DONE)if(200==l.status&&""!=l.responseText){var t=JSON.parse(l.responseText);e.isFinish=!0,e.processing=!1,e.ctx=t.ctx,e.host=t.host;var n=e.block.chunks.indexOf(e),o=n!=e.block.chunks.length-1;o||(e.block.isFinish=!0,e.block.processing=!1),r()}else i(l.response)},l.send(e.data)})}},{key:"concatChunks",value:function(e){var t=this;return new Promise(function(n,r){var i=t.task.key?btoa(t.task.key):null;i&&(i=i.replace(/\+/g,"-"),i=i.replace(/\//g,"_"));var s=t.getMakeFileUrl(t.task.file.size,i),u="",a=!0,l=!1,c=void 0;try{for(var f,h=t.task.blocks[Symbol.iterator]();!(a=(f=h.next()).done);a=!0){var k=f.value;u+=k.chunks[k.chunks.length-1].ctx+","}}catch(e){l=!0,c=e}finally{try{!a&&h.return&&h.return()}finally{if(l)throw c}}u.endsWith(",")&&(u=u.substring(0,u.length-1));var y=new XMLHttpRequest;y.open("POST",s+=(/\?/.test(s)?"&":"?")+(new Date).getTime(),!0),y.setRequestHeader("Content-Type","text/plain"),y.setRequestHeader("Authorization","UpToken "+e),y.onreadystatechange=function(){if(y.readyState==XMLHttpRequest.DONE)if(t.task.isFinish=!0,200==y.status&&""!=y.responseText){var e=JSON.parse(y.responseText);t.task.isSuccess=!0,t.task.result=e,t.task.endDate=new Date,t.uploader.listener.onTaskSuccess(t.task),n()}else t.retryTask(t.task)?(o.default.w(t.task.file.name+"分块上传失败,准备开始重传"),t.uploader.listener.onTaskRetry(t.task)):r(y.response)},y.send(u)})}},{key:"getUploadBlockUrl",value:function(e){return this.uploader.domain+"/mkblk/"+e}},{key:"getUploadChunkUrl",value:function(e,t,n){return(n||this.uploader.domain)+"/bput/"+t+"/"+e+"/"}},{key:"getMakeFileUrl",value:function(e,t){return t?this.uploader.domain+"/mkfile/"+e+"/key/"+t:this.uploader.domain+"/mkfile/"+e}},{key:"retryTask",value:function(e){return e.retry>=this.uploader.retry?(o.default.w(e.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(e.retry++,o.default.w(e.file.name+"开始重传,当前重传次数"+e.retry),!0)}}]),e}();t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),s=function(){function e(t){r(this,e),this.uploader=t}return i(e,[{key:"upload",value:function(e){var t=this;this.task=e,this.uploader.getToken(e).then(function(n){e.startDate=new Date,t.uploadFile(n)})}},{key:"createFormData",value:function(e){var t=this.task,n=new FormData;return null!==t.key&&void 0!==t.key&&n.append("key",t.key),n.append("token",e),n.append("file",t.file),o.default.d("创建formData对象"),n}},{key:"uploadFile",value:function(e){var t=this,n=this.task,r=new XMLHttpRequest;r.upload.onprogress=function(e){if(e.lengthComputable){var r=Math.round(100*e.loaded/e.total);n.progress<r&&(n.progress=r,t.uploader.listener.onTaskProgress(n))}},r.upload.onload=function(){n.progress<100&&(n.progress=100,t.uploader.listener.onTaskProgress(n))};var i=this.uploader.domain;i+=(/\?/.test(this.uploader.domain)?"&":"?")+(new Date).getTime(),r.open("POST",i,!0),r.onreadystatechange=function(){r.readyState==XMLHttpRequest.DONE&&(200==r.status&&""!=r.responseText?(n.result=JSON.parse(r.responseText),n.isSuccess=!0,n.isFinish=!0,n.endDate=new Date,t.uploader.listener.onTaskSuccess(n)):t.retryTask(n)?(o.default.w(n.file.name+"上传失败,准备开始重传"),t.uploader.listener.onTaskRetry(n)):(o.default.w(n.file.name+"上传失败"),n.error=r.response,n.isSuccess=!1,n.isFinish=!0,n.endDate=new Date,t.uploader.listener.onTaskFail(n)),t.uploader.isTaskQueueFinish()&&(t.uploader.tasking=!1,t.uploader.listener.onFinish(t.uploader.taskQueue)))};var s=this.createFormData(e);r.send(s),o.default.d("发送ajax post 请求")}},{key:"retryTask",value:function(e){return o.default.d("开始尝试重传"),e.retry>=this.uploader.retry?(o.default.w(e.file.name+"达到重传次数上限"+this.uploader.retry+",停止重传"),!1):(e.retry++,o.default.w(e.file.name+"开始重传,当前重传次数"+e.retry),this.upload(e),!0)}}]),e}();t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var u=n(3),a=function(e){function t(e,n,o){r(this,t);var s=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return s._blocks=[],s._blockSize=0,s._chunkSize=0,s._blockSize=n,s._chunkSize=o,s.spliceFile2Block(),s}return o(t,e),s(t,[{key:"spliceFile2Block",value:function(){this._blocks=[];for(var e=this._file.size,t=this._file,n=Math.ceil(e/this._blockSize),r=0;r<n;r++){var i=r*this._blockSize,o=i+this._blockSize,s=new l(i,o,t.slice(i,o),this._chunkSize,t);this._blocks.push(s)}}},{key:"blocks",get:function(){return this._blocks}},{key:"processingBlock",get:function(){var e=!0,t=!1,n=void 0;try{for(var r,i=this._blocks[Symbol.iterator]();!(e=(r=i.next()).done);e=!0){var o=r.value;if(o.processing)return o}}catch(e){t=!0,n=e}finally{try{!e&&i.return&&i.return()}finally{if(t)throw n}}throw Error("找不到正在处理的Block")}},{key:"finishedBlocksSize",get:function(){var e=0,t=!0,n=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var s=i.value;e+=s.isFinish?s.data.size:0}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}return e}},{key:"chunks",get:function(){var e=[],t=!0,n=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var s=i.value,u=!0,a=!1,l=void 0;try{for(var c,f=s.chunks[Symbol.iterator]();!(u=(c=f.next()).done);u=!0){var h=c.value;e.push(h)}}catch(e){a=!0,l=e}finally{try{!u&&f.return&&f.return()}finally{if(a)throw l}}}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}return e}},{key:"processingChunk",get:function(){var e=!0,t=!1,n=void 0;try{for(var r,i=this._blocks[Symbol.iterator]();!(e=(r=i.next()).done);e=!0){var o=r.value;if(o.processing){var s=!0,u=!1,a=void 0;try{for(var l,c=o.chunks[Symbol.iterator]();!(s=(l=c.next()).done);s=!0){var f=l.value;if(f.processing)return f}}catch(e){u=!0,a=e}finally{try{!s&&c.return&&c.return()}finally{if(u)throw a}}}}}catch(e){t=!0,n=e}finally{try{!e&&i.return&&i.return()}finally{if(t)throw n}}throw Error("找不到正在处理的Chunk")}},{key:"totalChunkCount",get:function(){var e=0,t=!0,n=!1,r=void 0;try{for(var i,o=this._blocks[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){e+=i.value.chunks.length}}catch(e){n=!0,r=e}finally{try{!t&&o.return&&o.return()}finally{if(n)throw r}}return e}}]),t}(u.default);t.ChunkTask=a;var l=function(){function e(t,n,i,o,s){r(this,e),this._chunks=[],this._isFinish=!1,this._processing=!1,this._data=i,this._start=t,this._end=n,this._file=s,this.spliceBlock2Chunk(o)}return s(e,[{key:"spliceBlock2Chunk",value:function(e){for(var t=this._data.size,n=this._data,r=Math.ceil(t/e),i=0;i<r;i++){var o=i*e,s=o+e,u=new c(o,s,n.slice(o,s),this);this._chunks.push(u)}}},{key:"processing",get:function(){return this._processing},set:function(e){this._processing=e}},{key:"file",get:function(){return this._file}},{key:"isFinish",get:function(){return this._isFinish},set:function(e){this._isFinish=e}},{key:"data",get:function(){return this._data}},{key:"start",get:function(){return this._start}},{key:"end",get:function(){return this._end}},{key:"chunks",get:function(){return this._chunks}}]),e}();t.Block=l;var c=function(){function e(t,n,i,o){r(this,e),this._processing=!1,this._isFinish=!1,this._start=t,this._end=n,this._data=i,this._block=o}return s(e,[{key:"block",get:function(){return this._block}},{key:"start",get:function(){return this._start}},{key:"end",get:function(){return this._end}},{key:"data",get:function(){return this._data}},{key:"isFinish",get:function(){return this._isFinish},set:function(e){this._isFinish=e}},{key:"host",get:function(){return this._host},set:function(e){this._host=e}},{key:"processing",get:function(){return this._processing},set:function(e){this._processing=e}},{key:"ctx",get:function(){return this._ctx},set:function(e){this._ctx=e}}]),e}();t.Chunk=c},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=n(3),u=function(e){function t(){return r(this,t),i(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,e),t}(s.default);t.default=u},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(){r(this,e)}return i(e,null,[{key:"uuid",value:function(){var e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?n:3&n|8).toString(16)})}}]),e}();t.default=o},function(e,t,n){"use strict"}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,