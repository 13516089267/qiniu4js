{"version":3,"file":null,"sources":["../src/upload/task/BaseTask.ts","../src/upload/task/DirectTask.ts","../src/upload/task/ChunkTask.ts","../src/upload/uuid/UUID.ts","../src/upload/interceptor/SimpleUploadInterceptor.ts","../src/upload/UploaderBuilder.ts","../src/util/Debug.ts","../src/upload/hook/SimpleUploadListener.ts","../src/upload/pattren/DirectUploadPattern.ts","../src/upload/pattren/ChunkUploadPattern.ts","../src/util/Polyfill.ts","../src/upload/Uploader.ts"],"sourcesContent":["/**\n * 上传任务\n */\nabstract class BaseTask {\n    protected _file: File;\n    protected _retry: Number = 0;//已重试次数\n    protected _createDate: Date;//创建时间\n    protected _startDate: Date;//开始时间\n    protected _endDate: Date;//结束时间\n    protected _key: String;//key文件名\n    protected _progress: Number = 0;//任务进度,最大100\n    protected _isSuccess: Boolean = false;//是否上传成功\n    protected _isFinish: boolean = false;//是否结束\n    protected _result: Object;\n    protected _error: any;\n\n    constructor(file: File) {\n        this._file = file;\n        this._createDate = new Date();\n    }\n\n    public get file(): File {\n        return this._file;\n    }\n\n    public set file(file: File) {\n        this._file = file;\n    }\n\n    get retry(): Number {\n        return this._retry;\n    }\n\n    set retry(value: Number) {\n        this._retry = value;\n    }\n\n    get createDate(): Date {\n        return this._createDate;\n    }\n\n    set createDate(value: Date) {\n        this._createDate = value;\n    }\n\n    get startDate(): Date {\n        return this._startDate;\n    }\n\n    set startDate(value: Date) {\n        this._startDate = value;\n    }\n\n    get endDate(): Date {\n        return this._endDate;\n    }\n\n    set endDate(value: Date) {\n        this._endDate = value;\n    }\n\n    get isSuccess(): Boolean {\n        return this._isSuccess;\n    }\n\n    set isSuccess(value: Boolean) {\n        this._isSuccess = value;\n    }\n\n    get progress(): Number {\n        return this._progress;\n    }\n\n    set progress(value: Number) {\n        this._progress = Math.min(Math.max(0, value), 100);\n    }\n\n\n    get result() {\n        return this._result;\n    }\n\n    set result(value) {\n        this._result = value;\n    }\n\n    get error() {\n        return this._error;\n    }\n\n    set error(value) {\n        this._error = value;\n    }\n\n\n    get key(): String {\n        return this._key;\n    }\n\n    set key(value: String) {\n        this._key = value;\n    }\n\n    get isFinish(): boolean {\n        return this._isFinish;\n    }\n\n    set isFinish(value: boolean) {\n        this._isFinish = value;\n    }\n}\n\nexport default BaseTask;","import BaseTask from \"./BaseTask\";\n/**\n * 直传任务\n */\nclass DirectTask extends BaseTask {\n\n}\n\nexport default DirectTask;","import BaseTask from \"./BaseTask\";\n/**\n * 分块任务\n */\nclass ChunkTask extends BaseTask {\n    //分块\n    private _blocks: Block[] = [];\n    private _blockSize: number = 0;\n    private _chunkSize: number = 0;\n\n    /**\n     * 构造函数\n     * @param file\n     * @param blockSize 块大小\n     * @param chunkSize 片大小\n     */\n    constructor(file: File, blockSize: number, chunkSize: number) {\n        super(file);\n        this._blockSize = blockSize;\n        this._chunkSize = chunkSize;\n        this.spliceFile2Block();\n    }\n\n    /**\n     * 将文件分块\n     */\n    public spliceFile2Block(): void {\n        this._blocks = [];\n        let fileSize: number = this._file.size;\n        let file: File = this._file;\n        //总块数\n        let blockCount = Math.ceil(fileSize / this._blockSize);\n\n        for (let i = 0; i < blockCount; i++) {\n            let start: number = i * this._blockSize;//起始位置\n            let end: number = start + this._blockSize;//结束位置\n            //构造一个块实例\n            let block: Block = new Block(start, end, file.slice(start, end), this._chunkSize, file);\n            //添加到数组中\n            this._blocks.push(block);\n        }\n    }\n\n    /**\n     * 获取所有的block\n     * @returns {Block[]}\n     */\n    get blocks(): Block[] {\n        return this._blocks;\n    }\n\n    /**\n     * 获取正在处理的block\n     * @returns {Block}\n     */\n    get processingBlock(): Block {\n        for (let block: Block of this._blocks) {\n            if (!block.processing) {\n                continue;\n            }\n            return block;\n        }\n    }\n\n    get finishedBlocksSize(): number {\n        let size: number = 0;\n        for (let block: Block of this._blocks) {\n            size += (block.isFinish ? block.data.size : 0);\n        }\n        return size;\n    }\n\n    get chunks(): Chunk[] {\n        let array: Chunk[] = [];\n        for (let block: Block of this._blocks) {\n            for (let chunk: Chunk of block.chunks) {\n                array.push(chunk);\n            }\n        }\n        return array;\n    }\n\n    /**\n     * 获取正在处理的chunk\n     * @returns {Block}\n     */\n    get processingChunk(): Chunk {\n        for (let block: Block of this._blocks) {\n            if (!block.processing) {\n                continue;\n            }\n            for (let chunk: Chunk of block.chunks) {\n                if (!chunk.processing) {\n                    continue;\n                }\n                return chunk;\n            }\n        }\n    }\n\n    /**\n     * 总共分片数量(所有分块的分片数量总和)\n     * @returns {number}\n     */\n    get totalChunkCount(): number {\n        let count = 0;\n        for (let block: Block of this._blocks) {\n            count += block.chunks.length;\n        }\n        return count;\n    }\n}\n\n/**\n * 分块，分块大小七牛固定是4M\n */\nclass Block {\n    private _data: Blob;//块数据\n    private _start: number;//起始位置\n    private _end: number;//结束位置\n    private _chunks: Chunk[] = [];\n    private _isFinish: boolean = false;//是否上传完成\n    private _processing: boolean = false;//是否正在上传\n    private _file: File;\n\n    /**\n     *\n     * @param start 起始位置\n     * @param end 结束位置\n     * @param data 块数据\n     * @param chunkSize 分片数据的最大大小\n     * @param file 分块所属文件\n     */\n    constructor(start: number, end: number, data: Blob, chunkSize: number, file: File) {\n        this._data = data;\n        this._start = start;\n        this._end = end;\n        this._file = file;\n        this.spliceBlock2Chunk(chunkSize);\n    }\n\n    /**\n     * 将块分片\n     */\n    private spliceBlock2Chunk(chunkSize: number): void {\n        let blockSize: number = this._data.size;\n        let data: Blob = this._data;\n        //总片数\n        let chunkCount = Math.ceil(blockSize / chunkSize);\n        for (let i: number = 0; i < chunkCount; i++) {\n            let start: number = i * chunkSize;//起始位置\n            let end: number = start + chunkSize;//结束位置\n            //构造一个片实例\n            let chunk: Chunk = new Chunk(start, end, data.slice(start, end), this);\n            //添加到数组中\n            this._chunks.push(chunk);\n        }\n    }\n\n    /**\n     * 是否上传中\n     * @returns {boolean}\n     */\n    get processing(): boolean {\n        return this._processing;\n    }\n\n    set processing(value: boolean) {\n        this._processing = value;\n    }\n\n    /**\n     * 分块所属的文件\n     * @returns {File}\n     */\n    get file(): File {\n        return this._file;\n    }\n\n    /**\n     * 是否已经结束\n     * @returns {boolean}\n     */\n    get isFinish(): boolean {\n        return this._isFinish;\n    }\n\n    set isFinish(value: boolean) {\n        this._isFinish = value;\n    }\n\n    /**\n     * 返回分块数据\n     * @returns {Blob}\n     */\n    get data(): Blob {\n        return this._data;\n    }\n\n    /**\n     * 返回字节起始位置\n     * @returns {number}\n     */\n    get start(): number {\n        return this._start;\n    }\n\n    /**\n     * 返回字节结束位置\n     * @returns {number}\n     */\n    get end(): number {\n        return this._end;\n    }\n\n    get chunks(): Chunk[] {\n        return this._chunks;\n    }\n}\n\n/**\n * 分片，分片大小可以自定义，至少1字节\n */\nclass Chunk {\n    private _start: number;//起始位置\n    private _end: number;//结束位置\n    private _data: Blob;//片数据\n    private _processing: boolean = false;//是否正在上传\n    private _isFinish: boolean = false;//是否上传完成\n    private _ctx: string;//前一次上传返回的块级上传控制信息,第一个chunk此值为空\n    private _block: Block;//分片所属的块对象\n    private _host: string;//前一次上传返回的指定上传地址\n\n    /**\n     *\n     * @param start 字节起始位置\n     * @param end 字节结束位置\n     * @param data 分片数据\n     * @param block 分块对象\n     */\n    constructor(start: number, end: number, data: Blob, block: Block) {\n        this._start = start;\n        this._end = end;\n        this._data = data;\n        this._block = block;\n    }\n\n    /**\n     * 返回chunk所属的Block对象\n     * @returns {Block}\n     */\n    get block(): Block {\n        return this._block;\n    }\n\n    /**\n     * 返回字节起始位置\n     * @returns {number}\n     */\n    get start(): number {\n        return this._start;\n    }\n\n    /**\n     * 返回字节结束位置\n     * @returns {number}\n     */\n    get end(): number {\n        return this._end;\n    }\n\n    /**\n     * 返回分片数据\n     * @returns {Blob}\n     */\n    get data(): Blob {\n        return this._data;\n    }\n\n    /**\n     * 是否已经结束\n     * @returns {boolean}\n     */\n    get isFinish(): boolean {\n        return this._isFinish;\n    }\n\n\n    set isFinish(value: boolean) {\n        this._isFinish = value;\n    }\n\n\n    get host(): string {\n        return this._host;\n    }\n\n    set host(value: string) {\n        this._host = value;\n    }\n\n\n    /**\n     * 是否上传中\n     * @returns {boolean}\n     */\n    get processing(): boolean {\n        return this._processing;\n    }\n\n    set processing(value: boolean) {\n        this._processing = value;\n    }\n\n\n    /**\n     * 返回上传控制信息(七牛服务器返回前一次上传返回的分片上传控制信息,用于下一次上传,第一个chunk此值为空)\n     * @returns {string}\n     */\n    get ctx(): string {\n        return this._ctx;\n    }\n\n    set ctx(value: string) {\n        this._ctx = value;\n    }\n}\n\n\nexport {ChunkTask, Block, Chunk};","class UUID {\n    public static uuid(): string {\n        let d = new Date().getTime();\n        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            let r = (d + Math.random()*16)%16 | 0;\n            d = Math.floor(d/16);\n            return (c=='x' ? r : (r&0x3|0x8)).toString(16);\n        });\n        return uuid;\n    }\n}\n\nexport default UUID;\n","import Task from \"../task/BaseTask\";\nimport UploadInterceptor from \"./UploadInterceptor\";\n\nclass SimpleUploadInterceptor implements UploadInterceptor {\n\n    onIntercept(task: Task): boolean {\n        return false;\n    }\n\n    onInterrupt(task: Task): boolean {\n        return false;\n    }\n\n}\n\nexport default SimpleUploadInterceptor;\n","import Uploader from \"./Uploader\";\nimport BaseTask from \"./task/BaseTask\";\nimport TokenFunc from \"./TokenFunc\";\nimport Interceptor from \"./interceptor/UploadInterceptor\";\nimport SimpleUploadInterceptor from \"./interceptor/SimpleUploadInterceptor\";\nimport UploadListener from \"./hook/UploadListener\";\nimport {Scheme, Domain} from \"./url/Domain\";\n\n/**\n * UploaderBuilder\n *\n */\nclass UploaderBuilder {\n    public static MAX_CHUNK_SIZE = 4 * 1024 * 1024;//分片最大值\n    public static BLOCK_SIZE = UploaderBuilder.MAX_CHUNK_SIZE;//分块大小，只有大于这个数才需要分块\n    public static UPLOAD_URL = 'http://upload.qiniu.com';\n    public static UPLOAD_DOMAIN = {http: 'http://upload.qiniu.com', https: 'https://up.qbox.me'};\n\n    private _retry: number = 0;//最大重试次数\n    private _domain: Domain = UploaderBuilder.UPLOAD_DOMAIN;//上传域名\n    private _scheme: Scheme = null;//上传域名的 scheme\n    private _size: number = 1024 * 1024;//分片大小,单位字节,上限4m,不能为0\n    private _chunk: boolean = true;//分块上传\n    private _auto: boolean = true;//自动上传,每次选择文件后\n    private _multiple: boolean = true;//是否支持多文件\n    private _accept: string[] = [];//接受的文件类型\n    private _button: string;//上传按钮\n    private _buttonEventName: string;//上传按钮的监听事件名称\n    private _compress: number = 1;//图片压缩质量\n    private _scale: number[] = [0, 0];//缩放大小,限定高度等比[h:200,w:0],限定宽度等比[h:0,w:100],限定长宽[h:200,w:100]\n    private _listener: UploadListener;//监听器\n    private _saveKey: boolean | string = false;\n    private _tokenFunc: TokenFunc;//token获取函数\n    private _tokenShare: boolean = true;//分享token,如果为false,每一次HTTP请求都需要新获取Token\n    private _interceptors: Interceptor[] = [];//任务拦截器\n    private _isDebug: boolean = false;//\n\n\n    /**\n     * 设置上传的域名,默认是 {http: 'http://upload.qiniu.com', https: 'https://up.qbox.me'}\n     * @param domain\n     * @returns {UploaderBuilder}\n     */\n    public domain(domain: Domain): UploaderBuilder {\n        this._domain = domain;\n        return this;\n    }\n\n    /**\n     * 设置上传域名的协议类型，默认从 window.location.protocol 读取\n     * @param scheme\n     * @returns {UploaderBuilder}\n     */\n    public scheme(scheme: Scheme): UploaderBuilder {\n        this._scheme = scheme;\n        return this;\n    }\n\n    /**\n     * 添加一个拦截器\n     * @param interceptor\n     * @returns {UploaderBuilder}\n     */\n    public interceptor(interceptor: Interceptor): UploaderBuilder {\n        this._interceptors.push(Object.assign(new SimpleUploadInterceptor(), interceptor));\n        return this;\n    }\n\n    /**\n     * 上传失败后的重传尝试次数\n     * @param retry 默认0次，不尝试次重传\n     * @returns {UploaderBuilder}\n     */\n    public retry(retry: number): UploaderBuilder {\n        this._retry = retry;\n        return this;\n    }\n\n    /**\n     * 设置分片大小\n     * @param size 分块大小,单位字节,默认4*1024*1024字节(4mb)\n     * @returns {UploaderBuilder}\n     */\n    private size(size: number): UploaderBuilder {\n        this._size = Math.min(Math.max(size, 1), UploaderBuilder.MAX_CHUNK_SIZE);\n        return this;\n    }\n\n    /**\n     * 选择文件后,是否自动上传\n     * @param auto 默认true\n     * @returns {UploaderBuilder}\n     */\n    public auto(auto: boolean): UploaderBuilder {\n        this._auto = auto;\n        return this;\n    }\n\n    /**\n     * 是否支持多文件选择\n     * @param multiple 默认true\n     * @returns {UploaderBuilder}\n     */\n    public multiple(multiple: boolean): UploaderBuilder {\n        this._multiple = multiple;\n        return this;\n    }\n\n    /**\n     * 接受上传的文件类型\n     * @param accept 数组形式例如:['.png','video/*']\n     *\n     * 详细配置见http://www.w3schools.com/tags/att_input_accept.asp\n     *\n     * @returns {UploaderBuilder}\n     */\n    public accept(accept: string[]): UploaderBuilder {\n        this._accept = accept;\n        return this;\n    }\n\n    /**\n     * 设置上传按钮\n     * @param button 上传按钮ID\n     * @param eventName 上传按钮的监听事件名称，默认为 \"click\" 。\n     * @returns {UploaderBuilder}\n     */\n    public button(button: string, eventName = \"click\"): UploaderBuilder {\n        this._button = button;\n        this._buttonEventName = eventName;\n        return this;\n    }\n\n    /**\n     * 图片质量压缩,只在上传的文件是图片的时候有效\n     * @param compress 0-1,默认1,不压缩\n     * @returns {UploaderBuilder}\n     */\n    public compress(compress: number): UploaderBuilder {\n        this._compress = Math.max(Math.min(compress, 1), 0);\n        return this;\n    }\n\n    /**\n     * 图片缩放\n     * @returns {UploaderBuilder}\n     * @param scale\n     */\n    public scale(scale: number[]): UploaderBuilder {\n        this._scale = scale;\n        return this;\n    }\n\n    /**\n     * 设置 saveKey\n     * @param saveKey\n     * @returns {UploaderBuilder}\n     */\n    public saveKey(saveKey: boolean | string): UploaderBuilder {\n        this._saveKey = saveKey;\n        return this;\n    }\n\n    /**\n     * 获取Token的地址\n     * @param tokenUrl\n     * @returns {UploaderBuilder}\n     */\n    public tokenUrl(tokenUrl): UploaderBuilder {\n        this._tokenFunc = (uploader: Uploader, task: BaseTask) => {\n            return uploader.requestTaskToken(task, tokenUrl);\n        }\n        return this;\n    }\n\n    /**\n     * 获取Token的函数\n     * @param tokenFunc\n     * @returns {UploaderBuilder}\n     */\n    public tokenFunc(tokenFunc): UploaderBuilder {\n        this._tokenFunc = (uploader: Uploader, task: BaseTask) => {\n            return new Promise((resolve) => {\n                tokenFunc(resolve, task);\n            });\n        };\n        return this;\n    }\n\n    /**\n     * 上传生命周期钩子\n     * @param listener\n     * @returns {UploaderBuilder}\n     */\n    public listener(listener: UploadListener): UploaderBuilder {\n        this._listener = listener;\n        return this;\n    }\n\n    /**\n     * 是否分享token,如果为false每上传一个文件都需要请求一次Token。\n     * @param tokenShare\n     * @returns {UploaderBuilder}\n     */\n    public tokenShare(tokenShare: boolean): UploaderBuilder {\n        this._tokenShare = tokenShare;\n        return this;\n    }\n\n    /**\n     * 是否分块上传\n     * @param chunk 默认false\n     * @returns {UploaderBuilder}\n     */\n    public chunk(chunk: boolean): UploaderBuilder {\n        this._chunk = chunk;\n        return this;\n    }\n\n    /**\n     * 是否开启debug模式\n     * @param debug 默认false\n     * @returns {UploaderBuilder}\n     */\n    public debug(debug: boolean): UploaderBuilder {\n        this._isDebug = debug;\n        return this;\n    }\n\n    get getRetry(): number {\n        return this._retry;\n    }\n\n    get getSize(): number {\n        return this._size;\n    }\n\n    get getAuto(): boolean {\n        return this._auto;\n    }\n\n    get getMultiple(): boolean {\n        return this._multiple;\n    }\n\n    get getAccept(): string[] {\n        return this._accept;\n    }\n\n    get getButton(): string {\n        return this._button;\n    }\n\n    get getButtonEventName(): string {\n        return this._buttonEventName;\n    }\n\n    get getCompress(): number {\n        return this._compress;\n    }\n\n    get getScale(): number[] {\n        return this._scale;\n    }\n\n    get getListener(): UploadListener {\n        return this._listener;\n    }\n\n    get getSaveKey(): boolean | string {\n        return this._saveKey;\n    }\n\n    get getTokenFunc(): TokenFunc {\n        return this._tokenFunc;\n    }\n\n    get getTokenShare(): boolean {\n        return this._tokenShare;\n    }\n\n    get getChunk(): boolean {\n        return this._chunk;\n    }\n\n    get getIsDebug(): boolean {\n        return this._isDebug;\n    }\n\n    get getInterceptors(): Interceptor[] {\n        return this._interceptors;\n    }\n\n    get getDomain(): string {\n        let domain: any = this._domain;\n        if (domain == null) {\n            domain = UploaderBuilder.UPLOAD_DOMAIN;\n        }\n        if (typeof domain != \"string\") {\n            let scheme = this._scheme;\n            if (typeof scheme != \"string\") {\n                let protocol = window.location.protocol;\n                scheme = protocol.substring(0, protocol.length - 1) as Scheme\n            }\n            domain = domain[scheme];\n        }\n        return domain.endsWith('/') ? domain.substring(0, domain.length - 1) : domain;\n    }\n\n    public build(): Uploader {\n        return new Uploader(this);\n    }\n}\n\nexport default UploaderBuilder;","class Debug {\n    private static _enable: boolean = true;\n\n    static get enable(): boolean {\n        return this._enable;\n    }\n\n    static set enable(value: boolean) {\n        this._enable = value;\n    }\n\n    public static d(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.debug(object);\n    };\n\n    public static l(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.log(object);\n    }\n\n    public static e(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.error(object);\n    }\n\n    public static w(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.warn(object);\n    }\n\n    public static i(object) {\n        if (!Debug._enable) {\n            return;\n        }\n        console.info(object);\n    }\n}\n\nexport default Debug;","import Task from \"../task/DirectTask\";\nimport UploadListener from \"./UploadListener\";\nclass SimpleUploadListener implements UploadListener {\n\n    onReady(taskQueue: Task[]): void {\n    }\n\n    onStart(taskQueue: Task[]): void {\n    }\n\n    onTaskProgress(task: Task): void {\n    }\n\n    onTaskGetKey(task: Task): string {\n        return null;\n    }\n\n    onTaskFail(task: Task): void {\n    }\n\n    onTaskSuccess(task: Task): void {\n    }\n\n    onTaskRetry(task: Task): void {\n    }\n\n    onFinish(taskQueue: Task[]): void {\n    }\n}\n\nexport  default SimpleUploadListener;","import IUploadPattern from \"./IUploadPattern\";\nimport Uploader from \"../Uploader\";\nimport DirectTask from \"../task/DirectTask\";\nimport debug from \"../../util/Debug\";\n/**\n * 直接上传\n */\nclass DirectUploadPattern implements IUploadPattern {\n    private uploader: Uploader;\n    private task: DirectTask;\n\n    constructor(uploader: Uploader) {\n        this.uploader = uploader;\n    }\n\n    /**\n     * 实现接口的上传方法\n     * @param task\n     */\n    upload(task: DirectTask): void {\n        this.task = task;\n\n        this.uploader.getToken(task).then((token: string) => {\n            task.startDate = new Date();\n            this.uploadFile(token);\n        });\n\n    }\n\n\n    /**\n     * 创建表单\n     * @param token\n     * @returns {FormData}\n     */\n    private createFormData(token: String): FormData {\n        let task: DirectTask = this.task;\n        let formData: FormData = new FormData();\n\n        //key存在，添加到formData中，若不设置，七牛服务器会自动生成hash key\n        if (task.key !== null && task.key !== undefined) {\n            formData.append('key', task.key);\n        }\n\n        formData.append('token', token);\n        formData.append('file', task.file);\n\n        debug.d(`创建formData对象`);\n\n        return formData;\n    }\n\n\n    /**\n     * 上传文件\n     * @param token\n     */\n    private uploadFile(token: string) {\n        let task: DirectTask = this.task;\n\n        let xhr: XMLHttpRequest = new XMLHttpRequest();\n\n        //上传中\n        xhr.upload.onprogress = (e: ProgressEvent) => {\n            if (e.lengthComputable) {\n                let progress = Math.round((e.loaded * 100) / e.total);\n                if (task.progress < progress) {\n                    task.progress = progress;\n                    this.uploader.listener.onTaskProgress(task);\n                }\n            }\n        };\n\n        //上传完成\n        xhr.upload.onload = () => {\n            if (task.progress < 100) {\n                task.progress = 100;\n                this.uploader.listener.onTaskProgress(task);\n            }\n        };\n\n\n        let url = this.uploader.domain;\n        //避免浏览器缓存http请求\n        url += ((/\\?/).test(this.uploader.domain) ? \"&\" : \"?\") + (new Date()).getTime();\n        xhr.open('POST', url, true);\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == XMLHttpRequest.DONE) {\n                if (xhr.status == 200 && xhr.responseText != '') {\n                    task.result = JSON.parse(xhr.responseText);\n                    task.isSuccess = true;\n                    task.isFinish = true;\n                    task.endDate = new Date();\n                    this.uploader.listener.onTaskSuccess(task);\n                }\n                else if (this.retryTask(task)) {\n                    debug.w(`${task.file.name}上传失败,准备开始重传`);\n                    this.uploader.listener.onTaskRetry(task);\n                }\n                else {\n                    debug.w(`${task.file.name}上传失败`);\n                    task.error = xhr.response;\n                    task.isSuccess = false;\n                    task.isFinish = true;\n                    task.endDate = new Date();\n                    this.uploader.listener.onTaskFail(task);\n                }\n\n                //所有任务都结束了\n                if (this.uploader.isTaskQueueFinish()) {\n                    //更改任务执行中标志\n                    this.uploader.tasking = false;\n\n                    //onFinish callback\n                    this.uploader.listener.onFinish(this.uploader.taskQueue);\n                }\n            }\n        };\n\n        let formData: FormData = this.createFormData(token);\n        xhr.send(formData);\n        debug.d(\"发送ajax post 请求\");\n    }\n\n\n    /**\n     * 重传\n     * @param task\n     * @returns {boolean}\n     */\n    private retryTask(task: DirectTask): boolean {\n        debug.d(\"开始尝试重传\");\n        //达到重试次数\n        if (task.retry >= this.uploader.retry) {\n            debug.w(`${task.file.name}达到重传次数上限${this.uploader.retry},停止重传`);\n            return false;\n        }\n        task.retry++;\n        debug.w(`${task.file.name}开始重传,当前重传次数${task.retry}`);\n        this.upload(task);\n        return true;\n    }\n}\n\n\nexport  default DirectUploadPattern;","import IUploadPattern from \"./IUploadPattern\";\nimport Uploader from \"../Uploader\";\nimport {ChunkTask, Block, Chunk} from \"../task/ChunkTask\";\nimport debug from \"../../util/Debug\";\n\n/**\n * 分块上传\n */\nclass ChunkUploadPattern implements IUploadPattern {\n    private uploader: Uploader;\n    private task: ChunkTask;\n\n    constructor(uploader: Uploader) {\n        this.uploader = uploader;\n    }\n\n    init(uploader: Uploader): void {\n        this.uploader = uploader;\n    }\n\n    upload(task: ChunkTask): void {\n        this.task = task;\n\n        this.uploader.getToken(task).then((token: string) => {\n            task.startDate = new Date();\n            this.uploadBlock(token);\n        });\n    }\n\n    private uploadBlock(token: string) {\n        debug.d(`准备开始上传块`);\n        let chain: Promise = Promise.resolve();\n        debug.d(`共${this.task.blocks.length}块等待上传`);\n        debug.d(`共${this.task.totalChunkCount}分片等待上传`);\n\n        this.task.blocks.forEach((block, blockIndex) => {\n            block.chunks.forEach((chunk, chunkIndex) => {\n                chain = chain.then(() => {\n                    debug.d(`开始上传第${(blockIndex + 1)}块,第${(chunkIndex + 1)}片`);\n                    return this.uploadChunk(chunk, token)\n                });\n            });\n        });\n\n\n        chain.then(() => {\n            return this.concatChunks(token);\n        }).then(() => {\n            //所有任务都结束了\n            if (this.uploader.isTaskQueueFinish()) {\n                debug.d(`上传任务队列已结束`);\n\n                //更改任务执行中标志\n                this.uploader.tasking = false;\n\n                //监听器调用\n                this.uploader.listener.onFinish(this.uploader.taskQueue);\n            }\n        }).catch((response) => {\n            debug.w(`${this.task.file.name}分块上传失败`);\n            this.task.error = response;\n            this.task.isSuccess = false;\n            this.task.isFinish = true;\n            this.task.endDate = new Date();\n            this.uploader.listener.onTaskFail(this.task);\n        });\n    }\n\n    private uploadChunk(chunk: Chunk, token: string) {\n        return new Promise((resolve, reject) => {\n            let isFirstChunkInBlock = chunk.block.chunks.indexOf(chunk) == 0;\n            let chunkIndex = chunk.block.chunks.indexOf(chunk);\n            //前一个chunk,如果存在的话\n            let prevChunk = isFirstChunkInBlock ? null : chunk.block.chunks[chunkIndex - 1];\n\n            let url: string = isFirstChunkInBlock ? this.getUploadBlockUrl(chunk.block.data.size) : this.getUploadChunkUrl(chunk.start, prevChunk ? prevChunk.ctx : null, prevChunk ? prevChunk.host : null);\n\n            let xhr: XMLHttpRequest = new XMLHttpRequest();\n            xhr.open('POST', url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime(), true);\n            xhr.setRequestHeader('Content-Type', 'application/octet-stream');//设置contentType\n            xhr.setRequestHeader('Authorization', `UpToken ${token}`);//添加token验证头\n\n            //分片上传中\n            xhr.upload.onprogress = (e: ProgressEvent) => {\n                if (e.lengthComputable) {\n                    let progress = Math.round(((this.task.finishedBlocksSize + chunk.start + e.loaded) / this.task.file.size) * 100);\n                    if (this.task.progress < progress) {\n                        this.task.progress = progress;\n                        this.uploader.listener.onTaskProgress(this.task);\n                    }\n                }\n            };\n\n            //分片上传完成\n            xhr.upload.onload = () => {\n                let progress = Math.round(((this.task.finishedBlocksSize + chunk.start + chunk.data.size) / this.task.file.size) * 100);\n                if (this.task.progress < progress) {\n                    this.task.progress = progress;\n                    this.uploader.listener.onTaskProgress(this.task);\n                }\n            };\n\n            //响应返回\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == XMLHttpRequest.DONE) {\n                    if (xhr.status == 200 && xhr.responseText != '') {\n                        let result: any = JSON.parse(xhr.responseText);\n                        chunk.isFinish = true;\n                        chunk.processing = false;\n                        chunk.ctx = result.ctx;\n                        chunk.host = result.host;\n                        let chunkIndex: number = chunk.block.chunks.indexOf(chunk);\n                        let hasNextChunkInThisBlock: boolean = chunkIndex != chunk.block.chunks.length - 1;\n                        if (!hasNextChunkInThisBlock) {\n                            chunk.block.isFinish = true;\n                            chunk.block.processing = false;\n                        }\n                        resolve();\n                    }\n                    else {\n                        reject(xhr.response);\n                    }\n                }\n            };\n\n            xhr.send(chunk.data);\n        });\n    }\n\n\n    private concatChunks(token: string) {\n        return new Promise((resolve, reject) => {\n            let encodedKey = this.task.key ? btoa(this.task.key) : null;\n            // 安全字符串 参考：https://developer.qiniu.com/kodo/api/mkfile\n            if (encodedKey) {\n                encodedKey = encodedKey.replace(/\\+/g, '-');\n                encodedKey = encodedKey.replace(/\\//g, '_');\n            }\n            let url = this.getMakeFileUrl(this.task.file.size, encodedKey);\n            //构建所有数据块最后一个数据片上传后得到的<ctx>的组合成的列表字符串\n            let ctxListString = '';\n\n            for (let block: Block of this.task.blocks) {\n                let lastChunk = block.chunks[block.chunks.length - 1];\n                ctxListString += lastChunk.ctx + ',';\n            }\n\n            if (ctxListString.endsWith(',')) {\n                ctxListString = ctxListString.substring(0, ctxListString.length - 1);\n            }\n\n            let xhr: XMLHttpRequest = new XMLHttpRequest();\n            xhr.open('POST', url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime(), true);\n            xhr.setRequestHeader('Content-Type', 'text/plain');//设置contentType\n            xhr.setRequestHeader('Authorization', `UpToken ${token}`);//添加token验证头\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == XMLHttpRequest.DONE) {\n                    this.task.isFinish = true;\n                    if (xhr.status == 200 && xhr.responseText != '') {\n                        let result: any = JSON.parse(xhr.responseText);\n                        this.task.isSuccess = true;\n                        this.task.result = result;\n                        this.task.endDate = new Date();\n                        this.uploader.listener.onTaskSuccess(this.task);\n                        resolve();\n                    }\n                    else if (this.retryTask(this.task)) {\n                        debug.w(`${this.task.file.name}分块上传失败,准备开始重传`);\n                        this.uploader.listener.onTaskRetry(this.task);\n                    }\n                    else {\n                        reject(xhr.response);\n                    }\n                }\n            };\n            xhr.send(ctxListString);\n        });\n    }\n\n    /**\n     * 获取块上传的url\n     * @param blockSize\n     * @returns {string}\n     */\n    private  getUploadBlockUrl(blockSize: number): string {\n        return `${this.uploader.domain}/mkblk/${blockSize}`;\n    }\n\n    /**\n     * 获取片上传的url\n     * @param start 片的在块中的起始位置\n     * @param ctx 前一次上传返回的块级上传控制信息。\n     * @param host 指定host\n     */\n    private  getUploadChunkUrl(start: number, ctx: string, host?: string): string {\n        return `${host ? host : this.uploader.domain}/bput/${ctx}/${start}/`;\n    }\n\n    /**\n     * 获取合并块为文件的url\n     * @param fileSize 文件大小\n     * @param encodedKey base64UrlEncode后的资源名称,若未指定，则使用saveKey；若未指定saveKey，则使用资源内容的SHA1值作为资源名。\n     * @returns {string}\n     */\n    private  getMakeFileUrl(fileSize: number, encodedKey: string): string {\n        if (encodedKey) {\n            return `${this.uploader.domain}/mkfile/${fileSize}/key/${encodedKey}`;\n        }\n        else {\n            return `${this.uploader.domain}/mkfile/${fileSize}`;\n        }\n    }\n\n\n    private retryTask(task: ChunkTask): boolean {\n        //达到重试次数\n        if (task.retry >= this.uploader.retry) {\n            debug.w(`${task.file.name}达到重传次数上限${this.uploader.retry},停止重传`);\n            return false;\n        }\n        task.retry++;\n        debug.w(`${task.file.name}开始重传,当前重传次数${task.retry}`);\n        // this.upload(task);\n\n        //todo\n        return true;\n    }\n\n}\n\n\nexport  default ChunkUploadPattern;","/**\n * Object.assign polyfill\n */\nif (typeof Object.assign != 'function') {\n    Object.assign = function (target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        target = Object(target);\n        for (let index = 1; index < arguments.length; index++) {\n            let source = arguments[index];\n            if (source != null) {\n                for (let key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n}\n\n/**\n * canvas.toBlob polyfill\n */\nif (!HTMLCanvasElement.prototype.toBlob) {\n    Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n        value: function (callback, type, quality) {\n\n            let binStr = atob(this.toDataURL(type, quality).split(',')[1]),\n                len = binStr.length,\n                arr = new Uint8Array(len);\n\n            for (let i = 0; i < len; i++) {\n                arr[i] = binStr.charCodeAt(i);\n            }\n\n            callback(new Blob([arr], {type: type || 'image/png'}));\n        }\n    });\n}\n\n/**\n * endsWith polyfill\n */\nif (!String.prototype.endsWith) {\n    let toString = {}.toString;\n    let endsWith = function (search) {\n        if (this == null) {\n            throw TypeError();\n        }\n        let string = String(this);\n        if (search && toString.call(search) == '[object RegExp]') {\n            throw TypeError();\n        }\n        let stringLength = string.length;\n        let searchString = String(search);\n        let searchLength = searchString.length;\n        let pos = stringLength;\n        if (arguments.length > 1) {\n            let position = arguments[1];\n            if (position !== undefined) {\n                // `ToInteger`\n                pos = position ? Number(position) : 0;\n                if (pos != pos) { // better `isNaN`\n                    pos = 0;\n                }\n            }\n        }\n        let end = Math.min(Math.max(pos, 0), stringLength);\n        let start = end - searchLength;\n        if (start < 0) {\n            return false;\n        }\n        let index = -1;\n        while (++index < searchLength) {\n            if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    if (Object.defineProperty) {\n        Object.defineProperty(String.prototype, 'endsWith', {\n            'value': endsWith,\n            'configurable': true,\n            'writable': true\n        });\n    } else {\n        String.prototype.endsWith = endsWith;\n    }\n}","import BaseTask from \"./task/BaseTask\";\nimport DirectTask from \"./task/DirectTask\";\nimport {ChunkTask} from \"./task/ChunkTask\";\nimport TokenFunc from \"./TokenFunc\";\nimport UUID from \"./uuid/UUID\";\nimport UploaderBuilder from \"./UploaderBuilder\";\nimport debug from \"../util/Debug\";\nimport Interceptor from \"./interceptor/UploadInterceptor\";\nimport UploadListener from \"./hook/UploadListener\";\nimport SimpleUploadListener from \"./hook/SimpleUploadListener\";\nimport DirectUploadPattern from \"./pattren/DirectUploadPattern\";\nimport ChunkUploadPattern from \"./pattren/ChunkUploadPattern\";\nimport \"../util/Polyfill\";\n\nclass Uploader {\n    private FILE_INPUT_EL_ID: string = 'qiniu4js-input';\n    private _fileInputId: string;\n    private _fileInput: HTMLInputElement;//input 元素\n    private _token: string;//token\n    private _taskQueue: BaseTask[] = [];//任务队列\n    private _tasking: boolean = false;//任务执行中\n\n    private _retry: number;//最大重试次数\n    private _size: number;//分片大小,单位字节,最大4mb,不能为0\n    private _chunk: boolean;//分块上传,该选项开启后，只有在文件大于4mb的时候才会分块上传\n    private _auto: boolean;//自动上传,每次选择文件后\n    private _multiple: boolean;//是否支持多文件\n    private _accept: string[];//接受的文件类型\n    private _button: string;//上传按钮\n    private _buttonEventName: string;//上传按钮的监听事件名称\n    private _compress: number;//图片压缩质量\n    private _scale: number[] = [];//缩放大小,限定高度等比缩放[h:200,w:0],限定宽度等比缩放[h:0,w:100],限定长宽[h:200,w:100]\n    private _listener: UploadListener;//监听器\n    private _saveKey: boolean | string = false;\n    private _tokenFunc: TokenFunc;//token获取函数\n    private _tokenShare: boolean;//分享token,如果为false,每一次HTTP请求都需要新获取Token\n    private _interceptors: Interceptor[];//任务拦截器\n    private _domain: string;//上传域名\n\n    constructor(builder: UploaderBuilder) {\n        this._retry = builder.getRetry;\n        this._size = builder.getSize;\n        this._chunk = builder.getChunk;\n        this._auto = builder.getAuto;\n        this._multiple = builder.getMultiple;\n        this._accept = builder.getAccept;\n        this._button = builder.getButton;\n        this._buttonEventName = builder.getButtonEventName;\n        this._compress = builder.getCompress;\n        this._scale = builder.getScale;\n        this._saveKey = builder.getSaveKey;\n        this._tokenFunc = builder.getTokenFunc;\n        this._tokenShare = builder.getTokenShare;\n        this._listener = Object.assign(new SimpleUploadListener(), builder.getListener);\n        this._interceptors = builder.getInterceptors;\n        this._domain = builder.getDomain;\n        this._fileInputId = `${this.FILE_INPUT_EL_ID}_${new Date().getTime()}`;\n        debug.enable = builder.getIsDebug;\n\n        this.validateOptions();\n\n        this.init();\n    }\n\n    /**\n     * 初始化操作\n     */\n    private init(): void {\n        this.initFileInputEl();\n        // this.initUploadPattern();\n    }\n\n    /**\n     * 初始化上传模式\n     */\n    private initUploadPattern(): void {\n        // this._directUploadPattern = new DirectUploadPattern();\n        // this._directUploadPattern.init(this);\n        //\n        // this._chunkUploadPattern = new ChunkUploadPattern();\n        // this._chunkUploadPattern.init(this);\n    }\n\n    /**\n     * 初始化file input element\n     */\n    private initFileInputEl(): void {\n\n        //查询已经存在的file input\n        let exist: HTMLInputElement = <HTMLInputElement> document.getElementById(this._fileInputId);\n\n        //创建input元素\n        this._fileInput = exist ? exist : document.createElement('input');\n        this.fileInput.type = 'file';//type file\n        this.fileInput.id = this._fileInputId;//id 方便后面查找\n        this.fileInput.style.display = 'none';//隐藏file input\n\n        //多文件\n        if (this.multiple) {\n            //多文件\n            this.fileInput.multiple = true;\n        }\n\n        //文件类型\n        if (this.accept && this.accept.length != 0) {\n            let acceptValue: string = '';\n            for (let value: string of this.accept) {\n                acceptValue += value;\n                acceptValue += ',';\n            }\n\n            if (acceptValue.endsWith(',')) {\n                acceptValue = acceptValue.substring(0, acceptValue.length - 1);\n            }\n            this.fileInput.accept = acceptValue;\n            debug.d(`accept类型 ${acceptValue}`);\n        }\n\n        //将input元素添加到body子节点的末尾\n        document.body.appendChild(this.fileInput);\n\n        //选择文件监听器\n        this.fileInput.addEventListener('change', this.handleFiles, false);\n\n        if (this._button != undefined) {\n            let button = document.getElementById(this._button);\n            button.addEventListener(this._buttonEventName, this.chooseFile.bind(this));\n        }\n    }\n\n\n    /**\n     * 上传完成或者失败后,对本次上传任务进行清扫\n     */\n    private resetUploader(): void {\n        debug.d(\"开始重置 uploader\");\n        this.taskQueue.length = 0;\n        debug.d(\"任务队列已清空\");\n        this._token = null;\n        debug.d(\"token已清空\");\n        debug.d(\"uploader 重置完毕\");\n    }\n\n    /**\n     * 处理文件\n     */\n    private handleFiles = () => {\n        //如果没有选中文件就返回\n        if (this.fileInput.files.length == 0) {\n            return;\n        }\n\n        //生成task\n        this.generateTask();\n\n        //是否中断任务\n        let isInterrupt: Boolean = false;\n        let interceptedTasks: BaseTask[] = [];\n\n        //任务拦截器过滤\n        for (let task: BaseTask of this.taskQueue) {\n            for (let interceptor: Interceptor of this.interceptors) {\n                //拦截生效\n                if (interceptor.onIntercept(task)) {\n                    interceptedTasks.push(task);\n                    debug.d(\"任务拦截器拦截了任务:\");\n                    debug.d(task);\n                }\n                //打断生效\n                if (interceptor.onInterrupt(task)) {\n                    //将打断标志位设为true\n                    isInterrupt = true;\n                    break;\n                }\n            }\n        }\n\n        if (isInterrupt) {\n            debug.w(\"任务拦截器中断了任务队列\");\n            return;\n        }\n\n        //从任务队列中去除任务\n        for (let task of interceptedTasks) {\n            let index = this.taskQueue.indexOf(task);\n            if (index != -1) {\n                this.taskQueue.splice(index, 1);\n            }\n        }\n\n        //回调函数函数\n        this.listener.onReady(this.taskQueue);\n\n\n        //处理图片\n        this.handleImages().then(() => {\n            //自动上传\n            if (this.auto) {\n                debug.d(\"开始自动上传\");\n                this.start();\n            }\n        });\n    };\n\n\n    /**\n     * 是否是分块任务\n     * @param task\n     * @returns {boolean}\n     */\n    private static isChunkTask(task: BaseTask): boolean {\n        return task.constructor.name === ChunkTask.name && task instanceof ChunkTask;\n    }\n\n    /**\n     * 是否是直传任务\n     * @param task\n     * @returns {boolean}\n     */\n    private static isDirectTask(task: BaseTask): boolean {\n        return task.constructor.name === DirectTask.name && task instanceof DirectTask;\n    }\n\n    /**\n     * 生成task\n     */\n    private generateTask() {\n        this.resetUploader();\n\n        let files: FileList = this.fileInput.files;\n\n        //遍历files 创建上传任务\n        for (let i: number = 0; i < this.fileInput.files.length; i++) {\n            let file: File = files[i];\n\n            let task: BaseTask;\n            //只有在开启分块上传，并且文件大小大于4mb的时候才进行分块上传\n            if (this.chunk && file.size > UploaderBuilder.BLOCK_SIZE) {\n                task = new ChunkTask(file, UploaderBuilder.BLOCK_SIZE, this.size);\n            }\n            else {\n                task = new DirectTask(file);\n            }\n            if (this._saveKey == false) {\n                task.key = this.listener.onTaskGetKey(task);\n            }\n            this.taskQueue.push(task);\n        }\n    }\n\n    /**\n     * 处理图片-缩放-质量压缩\n     */\n    private handleImages(): Promise {\n        let promises: Promise<Blob>[] = [];\n\n        if (this.compress != 1 || this.scale[0] != 0 || this.scale[1] != 0) {\n            for (let task: BaseTask of this.taskQueue) {\n                if (!task.file.type.match('image.*')) {\n                    continue;\n                }\n                debug.d(`${task.file.name} 处理前的图片大小:${task.file.size / 1024} kb`);\n\n                let canvas: HTMLCanvasElement = <HTMLCanvasElement> document.createElement('canvas');\n\n                let img: HTMLImageElement = new Image();\n                let ctx: CanvasRenderingContext2D = <CanvasRenderingContext2D>canvas.getContext('2d');\n                img.src = URL.createObjectURL(task.file);\n\n\n                let _this = this;\n\n                promises.push(new Promise<Blob>((resolve) =>\n                    img.onload = () => {\n\n                        let imgW = img.width;\n                        let imgH = img.height;\n\n                        let scaleW = _this.scale[0];\n                        let scaleH = _this.scale[1];\n\n                        if (scaleW == 0 && scaleH > 0) {\n                            canvas.width = imgW / imgH * scaleH;\n                            canvas.height = scaleH;\n                        }\n                        else if (scaleH == 0 && scaleW > 0) {\n                            canvas.width = scaleW;\n                            canvas.height = imgH / imgW * scaleW;\n                        }\n                        else if (scaleW > 0 && scaleH > 0) {\n                            canvas.width = scaleW;\n                            canvas.height = scaleH;\n                        }\n                        else {\n                            canvas.width = img.width;\n                            canvas.height = img.height;\n                        }\n\n                        //这里的长宽是绘制到画布上的图片的长宽\n                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n                        console.log(canvas);\n                        console.log(canvas.toBlob);\n                        //0.95是最接近原图大小，如果质量为1的话会导致比原图大几倍。\n                        canvas.toBlob((blob: Blob) => {\n                            resolve(blob);\n                            debug.d(`${task.file.name} 处理后的图片大小:${blob.size / 1024} kb`);\n                        }, \"image/jpeg\", _this.compress * 0.95);\n                    }\n                ).then((blob: any) => {\n                    blob.name = task.file.name;\n                    task.file = blob;\n                    if (Uploader.isChunkTask(task)) {\n                        (<ChunkTask>task).spliceFile2Block();\n                    }\n                }));\n            }\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * 检验选项合法性\n     */\n    private  validateOptions(): void {\n        debug.d(\"开始检查构建参数合法性\");\n        if (!this._tokenFunc) {\n            throw new Error('你必须提供一个获取Token的回调函数');\n        }\n        if (!this.scale || !this.scale instanceof Array || this.scale.length != 2 || this.scale[0] < 0 || this.scale[1] < 0) {\n            throw new Error('scale必须是长度为2的number类型的数组,scale[0]为宽度，scale[1]为长度,必须大于等于0');\n        }\n        debug.d(\"构建参数检查完毕\");\n    }\n\n    /**\n     * 开始上传\n     */\n    public start(): void {\n        debug.d(`上传任务遍历开始`);\n\n        if (this.fileInput.files.length == 0) {\n            throw new Error('没有选中的文件，无法开始上传');\n        }\n\n        if (this.tasking) {\n            throw new Error('任务执行中，请不要重复上传');\n        }\n\n        this.listener.onStart(this.taskQueue);\n\n        //遍历任务队列\n        for (let task: BaseTask of this.taskQueue) {\n            debug.d(`上传文件名：${task.file.name}`);\n            debug.d(`上传文件大小：${task.file.size}字节，${task.file.size / 1024} kb，${task.file.size / 1024 / 1024} mb`);\n            //根据任务的类型调用不同的上传模式进行上传\n            if (Uploader.isDirectTask(task)) {\n                debug.d('该上传任务为直传任务');\n                //直传\n                new DirectUploadPattern(this).upload(<DirectTask>task);\n            }\n            else if (Uploader.isChunkTask(task)) {\n                debug.d('该上传任务为分片任务');\n                //分块上传\n                new ChunkUploadPattern(this).upload(<ChunkTask>task);\n            }\n            else {\n                throw new Error('非法的task类型');\n            }\n        }\n    }\n\n    /**\n     * 所有任务是否完成\n     * @returns {boolean}\n     */\n    public isTaskQueueFinish() {\n        for (let task: BaseTask of this.taskQueue) {\n            if (!task.isFinish) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 选择文件\n     */\n    public chooseFile() {\n        this.fileInput.click();\n    }\n\n    public getToken(task: BaseTask): Promise<string> {\n        if (this._tokenShare && this._token != undefined) {\n            return Promise.resolve(this._token);\n        }\n        debug.d(`开始获取上传token`);\n        return Promise.resolve(this._tokenFunc(this, task)).then((token: string): string => {\n            debug.d(`上传token获取成功: ${token}`);\n            this._token = token;\n            return token;\n        });\n    }\n\n    public requestTaskToken(task: BaseTask, url: string): Promise<string> {\n        return this.resolveSaveKey(task).then((saveKey: string) => {\n            return this.requestToken(url, saveKey);\n        });\n    }\n\n    private requestToken(url: string, saveKey: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (typeof saveKey == \"string\") {\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + \"saveKey=\" + encodeURIComponent(saveKey);\n            }\n            url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n\n            let xhr: XMLHttpRequest = new XMLHttpRequest();\n            xhr.open('GET', url, true);\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState != XMLHttpRequest.DONE) {\n                    return;\n                }\n                if (xhr.status == 200) {\n                    resolve(xhr.response.uptoken);\n                    return;\n                }\n                reject(xhr.response);\n            };\n            xhr.onabort = () => {\n                reject('aborted');\n            };\n            xhr.responseType = 'json';\n            xhr.send();\n        });\n    }\n\n    private resolveSaveKey(task: BaseTask): Promise<string> {\n        let saveKey = this._saveKey;\n        if (typeof saveKey != \"string\") {\n            return Promise.resolve(undefined);\n        }\n        return Promise.resolve(saveKey)\n            .then(this.resolveUUID)\n            .then(saveKey => this.resolveImageInfo(task.file, saveKey))\n            .then(this.onSaveKeyResolved);\n    }\n\n    private resolveUUID = (s: string): string => {\n        let re = /\\$\\(uuid\\)/;\n        if (re.test(s)) {\n            return s.replace(re, UUID.uuid());\n        }\n        return s;\n    };\n\n    private resolveImageInfo = (blob: Blob, s: string): Promise<string> => {\n        let widthRe = /\\$\\(imageInfo\\.width\\)/;\n        let heightRe = /\\$\\(imageInfo\\.height\\)/;\n        if (!widthRe.test(s) && !heightRe.test(s)) {\n            return Promise.resolve(s);\n        }\n        return new Promise<string>((resolve) => {\n            let img = new Image();\n            img.src = URL.createObjectURL(blob);\n            img.onload = () => {\n                s = s.replace(widthRe, img.width.toString());\n                s = s.replace(heightRe, img.height.toString());\n                resolve(s);\n            };\n        });\n    };\n\n    private onSaveKeyResolved = (saveKey: string): string => {\n        this._tokenShare = this._tokenShare && this._saveKey == saveKey;\n        return saveKey;\n    };\n\n    get retry(): number {\n        return this._retry;\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    get auto(): boolean {\n        return this._auto;\n    }\n\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    get accept(): string[] {\n        return this._accept;\n    }\n\n    get compress(): number {\n        return this._compress;\n    }\n\n    get scale(): number[] {\n        return this._scale;\n    }\n\n    get listener(): UploadListener {\n        return this._listener;\n    }\n\n    get fileInput(): HTMLInputElement {\n        return this._fileInput;\n    }\n\n    get chunk(): boolean {\n        return this._chunk;\n    }\n\n    get taskQueue(): BaseTask[] {\n        return this._taskQueue;\n    }\n\n\n    get tasking(): boolean {\n        return this._tasking;\n    }\n\n    set tasking(value: boolean) {\n        this._tasking = value;\n    }\n\n    get interceptors(): Interceptor[] {\n        return this._interceptors;\n    }\n\n    get domain(): string {\n        return this._domain;\n    }\n}\n\nexport default Uploader;"],"names":["debug"],"mappings":"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"}